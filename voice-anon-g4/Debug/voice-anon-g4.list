
voice-anon-g4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b1c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08009cf8  08009cf8  00019cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f80  08009f80  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009f80  08009f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f88  08009f88  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f88  08009f88  00019f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f8c  08009f8c  00019f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b660  20000070  0800a000  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b6d0  0800a000  0002b6d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe09  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ea  00000000  00000000  0002fea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00031f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  00032b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000af32  00000000  00000000  00033610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003e87  00000000  00000000  0003e542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000423c9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000038c4  00000000  00000000  0004241c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009cdc 	.word	0x08009cdc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08009cdc 	.word	0x08009cdc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b974 	b.w	8000ee0 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468e      	mov	lr, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d14d      	bne.n	8000cba <__udivmoddi4+0xaa>
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	4694      	mov	ip, r2
 8000c22:	d969      	bls.n	8000cf8 <__udivmoddi4+0xe8>
 8000c24:	fab2 f282 	clz	r2, r2
 8000c28:	b152      	cbz	r2, 8000c40 <__udivmoddi4+0x30>
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	f1c2 0120 	rsb	r1, r2, #32
 8000c32:	fa20 f101 	lsr.w	r1, r0, r1
 8000c36:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3a:	ea41 0e03 	orr.w	lr, r1, r3
 8000c3e:	4094      	lsls	r4, r2
 8000c40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c44:	0c21      	lsrs	r1, r4, #16
 8000c46:	fbbe f6f8 	udiv	r6, lr, r8
 8000c4a:	fa1f f78c 	uxth.w	r7, ip
 8000c4e:	fb08 e316 	mls	r3, r8, r6, lr
 8000c52:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c56:	fb06 f107 	mul.w	r1, r6, r7
 8000c5a:	4299      	cmp	r1, r3
 8000c5c:	d90a      	bls.n	8000c74 <__udivmoddi4+0x64>
 8000c5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c62:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c66:	f080 811f 	bcs.w	8000ea8 <__udivmoddi4+0x298>
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	f240 811c 	bls.w	8000ea8 <__udivmoddi4+0x298>
 8000c70:	3e02      	subs	r6, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1a5b      	subs	r3, r3, r1
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c7c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c84:	fb00 f707 	mul.w	r7, r0, r7
 8000c88:	42a7      	cmp	r7, r4
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x92>
 8000c8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c94:	f080 810a 	bcs.w	8000eac <__udivmoddi4+0x29c>
 8000c98:	42a7      	cmp	r7, r4
 8000c9a:	f240 8107 	bls.w	8000eac <__udivmoddi4+0x29c>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca6:	1be4      	subs	r4, r4, r7
 8000ca8:	2600      	movs	r6, #0
 8000caa:	b11d      	cbz	r5, 8000cb4 <__udivmoddi4+0xa4>
 8000cac:	40d4      	lsrs	r4, r2
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d909      	bls.n	8000cd2 <__udivmoddi4+0xc2>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	f000 80ef 	beq.w	8000ea2 <__udivmoddi4+0x292>
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cca:	4630      	mov	r0, r6
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f683 	clz	r6, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d14a      	bne.n	8000d70 <__udivmoddi4+0x160>
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xd4>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80f9 	bhi.w	8000ed6 <__udivmoddi4+0x2c6>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb61 0303 	sbc.w	r3, r1, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	d0e0      	beq.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cf6:	e7dd      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000cf8:	b902      	cbnz	r2, 8000cfc <__udivmoddi4+0xec>
 8000cfa:	deff      	udf	#255	; 0xff
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f040 8092 	bne.w	8000e2a <__udivmoddi4+0x21a>
 8000d06:	eba1 010c 	sub.w	r1, r1, ip
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2601      	movs	r6, #1
 8000d14:	0c20      	lsrs	r0, r4, #16
 8000d16:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d1a:	fb07 1113 	mls	r1, r7, r3, r1
 8000d1e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d22:	fb0e f003 	mul.w	r0, lr, r3
 8000d26:	4288      	cmp	r0, r1
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x12c>
 8000d2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d2e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x12a>
 8000d34:	4288      	cmp	r0, r1
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2c0>
 8000d3a:	4643      	mov	r3, r8
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d44:	fb07 1110 	mls	r1, r7, r0, r1
 8000d48:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x156>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x154>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000d64:	4608      	mov	r0, r1
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d6e:	e79c      	b.n	8000caa <__udivmoddi4+0x9a>
 8000d70:	f1c6 0720 	rsb	r7, r6, #32
 8000d74:	40b3      	lsls	r3, r6
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d82:	fa01 f306 	lsl.w	r3, r1, r6
 8000d86:	431c      	orrs	r4, r3
 8000d88:	40f9      	lsrs	r1, r7
 8000d8a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d92:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d96:	0c20      	lsrs	r0, r4, #16
 8000d98:	fa1f fe8c 	uxth.w	lr, ip
 8000d9c:	fb09 1118 	mls	r1, r9, r8, r1
 8000da0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000da4:	fb08 f00e 	mul.w	r0, r8, lr
 8000da8:	4288      	cmp	r0, r1
 8000daa:	fa02 f206 	lsl.w	r2, r2, r6
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b8>
 8000db0:	eb1c 0101 	adds.w	r1, ip, r1
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2bc>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2bc>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4461      	add	r1, ip
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd0:	fb09 1110 	mls	r1, r9, r0, r1
 8000dd4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ddc:	458e      	cmp	lr, r1
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1e2>
 8000de0:	eb1c 0101 	adds.w	r1, ip, r1
 8000de4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dea:	458e      	cmp	lr, r1
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4461      	add	r1, ip
 8000df2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df6:	fba0 9402 	umull	r9, r4, r0, r2
 8000dfa:	eba1 010e 	sub.w	r1, r1, lr
 8000dfe:	42a1      	cmp	r1, r4
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46a6      	mov	lr, r4
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x2a4>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x212>
 8000e0a:	ebb3 0208 	subs.w	r2, r3, r8
 8000e0e:	eb61 010e 	sbc.w	r1, r1, lr
 8000e12:	fa01 f707 	lsl.w	r7, r1, r7
 8000e16:	fa22 f306 	lsr.w	r3, r2, r6
 8000e1a:	40f1      	lsrs	r1, r6
 8000e1c:	431f      	orrs	r7, r3
 8000e1e:	e9c5 7100 	strd	r7, r1, [r5]
 8000e22:	2600      	movs	r6, #0
 8000e24:	4631      	mov	r1, r6
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	f1c2 0320 	rsb	r3, r2, #32
 8000e2e:	40d8      	lsrs	r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	4301      	orrs	r1, r0
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e48:	fb07 3610 	mls	r6, r7, r0, r3
 8000e4c:	0c0b      	lsrs	r3, r1, #16
 8000e4e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e52:	fb00 f60e 	mul.w	r6, r0, lr
 8000e56:	429e      	cmp	r6, r3
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x260>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e68:	429e      	cmp	r6, r3
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	b289      	uxth	r1, r1
 8000e74:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e78:	fb07 3316 	mls	r3, r7, r6, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb06 f30e 	mul.w	r3, r6, lr
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x28a>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2b0>
 8000e96:	3e02      	subs	r6, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	1ac9      	subs	r1, r1, r3
 8000e9c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0x104>
 8000ea2:	462e      	mov	r6, r5
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e705      	b.n	8000cb4 <__udivmoddi4+0xa4>
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	e6e3      	b.n	8000c74 <__udivmoddi4+0x64>
 8000eac:	4618      	mov	r0, r3
 8000eae:	e6f8      	b.n	8000ca2 <__udivmoddi4+0x92>
 8000eb0:	454b      	cmp	r3, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f8>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f8>
 8000ec0:	4646      	mov	r6, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x28a>
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1e2>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x260>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b8>
 8000ed0:	3b02      	subs	r3, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x12c>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e709      	b.n	8000cee <__udivmoddi4+0xde>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x156>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <matrix_new>:
	int m, n;
	float ** v;
} mat_t, *mat;

mat matrix_new(int m, int n)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	mat x = (mat)malloc(sizeof(mat_t));
 8000eee:	200c      	movs	r0, #12
 8000ef0:	f006 fcc8 	bl	8007884 <malloc>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	60bb      	str	r3, [r7, #8]
	x->v = (float**)malloc(sizeof(float*) * m);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f006 fcc1 	bl	8007884 <malloc>
 8000f02:	4603      	mov	r3, r0
 8000f04:	461a      	mov	r2, r3
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	609a      	str	r2, [r3, #8]
	x->v[0] = (float*)calloc(sizeof(float), m * n);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	fb02 f303 	mul.w	r3, r2, r3
 8000f12:	461a      	mov	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	689c      	ldr	r4, [r3, #8]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	2004      	movs	r0, #4
 8000f1c:	f006 fc80 	bl	8007820 <calloc>
 8000f20:	4603      	mov	r3, r0
 8000f22:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < m; i++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e011      	b.n	8000f4e <matrix_new+0x6a>
		x->v[i] = x->v[0] + n * i;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	6819      	ldr	r1, [r3, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	009a      	lsls	r2, r3, #2
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	6898      	ldr	r0, [r3, #8]
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4403      	add	r3, r0
 8000f44:	440a      	add	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < m; i++)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dbe9      	blt.n	8000f2a <matrix_new+0x46>
	x->m = m;
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	601a      	str	r2, [r3, #0]
	x->n = n;
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	605a      	str	r2, [r3, #4]
	return x;
 8000f62:	68bb      	ldr	r3, [r7, #8]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd90      	pop	{r4, r7, pc}

08000f6c <matrix_delete>:

void matrix_delete(mat m)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	free(m->v[0]);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f006 fc8a 	bl	8007894 <free>
	free(m->v);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f006 fc85 	bl	8007894 <free>
	free(m);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f006 fc82 	bl	8007894 <free>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <matrix_transpose>:

void matrix_transpose(mat m)
{
 8000f98:	b590      	push	{r4, r7, lr}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < m->m; i++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e040      	b.n	8001028 <matrix_transpose+0x90>
		for (int j = 0; j < i; j++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	e036      	b.n	800101a <matrix_transpose+0x82>
			double t = m->v[i][j];
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa8d 	bl	80004e0 <__aeabi_f2d>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2302 	strd	r2, r3, [r7, #8]
			m->v[i][j] = m->v[j][i];
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	441a      	add	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6899      	ldr	r1, [r3, #8]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	6819      	ldr	r1, [r3, #0]
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	601a      	str	r2, [r3, #0]
			m->v[j][i] = t;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	689a      	ldr	r2, [r3, #8]
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	18d4      	adds	r4, r2, r3
 8001008:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800100c:	f7ff fd98 	bl	8000b40 <__aeabi_d2f>
 8001010:	4603      	mov	r3, r0
 8001012:	6023      	str	r3, [r4, #0]
		for (int j = 0; j < i; j++) {
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	3301      	adds	r3, #1
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	429a      	cmp	r2, r3
 8001020:	dbc4      	blt.n	8000fac <matrix_transpose+0x14>
	for (int i = 0; i < m->m; i++) {
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	429a      	cmp	r2, r3
 8001030:	dbb9      	blt.n	8000fa6 <matrix_transpose+0xe>
		}
	}
}
 8001032:	bf00      	nop
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd90      	pop	{r4, r7, pc}

0800103c <matrix_copy>:

mat matrix_copy(int n, float a[][LPC_LEN], int m)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
	mat x = matrix_new(m, n);
 8001048:	68f9      	ldr	r1, [r7, #12]
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff4a 	bl	8000ee4 <matrix_new>
 8001050:	6178      	str	r0, [r7, #20]
	for (int i = 0; i < m; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e022      	b.n	800109e <matrix_copy+0x62>
		for (int j = 0; j < n; j++)
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	e018      	b.n	8001090 <matrix_copy+0x54>
			x->v[i][j] = a[i][j];
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	4613      	mov	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4413      	add	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	461a      	mov	r2, r3
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1899      	adds	r1, r3, r2
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	4413      	add	r3, r2
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	4413      	add	r3, r2
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	440a      	add	r2, r1
 8001086:	6812      	ldr	r2, [r2, #0]
 8001088:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < n; j++)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3301      	adds	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbe2      	blt.n	800105e <matrix_copy+0x22>
	for (int i = 0; i < m; i++)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	3301      	adds	r3, #1
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	69fa      	ldr	r2, [r7, #28]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbd8      	blt.n	8001058 <matrix_copy+0x1c>
	return x;
 80010a6:	697b      	ldr	r3, [r7, #20]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3720      	adds	r7, #32
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <matrix_mul>:

mat matrix_mul(mat x, mat y)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
	if (x->n != y->m) return 0;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d001      	beq.n	80010ca <matrix_mul+0x1a>
 80010c6:	2300      	movs	r3, #0
 80010c8:	e05a      	b.n	8001180 <matrix_mul+0xd0>
	mat r = matrix_new(x->m, y->n);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4610      	mov	r0, r2
 80010d6:	f7ff ff05 	bl	8000ee4 <matrix_new>
 80010da:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < x->m; i++)
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e048      	b.n	8001174 <matrix_mul+0xc4>
		for (int j = 0; j < y->n; j++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	e03d      	b.n	8001164 <matrix_mul+0xb4>
			for (int k = 0; k < x->n; k++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e032      	b.n	8001154 <matrix_mul+0xa4>
				r->v[i][j] += x->v[i][k] * y->v[k][j];
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	ed93 7a00 	vldr	s14, [r3]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	edd3 6a00 	vldr	s13, [r3]
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	4413      	add	r3, r2
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114a:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < x->n; k++)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	68fa      	ldr	r2, [r7, #12]
 800115a:	429a      	cmp	r2, r3
 800115c:	dbc7      	blt.n	80010ee <matrix_mul+0x3e>
		for (int j = 0; j < y->n; j++)
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	3301      	adds	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbbc      	blt.n	80010e8 <matrix_mul+0x38>
	for (int i = 0; i < x->m; i++)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	429a      	cmp	r2, r3
 800117c:	dbb1      	blt.n	80010e2 <matrix_mul+0x32>
	return r;
 800117e:	68bb      	ldr	r3, [r7, #8]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <gram_schmidt>:

void gram_schmidt(mat m, mat *R, mat *Q)
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b09c      	sub	sp, #112	; 0x70
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
	*Q = matrix_new(m->m, m->n);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4619      	mov	r1, r3
 800119e:	4610      	mov	r0, r2
 80011a0:	f7ff fea0 	bl	8000ee4 <matrix_new>
 80011a4:	4602      	mov	r2, r0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
	for (int col = 0 ; col < m->m; ++col){
 80011aa:	2300      	movs	r3, #0
 80011ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80011ae:	e13c      	b.n	800142a <gram_schmidt+0x2a2>
		// Assign vector V_i
		for (int row = 0; row < m->n; ++row){
 80011b0:	2300      	movs	r3, #0
 80011b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80011b4:	e017      	b.n	80011e6 <gram_schmidt+0x5e>
			(*Q)->v[row][col] = m->v[row][col];
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	441a      	add	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6899      	ldr	r1, [r3, #8]
 80011ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	440b      	add	r3, r1
 80011d4:	6819      	ldr	r1, [r3, #0]
 80011d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	601a      	str	r2, [r3, #0]
		for (int row = 0; row < m->n; ++row){
 80011e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011e2:	3301      	adds	r3, #1
 80011e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80011ec:	429a      	cmp	r2, r3
 80011ee:	dbe2      	blt.n	80011b6 <gram_schmidt+0x2e>
		}
		// Subtract the projections of V_i onto the previous vectors V_i-1.. V_i-2 ... V_1
		for (int proj_col = col; proj_col > 0; --proj_col){
 80011f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80011f2:	667b      	str	r3, [r7, #100]	; 0x64
 80011f4:	e08a      	b.n	800130c <gram_schmidt+0x184>
			// compute the dot product (u_proj_col . v) and l2 norm (||u_proj_col||^2)
			float dot_prod = 0;
 80011f6:	f04f 0300 	mov.w	r3, #0
 80011fa:	663b      	str	r3, [r7, #96]	; 0x60
			float l2_norm = 0;
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	65fb      	str	r3, [r7, #92]	; 0x5c
			for(int row = 0; row < m->n; ++row){
 8001202:	2300      	movs	r3, #0
 8001204:	65bb      	str	r3, [r7, #88]	; 0x58
 8001206:	e03d      	b.n	8001284 <gram_schmidt+0xfc>
				float val = ((*Q)->v[row][proj_col - 1]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001218:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800121c:	3b01      	subs	r3, #1
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	63fb      	str	r3, [r7, #60]	; 0x3c
				l2_norm += val * val;
 8001226:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800122a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800122e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001236:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
				dot_prod += m->v[row][col] * ((*Q)->v[row][proj_col - 1]);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001264:	3b01      	subs	r3, #1
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001272:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			for(int row = 0; row < m->n; ++row){
 800127e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001280:	3301      	adds	r3, #1
 8001282:	65bb      	str	r3, [r7, #88]	; 0x58
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800128a:	429a      	cmp	r2, r3
 800128c:	dbbc      	blt.n	8001208 <gram_schmidt+0x80>
			}
			for(int row = 0; row < m->n; ++row){
 800128e:	2300      	movs	r3, #0
 8001290:	657b      	str	r3, [r7, #84]	; 0x54
 8001292:	e033      	b.n	80012fc <gram_schmidt+0x174>
				(*Q)->v[row][col] -= (((*Q)->v[row][proj_col - 1] * dot_prod) / l2_norm);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	ed93 7a00 	vldr	s14, [r3]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80012c0:	3b01      	subs	r3, #1
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	edd3 6a00 	vldr	s13, [r3]
 80012ca:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80012ce:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80012d2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 80012d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f2:	edc3 7a00 	vstr	s15, [r3]
			for(int row = 0; row < m->n; ++row){
 80012f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f8:	3301      	adds	r3, #1
 80012fa:	657b      	str	r3, [r7, #84]	; 0x54
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001302:	429a      	cmp	r2, r3
 8001304:	dbc6      	blt.n	8001294 <gram_schmidt+0x10c>
		for (int proj_col = col; proj_col > 0; --proj_col){
 8001306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001308:	3b01      	subs	r3, #1
 800130a:	667b      	str	r3, [r7, #100]	; 0x64
 800130c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800130e:	2b00      	cmp	r3, #0
 8001310:	f73f af71 	bgt.w	80011f6 <gram_schmidt+0x6e>
			}
		}
		// normalize the basis column vectors
		float norms[LPC_LEN] = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2228      	movs	r2, #40	; 0x28
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f006 fac1 	bl	80078a4 <memset>
		for (int row = 0; row < m->m; ++row){
 8001322:	2300      	movs	r3, #0
 8001324:	653b      	str	r3, [r7, #80]	; 0x50
 8001326:	e02d      	b.n	8001384 <gram_schmidt+0x1fc>
			for(int col = 0; col < m->n; ++col){
 8001328:	2300      	movs	r3, #0
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800132c:	e022      	b.n	8001374 <gram_schmidt+0x1ec>
				float val = (*Q)->v[row][col];
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	643b      	str	r3, [r7, #64]	; 0x40
				norms[col] += val * val;
 8001346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	3370      	adds	r3, #112	; 0x70
 800134c:	443b      	add	r3, r7
 800134e:	3b5c      	subs	r3, #92	; 0x5c
 8001350:	ed93 7a00 	vldr	s14, [r3]
 8001354:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001358:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800135c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	3370      	adds	r3, #112	; 0x70
 8001366:	443b      	add	r3, r7
 8001368:	3b5c      	subs	r3, #92	; 0x5c
 800136a:	edc3 7a00 	vstr	s15, [r3]
			for(int col = 0; col < m->n; ++col){
 800136e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001370:	3301      	adds	r3, #1
 8001372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800137a:	429a      	cmp	r2, r3
 800137c:	dbd7      	blt.n	800132e <gram_schmidt+0x1a6>
		for (int row = 0; row < m->m; ++row){
 800137e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001380:	3301      	adds	r3, #1
 8001382:	653b      	str	r3, [r7, #80]	; 0x50
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800138a:	429a      	cmp	r2, r3
 800138c:	dbcc      	blt.n	8001328 <gram_schmidt+0x1a0>
			}
		}
		for (int row = 0; row < m->m; ++row){
 800138e:	2300      	movs	r3, #0
 8001390:	64bb      	str	r3, [r7, #72]	; 0x48
 8001392:	e042      	b.n	800141a <gram_schmidt+0x292>
			for(int col = 0; col < m->n; ++col){
 8001394:	2300      	movs	r3, #0
 8001396:	647b      	str	r3, [r7, #68]	; 0x44
 8001398:	e037      	b.n	800140a <gram_schmidt+0x282>
				(*Q)->v[row][col] /= sqrt(norms[col]);
 800139a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	3370      	adds	r3, #112	; 0x70
 80013a0:	443b      	add	r3, r7
 80013a2:	3b5c      	subs	r3, #92	; 0x5c
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f89a 	bl	80004e0 <__aeabi_f2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	ec43 2b10 	vmov	d0, r2, r3
 80013b4:	f006 fe5c 	bl	8008070 <sqrt>
 80013b8:	ec55 4b10 	vmov	r4, r5, d0
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f884 	bl	80004e0 <__aeabi_f2d>
 80013d8:	4622      	mov	r2, r4
 80013da:	462b      	mov	r3, r5
 80013dc:	f7ff fa02 	bl	80007e4 <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	18d4      	adds	r4, r2, r3
 80013fc:	f7ff fba0 	bl	8000b40 <__aeabi_d2f>
 8001400:	4603      	mov	r3, r0
 8001402:	6023      	str	r3, [r4, #0]
			for(int col = 0; col < m->n; ++col){
 8001404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001406:	3301      	adds	r3, #1
 8001408:	647b      	str	r3, [r7, #68]	; 0x44
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001410:	429a      	cmp	r2, r3
 8001412:	dbc2      	blt.n	800139a <gram_schmidt+0x212>
		for (int row = 0; row < m->m; ++row){
 8001414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001416:	3301      	adds	r3, #1
 8001418:	64bb      	str	r3, [r7, #72]	; 0x48
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001420:	429a      	cmp	r2, r3
 8001422:	dbb7      	blt.n	8001394 <gram_schmidt+0x20c>
	for (int col = 0 ; col < m->m; ++col){
 8001424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001426:	3301      	adds	r3, #1
 8001428:	66fb      	str	r3, [r7, #108]	; 0x6c
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001430:	429a      	cmp	r2, r3
 8001432:	f6ff aebd 	blt.w	80011b0 <gram_schmidt+0x28>
			}
		}
	}
	matrix_transpose(*Q);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fdac 	bl	8000f98 <matrix_transpose>
	*R = matrix_mul(*Q, m);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68f9      	ldr	r1, [r7, #12]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fe32 	bl	80010b0 <matrix_mul>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	601a      	str	r2, [r3, #0]
	matrix_transpose(*Q);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fd9e 	bl	8000f98 <matrix_transpose>
}
 800145c:	bf00      	nop
 800145e:	3770      	adds	r7, #112	; 0x70
 8001460:	46bd      	mov	sp, r7
 8001462:	bdb0      	pop	{r4, r5, r7, pc}

08001464 <eigenvals>:
void eigenvals(mat m, float eigen[][2]){
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	float epsilon = 0.0001;
 800146e:	4b80      	ldr	r3, [pc, #512]	; (8001670 <eigenvals+0x20c>)
 8001470:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < m->m; ++i){
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	e0f0      	b.n	800165a <eigenvals+0x1f6>
		// check the entries off the diagonals for the complex eigenvals
		if(i + 1 < m->m) {
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	f280 80d1 	bge.w	8001628 <eigenvals+0x1c4>
			if(fabs(m->v[i + 1][i]) > epsilon){
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3301      	adds	r3, #1
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	4413      	add	r3, r2
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	eef0 7ae7 	vabs.f32	s15, s15
 80014a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80014a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	f140 80a4 	bpl.w	80015fa <eigenvals+0x196>
				float b = (m->v[i][i] + m->v[i + 1][i + 1]);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	ed93 7a00 	vldr	s14, [r3]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3301      	adds	r3, #1
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3301      	adds	r3, #1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e6:	edc7 7a05 	vstr	s15, [r7, #20]
				float c =  (m->v[i][i] * m->v[i + 1][i + 1]) - (m->v[i + 1][i] * m->v[i][i + 1]);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	ed93 7a00 	vldr	s14, [r3]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3301      	adds	r3, #1
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3301      	adds	r3, #1
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	edd3 6a00 	vldr	s13, [r3]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3301      	adds	r3, #1
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001556:	edc7 7a04 	vstr	s15, [r7, #16]
				float complex_val = sqrt(fabs(b * b - 4 * c)) / 2;
 800155a:	edd7 7a05 	vldr	s15, [r7, #20]
 800155e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001562:	edd7 7a04 	vldr	s15, [r7, #16]
 8001566:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800156a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800156e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001572:	eef0 7ae7 	vabs.f32	s15, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe ffb1 	bl	80004e0 <__aeabi_f2d>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	ec43 2b10 	vmov	d0, r2, r3
 8001586:	f006 fd73 	bl	8008070 <sqrt>
 800158a:	ec51 0b10 	vmov	r0, r1, d0
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001596:	f7ff f925 	bl	80007e4 <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff facd 	bl	8000b40 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	60fb      	str	r3, [r7, #12]
				eigen[i][0] = eigen[i + 1][0] = b / 2;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	4413      	add	r3, r2
 80015b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80015b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c0:	edc3 7a00 	vstr	s15, [r3]
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	00d2      	lsls	r2, r2, #3
 80015c8:	6839      	ldr	r1, [r7, #0]
 80015ca:	440a      	add	r2, r1
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6013      	str	r3, [r2, #0]
				eigen[i][1] = complex_val;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	605a      	str	r2, [r3, #4]
				eigen[i + 1][1] = -complex_val;
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	3301      	adds	r3, #1
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	4413      	add	r3, r2
 80015e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ea:	eef1 7a67 	vneg.f32	s15, s15
 80015ee:	edc3 7a01 	vstr	s15, [r3, #4]
				++i; // skip the next diagonal since it is a complex conjugate of the previous
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3301      	adds	r3, #1
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	e02c      	b.n	8001654 <eigenvals+0x1f0>
			}
			else{
				eigen[i][0] = m->v[i][i];
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	441a      	add	r2, r3
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	6839      	ldr	r1, [r7, #0]
 8001612:	440b      	add	r3, r1
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	601a      	str	r2, [r3, #0]
				eigen[i][1] = 0;
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	4413      	add	r3, r2
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	e015      	b.n	8001654 <eigenvals+0x1f0>
			}
		}
		else{
			// If it isn't a complex eigenval, it must be real
			eigen[i][0] = m->v[i][i];
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	441a      	add	r2, r3
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	440b      	add	r3, r1
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	601a      	str	r2, [r3, #0]
			eigen[i][1] = 0;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	for(int i = 0; i < m->m; ++i){
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	3301      	adds	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	429a      	cmp	r2, r3
 8001662:	f6ff af09 	blt.w	8001478 <eigenvals+0x14>
		}
	}
}
 8001666:	bf00      	nop
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	38d1b717 	.word	0x38d1b717

08001674 <complex_mul>:
    *xp[1] = *yp[1];
    *yp[0] = real;
    *yp[1] = imag;
}

void complex_mul(float xp[2], float yp[2], float out[2]){
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	float a = xp[0];
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	61fb      	str	r3, [r7, #28]
	float b = xp[1];
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	61bb      	str	r3, [r7, #24]
	float c = yp[0];
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	617b      	str	r3, [r7, #20]
	float d = yp[1];
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	613b      	str	r3, [r7, #16]
	out[0] += a * c + -(b * d);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	ed93 7a00 	vldr	s14, [r3]
 800169e:	edd7 6a07 	vldr	s13, [r7, #28]
 80016a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016aa:	ed97 6a06 	vldr	s12, [r7, #24]
 80016ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80016b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	edc3 7a00 	vstr	s15, [r3]
	out[1] += a * d + b * c;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	ed93 7a00 	vldr	s14, [r3]
 80016cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80016d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016d8:	ed97 6a06 	vldr	s12, [r7, #24]
 80016dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3304      	adds	r3, #4
 80016ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f0:	edc3 7a00 	vstr	s15, [r3]
}
 80016f4:	bf00      	nop
 80016f6:	3724      	adds	r7, #36	; 0x24
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <filter1>:

void filter1(const float *b, const float *a, size_t filterLength, const float *in, float *out, size_t length) {
 8001700:	b480      	push	{r7}
 8001702:	b08f      	sub	sp, #60	; 0x3c
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
    const float a0 = a[0];
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	61bb      	str	r3, [r7, #24]
    const float *a_end = &a[filterLength-1];
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800171a:	3b01      	subs	r3, #1
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	4413      	add	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
    const float *out_start = out;
 8001724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001726:	613b      	str	r3, [r7, #16]
    a++;
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	3304      	adds	r3, #4
 800172c:	60bb      	str	r3, [r7, #8]
    out--;
 800172e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001730:	3b04      	subs	r3, #4
 8001732:	643b      	str	r3, [r7, #64]	; 0x40
    size_t m;
    for (m = 0; m < length; m++) {
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
 8001738:	e05b      	b.n	80017f2 <filter1+0xf2>
        const float *b_macc = b;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
        const float *in_macc = in;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
        const float *a_macc = a;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
        const float *out_macc = out;
 8001746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
        float b_acc = (*in_macc--) * (*b_macc++);
 800174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174c:	1f1a      	subs	r2, r3, #4
 800174e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001756:	1d1a      	adds	r2, r3, #4
 8001758:	633a      	str	r2, [r7, #48]	; 0x30
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001762:	edc7 7a08 	vstr	s15, [r7, #32]
        float a_acc = 0;
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
        while (a_macc <= a_end && out_macc >= out_start) {
 800176c:	e023      	b.n	80017b6 <filter1+0xb6>
            b_acc += (*in_macc--) * (*b_macc++);
 800176e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001770:	1f1a      	subs	r2, r3, #4
 8001772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001774:	ed93 7a00 	vldr	s14, [r3]
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	1d1a      	adds	r2, r3, #4
 800177c:	633a      	str	r2, [r7, #48]	; 0x30
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001786:	ed97 7a08 	vldr	s14, [r7, #32]
 800178a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178e:	edc7 7a08 	vstr	s15, [r7, #32]
            a_acc += (*out_macc--) * (*a_macc++);
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	1f1a      	subs	r2, r3, #4
 8001796:	627a      	str	r2, [r7, #36]	; 0x24
 8001798:	ed93 7a00 	vldr	s14, [r3]
 800179c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179e:	1d1a      	adds	r2, r3, #4
 80017a0:	62ba      	str	r2, [r7, #40]	; 0x28
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80017ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b2:	edc7 7a07 	vstr	s15, [r7, #28]
        while (a_macc <= a_end && out_macc >= out_start) {
 80017b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d803      	bhi.n	80017c6 <filter1+0xc6>
 80017be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d2d3      	bcs.n	800176e <filter1+0x6e>
        }
        *++out = (b_acc - a_acc) / a0;
 80017c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80017ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ce:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017d4:	3304      	adds	r3, #4
 80017d6:	643b      	str	r3, [r7, #64]	; 0x40
 80017d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80017dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e2:	edc3 7a00 	vstr	s15, [r3]
        in++;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	3304      	adds	r3, #4
 80017ea:	603b      	str	r3, [r7, #0]
    for (m = 0; m < length; m++) {
 80017ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ee:	3301      	adds	r3, #1
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
 80017f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d39f      	bcc.n	800173a <filter1+0x3a>
    }
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	373c      	adds	r7, #60	; 0x3c
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <voice_obfuscation>:

void voice_obfuscation(int16_t *input, int16_t *output) {
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	f5ad 4dab 	sub.w	sp, sp, #21888	; 0x5580
 800180e:	b092      	sub	sp, #72	; 0x48
 8001810:	af02      	add	r7, sp, #8
 8001812:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8001816:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800181a:	6018      	str	r0, [r3, #0]
 800181c:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8001820:	f5a3 63b8 	sub.w	r3, r3, #1472	; 0x5c0
 8001824:	6019      	str	r1, [r3, #0]
	   float PI = 2 * acos(0.0);
 8001826:	4bc1      	ldr	r3, [pc, #772]	; (8001b2c <voice_obfuscation+0x324>)
 8001828:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800182c:	f102 0254 	add.w	r2, r2, #84	; 0x54
 8001830:	6013      	str	r3, [r2, #0]
	    float frame[WIN_LENGTH];
		float input_max = 0;
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 800183a:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 800183e:	6013      	str	r3, [r2, #0]
		float sum = 0;
 8001840:	f04f 0300 	mov.w	r3, #0
 8001844:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001848:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800184c:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < WIN_LENGTH; ++i){
 800184e:	2300      	movs	r3, #0
 8001850:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001854:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e067      	b.n	800192c <voice_obfuscation+0x124>
			if(input_max < abs(input[i])){
 800185c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001860:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800186c:	f2a2 52bc 	subw	r2, r2, #1468	; 0x5bc
 8001870:	6812      	ldr	r2, [r2, #0]
 8001872:	4413      	add	r3, r2
 8001874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001878:	2b00      	cmp	r3, #0
 800187a:	bfb8      	it	lt
 800187c:	425b      	neglt	r3, r3
 800187e:	b29b      	uxth	r3, r3
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001888:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800188c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001890:	ed93 7a00 	vldr	s14, [r3]
 8001894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	d51b      	bpl.n	80018d6 <voice_obfuscation+0xce>
				input_max = abs(input[i]);
 800189e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80018a2:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 80018ae:	f2a2 52bc 	subw	r2, r2, #1468	; 0x5bc
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	4413      	add	r3, r2
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	bfb8      	it	lt
 80018be:	425b      	neglt	r3, r3
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ca:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80018ce:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80018d2:	edc3 7a00 	vstr	s15, [r3]
			}
			sum += input[i];
 80018d6:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80018da:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 80018e6:	f2a2 52bc 	subw	r2, r2, #1468	; 0x5bc
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	4413      	add	r3, r2
 80018ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f2:	ee07 3a90 	vmov	s15, r3
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80018fe:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001902:	ed93 7a00 	vldr	s14, [r3]
 8001906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800190e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001912:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < WIN_LENGTH; ++i){
 8001916:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800191a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001926:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001930:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800193a:	db8f      	blt.n	800185c <voice_obfuscation+0x54>
		}
		sum /= WIN_LENGTH;
 800193c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001940:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001944:	ed93 7a00 	vldr	s14, [r3]
 8001948:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001b30 <voice_obfuscation+0x328>
 800194c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001950:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001954:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001958:	edc3 7a00 	vstr	s15, [r3]

		for(int i = 0; i < WIN_LENGTH; ++i){
 800195c:	2300      	movs	r3, #0
 800195e:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001962:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	e039      	b.n	80019de <voice_obfuscation+0x1d6>
			frame[i] = (float)((float)input[i] - sum) / (input_max);
 800196a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800196e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800197a:	f2a2 52bc 	subw	r2, r2, #1468	; 0x5bc
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	4413      	add	r3, r2
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800198e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001992:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800199e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80019a2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80019a6:	ed93 7a00 	vldr	s14, [r3]
 80019aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ae:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 80019b2:	f6a3 0278 	subw	r2, r3, #2168	; 0x878
 80019b6:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80019ba:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < WIN_LENGTH; ++i){
 80019c8:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80019cc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80019d8:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80019e2:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80019ec:	dbbd      	blt.n	800196a <voice_obfuscation+0x162>
		}

	    // Linear predictive coding
	    // First calulate the autocovariance
	    float r_x[LPC_LEN + 1];
	    for (size_t i = 0; i < LPC_LEN + 1; ++i){
 80019ee:	2300      	movs	r3, #0
 80019f0:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 80019f4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e076      	b.n	8001aea <voice_obfuscation+0x2e2>
	        r_x[i] = 0;
 80019fc:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001a00:	f6a3 02a4 	subw	r2, r3, #2212	; 0x8a4
 8001a04:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001a08:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
	        for (size_t j = 0; j < WIN_LENGTH - i; ++j){
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001a1e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e048      	b.n	8001ab8 <voice_obfuscation+0x2b0>
	            r_x[i] += frame[j] * frame[j + i];
 8001a26:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001a2a:	f6a3 02a4 	subw	r2, r3, #2212	; 0x8a4
 8001a2e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001a32:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001a44:	f6a3 0278 	subw	r2, r3, #2168	; 0x878
 8001a48:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001a4c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	edd3 6a00 	vldr	s13, [r3]
 8001a5a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001a5e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001a68:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	f507 5257 	add.w	r2, r7, #13760	; 0x35c0
 8001a74:	f6a2 0278 	subw	r2, r2, #2168	; 0x878
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a88:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001a8c:	f6a3 02a4 	subw	r2, r3, #2212	; 0x8a4
 8001a90:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001a94:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	edc3 7a00 	vstr	s15, [r3]
	        for (size_t j = 0; j < WIN_LENGTH - i; ++j){
 8001aa2:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001aa6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001ab2:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001abc:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f5c3 6320 	rsb	r3, r3, #2560	; 0xa00
 8001ac6:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001aca:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3a8      	bcc.n	8001a26 <voice_obfuscation+0x21e>
	    for (size_t i = 0; i < LPC_LEN + 1; ++i){
 8001ad4:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001ad8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001ae4:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001aee:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b0a      	cmp	r3, #10
 8001af6:	d981      	bls.n	80019fc <voice_obfuscation+0x1f4>
	        }
	    }

	    // given the autocorrelation vector, solve for the coefficients
	    // Set up the autocovariance matrix
	    float R_x[LPC_LEN + 1][LPC_LEN + 2] = {0};
 8001af8:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001afc:	f6a3 23b4 	subw	r3, r3, #2740	; 0xab4
 8001b00:	4618      	mov	r0, r3
 8001b02:	f44f 7304 	mov.w	r3, #528	; 0x210
 8001b06:	461a      	mov	r2, r3
 8001b08:	2100      	movs	r1, #0
 8001b0a:	f005 fecb 	bl	80078a4 <memset>
	    for (int32_t i = 0; i < LPC_LEN + 1; ++i){
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001b14:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e092      	b.n	8001c42 <voice_obfuscation+0x43a>
	        for (int32_t j = 0; j < LPC_LEN + 1; ++j){
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001b22:	f102 0220 	add.w	r2, r2, #32
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	e079      	b.n	8001c1e <voice_obfuscation+0x416>
 8001b2a:	bf00      	nop
 8001b2c:	40490fdb 	.word	0x40490fdb
 8001b30:	45200000 	.word	0x45200000
	            if(i + j < LPC_LEN + 1){
 8001b34:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001b38:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001b42:	f103 0320 	add.w	r3, r3, #32
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	2b0a      	cmp	r3, #10
 8001b4c:	dc27      	bgt.n	8001b9e <voice_obfuscation+0x396>
	                R_x[i][i + j] = r_x[j];
 8001b4e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001b52:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001b5c:	f103 0320 	add.w	r3, r3, #32
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	18d4      	adds	r4, r2, r3
 8001b64:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001b68:	f6a3 02a4 	subw	r2, r3, #2212	; 0x8a4
 8001b6c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001b70:	f103 0320 	add.w	r3, r3, #32
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001b80:	f6a3 20b4 	subw	r0, r3, #2740	; 0xab4
 8001b84:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001b88:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4423      	add	r3, r4
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4403      	add	r3, r0
 8001b9c:	6019      	str	r1, [r3, #0]
	            }
	            if(i - j >= 0){
 8001b9e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001ba2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001bac:	f103 0320 	add.w	r3, r3, #32
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	db27      	blt.n	8001c08 <voice_obfuscation+0x400>
	                R_x[i][i - j] = r_x[j];
 8001bb8:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001bbc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001bc6:	f103 0320 	add.w	r3, r3, #32
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	1ad4      	subs	r4, r2, r3
 8001bce:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001bd2:	f6a3 02a4 	subw	r2, r3, #2212	; 0x8a4
 8001bd6:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001bda:	f103 0320 	add.w	r3, r3, #32
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001bea:	f6a3 20b4 	subw	r0, r3, #2740	; 0xab4
 8001bee:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001bf2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4423      	add	r3, r4
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4403      	add	r3, r0
 8001c06:	6019      	str	r1, [r3, #0]
	        for (int32_t j = 0; j < LPC_LEN + 1; ++j){
 8001c08:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001c0c:	f103 0320 	add.w	r3, r3, #32
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001c18:	f102 0220 	add.w	r2, r2, #32
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001c22:	f103 0320 	add.w	r3, r3, #32
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b0a      	cmp	r3, #10
 8001c2a:	dd83      	ble.n	8001b34 <voice_obfuscation+0x32c>
	    for (int32_t i = 0; i < LPC_LEN + 1; ++i){
 8001c2c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001c30:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001c3c:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001c46:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b0a      	cmp	r3, #10
 8001c4e:	f77f af65 	ble.w	8001b1c <voice_obfuscation+0x314>
	            }
	        }
	    }
	    R_x[0][LPC_LEN + 1] = 1;
 8001c52:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001c56:	f6a3 23b4 	subw	r3, r3, #2740	; 0xab4
 8001c5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
	    float c = 0;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001c68:	f102 0250 	add.w	r2, r2, #80	; 0x50
 8001c6c:	6013      	str	r3, [r2, #0]
	    /* Now finding the elements of diagonal matrix */
	    for(int j = 0; j < LPC_LEN + 1; j++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001c74:	f102 021c 	add.w	r2, r2, #28
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e0c7      	b.n	8001e0c <voice_obfuscation+0x604>
	        for(int i = 0; i < LPC_LEN + 1; i++) {
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001c82:	f102 0218 	add.w	r2, r2, #24
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e0ad      	b.n	8001de6 <voice_obfuscation+0x5de>
	            if(i != j) {
 8001c8a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001c8e:	f103 0318 	add.w	r3, r3, #24
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001c98:	f103 031c 	add.w	r3, r3, #28
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	f000 8096 	beq.w	8001dd0 <voice_obfuscation+0x5c8>
	                c= R_x[i][j] / R_x[j][j];
 8001ca4:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001ca8:	f6a3 21b4 	subw	r1, r3, #2740	; 0xab4
 8001cac:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001cb0:	f103 0318 	add.w	r3, r3, #24
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001cc2:	f102 021c 	add.w	r2, r2, #28
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	edd3 6a00 	vldr	s13, [r3]
 8001cd2:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001cd6:	f6a3 22b4 	subw	r2, r3, #2740	; 0xab4
 8001cda:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001cde:	f103 031c 	add.w	r3, r3, #28
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2134      	movs	r1, #52	; 0x34
 8001ce6:	fb01 f303 	mul.w	r3, r1, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	ed93 7a00 	vldr	s14, [r3]
 8001cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf4:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8001cf8:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
	                for(int k = 0; k < LPC_LEN + 2; k++) {
 8001d00:	2300      	movs	r3, #0
 8001d02:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001d06:	f102 0214 	add.w	r2, r2, #20
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e059      	b.n	8001dc2 <voice_obfuscation+0x5ba>
	                    R_x[i][k] = R_x[i][k] - c * R_x[j][k];
 8001d0e:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001d12:	f6a3 21b4 	subw	r1, r3, #2740	; 0xab4
 8001d16:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001d1a:	f103 0318 	add.w	r3, r3, #24
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001d2c:	f102 0214 	add.w	r2, r2, #20
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	ed93 7a00 	vldr	s14, [r3]
 8001d3c:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001d40:	f6a3 21b4 	subw	r1, r3, #2740	; 0xab4
 8001d44:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001d48:	f103 031c 	add.w	r3, r3, #28
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001d5a:	f102 0214 	add.w	r2, r2, #20
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	edd3 6a00 	vldr	s13, [r3]
 8001d6a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8001d6e:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7e:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001d82:	f6a3 21b4 	subw	r1, r3, #2740	; 0xab4
 8001d86:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001d8a:	f103 0318 	add.w	r3, r3, #24
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001d9c:	f102 0214 	add.w	r2, r2, #20
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	edc3 7a00 	vstr	s15, [r3]
	                for(int k = 0; k < LPC_LEN + 2; k++) {
 8001dac:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001db0:	f103 0314 	add.w	r3, r3, #20
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001dbc:	f102 0214 	add.w	r2, r2, #20
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001dc6:	f103 0314 	add.w	r3, r3, #20
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b0b      	cmp	r3, #11
 8001dce:	dd9e      	ble.n	8001d0e <voice_obfuscation+0x506>
	        for(int i = 0; i < LPC_LEN + 1; i++) {
 8001dd0:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001dd4:	f103 0318 	add.w	r3, r3, #24
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001de0:	f102 0218 	add.w	r2, r2, #24
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001dea:	f103 0318 	add.w	r3, r3, #24
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b0a      	cmp	r3, #10
 8001df2:	f77f af4a 	ble.w	8001c8a <voice_obfuscation+0x482>
	    for(int j = 0; j < LPC_LEN + 1; j++) {
 8001df6:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001dfa:	f103 031c 	add.w	r3, r3, #28
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001e06:	f102 021c 	add.w	r2, r2, #28
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001e10:	f103 031c 	add.w	r3, r3, #28
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b0a      	cmp	r3, #10
 8001e18:	f77f af30 	ble.w	8001c7c <voice_obfuscation+0x474>
	                }
	            }
	        }
	    }
	    float a[LPC_LEN + 1] = {0};
 8001e1c:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001e20:	f5a3 632e 	sub.w	r3, r3, #2784	; 0xae0
 8001e24:	4618      	mov	r0, r3
 8001e26:	232c      	movs	r3, #44	; 0x2c
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	f005 fd3a 	bl	80078a4 <memset>
	    float scale = 0;
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001e38:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001e3c:	6013      	str	r3, [r2, #0]
	    for(int i = 0; i < LPC_LEN + 1; ++i){
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001e44:	f102 0210 	add.w	r2, r2, #16
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e039      	b.n	8001ec0 <voice_obfuscation+0x6b8>
	        a[i] = R_x[i][LPC_LEN + 1] / R_x[i][i];
 8001e4c:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001e50:	f6a3 21b4 	subw	r1, r3, #2740	; 0xab4
 8001e54:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001e58:	f103 0310 	add.w	r3, r3, #16
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	011b      	lsls	r3, r3, #4
 8001e66:	440b      	add	r3, r1
 8001e68:	332c      	adds	r3, #44	; 0x2c
 8001e6a:	edd3 6a00 	vldr	s13, [r3]
 8001e6e:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001e72:	f6a3 22b4 	subw	r2, r3, #2740	; 0xab4
 8001e76:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001e7a:	f103 0310 	add.w	r3, r3, #16
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2134      	movs	r1, #52	; 0x34
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	ed93 7a00 	vldr	s14, [r3]
 8001e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e90:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001e94:	f5a3 622e 	sub.w	r2, r3, #2784	; 0xae0
 8001e98:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001e9c:	f103 0310 	add.w	r3, r3, #16
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	edc3 7a00 	vstr	s15, [r3]
	    for(int i = 0; i < LPC_LEN + 1; ++i){
 8001eaa:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001eae:	f103 0310 	add.w	r3, r3, #16
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001eba:	f102 0210 	add.w	r2, r2, #16
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001ec4:	f103 0310 	add.w	r3, r3, #16
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b0a      	cmp	r3, #10
 8001ecc:	ddbe      	ble.n	8001e4c <voice_obfuscation+0x644>
	    }
	    scale = a[0];
 8001ece:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001ed2:	f5a3 632e 	sub.w	r3, r3, #2784	; 0xae0
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8001edc:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001ee0:	6013      	str	r3, [r2, #0]
	    for(int i = 0; i < LPC_LEN + 1; ++i){
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001ee8:	f102 020c 	add.w	r2, r2, #12
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e02c      	b.n	8001f4a <voice_obfuscation+0x742>
	        a[i] /= scale;
 8001ef0:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001ef4:	f5a3 622e 	sub.w	r2, r3, #2784	; 0xae0
 8001ef8:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001efc:	f103 030c 	add.w	r3, r3, #12
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	edd3 6a00 	vldr	s13, [r3]
 8001f0a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8001f0e:	f103 034c 	add.w	r3, r3, #76	; 0x4c
 8001f12:	ed93 7a00 	vldr	s14, [r3]
 8001f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1a:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001f1e:	f5a3 622e 	sub.w	r2, r3, #2784	; 0xae0
 8001f22:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001f26:	f103 030c 	add.w	r3, r3, #12
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	edc3 7a00 	vstr	s15, [r3]
	    for(int i = 0; i < LPC_LEN + 1; ++i){
 8001f34:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001f38:	f103 030c 	add.w	r3, r3, #12
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001f44:	f102 020c 	add.w	r2, r2, #12
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001f4e:	f103 030c 	add.w	r3, r3, #12
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b0a      	cmp	r3, #10
 8001f56:	ddcb      	ble.n	8001ef0 <voice_obfuscation+0x6e8>
	    }

	    //build the companion matrix
	    float companion[LPC_LEN][LPC_LEN] = {0};
 8001f58:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001f5c:	f5a3 6347 	sub.w	r3, r3, #3184	; 0xc70
 8001f60:	4618      	mov	r0, r3
 8001f62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f66:	461a      	mov	r2, r3
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f005 fc9b 	bl	80078a4 <memset>
	    for(uint32_t j = 0; j < LPC_LEN; ++j){
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001f74:	f102 0208 	add.w	r2, r2, #8
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e027      	b.n	8001fcc <voice_obfuscation+0x7c4>
	        companion[0][j] = -a[j + 1];
 8001f7c:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001f80:	f103 0308 	add.w	r3, r3, #8
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	f507 5257 	add.w	r2, r7, #13760	; 0x35c0
 8001f8c:	f5a2 622e 	sub.w	r2, r2, #2784	; 0xae0
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eef1 7a67 	vneg.f32	s15, s15
 8001f9c:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001fa0:	f5a3 6247 	sub.w	r2, r3, #3184	; 0xc70
 8001fa4:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001fa8:	f103 0308 	add.w	r3, r3, #8
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
	    for(uint32_t j = 0; j < LPC_LEN; ++j){
 8001fb6:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001fba:	f103 0308 	add.w	r3, r3, #8
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001fc6:	f102 0208 	add.w	r2, r2, #8
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001fd0:	f103 0308 	add.w	r3, r3, #8
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b09      	cmp	r3, #9
 8001fd8:	d9d0      	bls.n	8001f7c <voice_obfuscation+0x774>
	    }
	    for(uint32_t i = 1; i < LPC_LEN; ++i){
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 8001fe0:	f102 0204 	add.w	r2, r2, #4
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e023      	b.n	8002030 <voice_obfuscation+0x828>
	        companion[i][i - 1] = 1;
 8001fe8:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8001fec:	f103 0304 	add.w	r3, r3, #4
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1e58      	subs	r0, r3, #1
 8001ff4:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8001ff8:	f5a3 6147 	sub.w	r1, r3, #3184	; 0xc70
 8001ffc:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8002000:	f103 0304 	add.w	r3, r3, #4
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4403      	add	r3, r0
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	440b      	add	r3, r1
 8002014:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002018:	601a      	str	r2, [r3, #0]
	    for(uint32_t i = 1; i < LPC_LEN; ++i){
 800201a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800201e:	f103 0304 	add.w	r3, r3, #4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	f507 42ab 	add.w	r2, r7, #21888	; 0x5580
 800202a:	f102 0204 	add.w	r2, r2, #4
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8002034:	f103 0304 	add.w	r3, r3, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2b09      	cmp	r3, #9
 800203c:	d9d4      	bls.n	8001fe8 <voice_obfuscation+0x7e0>
	    }

		mat m = matrix_copy(LPC_LEN, companion, LPC_LEN);
 800203e:	f507 5326 	add.w	r3, r7, #10624	; 0x2980
 8002042:	3b30      	subs	r3, #48	; 0x30
 8002044:	220a      	movs	r2, #10
 8002046:	4619      	mov	r1, r3
 8002048:	200a      	movs	r0, #10
 800204a:	f7fe fff7 	bl	800103c <matrix_copy>
 800204e:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8002052:	6018      	str	r0, [r3, #0]
		for (size_t i = 0; i < 28; ++i){
 8002054:	2300      	movs	r3, #0
 8002056:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800205a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	e03c      	b.n	80020dc <voice_obfuscation+0x8d4>
			mat R, Q;
			gram_schmidt(m, &R, &Q);
 8002062:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8002066:	3a4c      	subs	r2, #76	; 0x4c
 8002068:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800206c:	3b48      	subs	r3, #72	; 0x48
 800206e:	4619      	mov	r1, r3
 8002070:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	f7ff f887 	bl	8001188 <gram_schmidt>
			matrix_delete(m);
 800207a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	f7fe ff74 	bl	8000f6c <matrix_delete>
			m = matrix_mul(R, Q);
 8002084:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002088:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002092:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f7ff f808 	bl	80010b0 <matrix_mul>
 80020a0:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80020a4:	6018      	str	r0, [r3, #0]
			matrix_delete(R);
 80020a6:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80020aa:	f5a3 63a9 	sub.w	r3, r3, #1352	; 0x548
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe ff5b 	bl	8000f6c <matrix_delete>
			matrix_delete(Q);
 80020b6:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80020ba:	f2a3 534c 	subw	r3, r3, #1356	; 0x54c
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe ff53 	bl	8000f6c <matrix_delete>
		for (size_t i = 0; i < 28; ++i){
 80020c6:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80020ca:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3301      	adds	r3, #1
 80020d2:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80020d6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80020e0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b1b      	cmp	r3, #27
 80020e8:	d9bb      	bls.n	8002062 <voice_obfuscation+0x85a>
		}
		float eigen[LPC_LEN][2] = {0};
 80020ea:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 80020ee:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 80020f2:	4618      	mov	r0, r3
 80020f4:	2350      	movs	r3, #80	; 0x50
 80020f6:	461a      	mov	r2, r3
 80020f8:	2100      	movs	r1, #0
 80020fa:	f005 fbd3 	bl	80078a4 <memset>
		eigenvals(m, eigen);
 80020fe:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8002102:	4619      	mov	r1, r3
 8002104:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	f7ff f9ab 	bl	8001464 <eigenvals>
		for(int i = 0; i < LPC_LEN; ++i){
 800210e:	2300      	movs	r3, #0
 8002110:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8002114:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e1db      	b.n	80024d4 <voice_obfuscation+0xccc>
			if(eigen[i][1] != 0){
 800211c:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002120:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 8002124:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002128:	f103 0378 	add.w	r3, r3, #120	; 0x78
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	3304      	adds	r3, #4
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	eef5 7a40 	vcmp.f32	s15, #0.0
 800213c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002140:	f000 81bd 	beq.w	80024be <voice_obfuscation+0xcb6>
				float angle = atan(eigen[i][1] / eigen[i][0]);
 8002144:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002148:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 800214c:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002150:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	3304      	adds	r3, #4
 800215c:	ed93 7a00 	vldr	s14, [r3]
 8002160:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002164:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 8002168:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800216c:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800217e:	ee16 0a90 	vmov	r0, s13
 8002182:	f7fe f9ad 	bl	80004e0 <__aeabi_f2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	ec43 2b10 	vmov	d0, r2, r3
 800218e:	f005 fca7 	bl	8007ae0 <atan>
 8002192:	ec53 2b10 	vmov	r2, r3, d0
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fcd1 	bl	8000b40 <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80021a4:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80021a8:	6013      	str	r3, [r2, #0]
				if(angle < 0)
 80021aa:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80021ae:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021be:	d513      	bpl.n	80021e8 <voice_obfuscation+0x9e0>
					angle += PI;
 80021c0:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80021c4:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80021c8:	ed93 7a00 	vldr	s14, [r3]
 80021cc:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80021d0:	f103 0354 	add.w	r3, r3, #84	; 0x54
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021dc:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80021e0:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80021e4:	edc3 7a00 	vstr	s15, [r3]
				angle = pow(angle, 0.9);
 80021e8:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80021ec:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80021f0:	6818      	ldr	r0, [r3, #0]
 80021f2:	f7fe f975 	bl	80004e0 <__aeabi_f2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	ed9f 1bdb 	vldr	d1, [pc, #876]	; 8002568 <voice_obfuscation+0xd60>
 80021fe:	ec43 2b10 	vmov	d0, r2, r3
 8002202:	f005 fec5 	bl	8007f90 <pow>
 8002206:	ec53 2b10 	vmov	r2, r3, d0
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fc97 	bl	8000b40 <__aeabi_d2f>
 8002212:	4603      	mov	r3, r0
 8002214:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8002218:	f102 0274 	add.w	r2, r2, #116	; 0x74
 800221c:	6013      	str	r3, [r2, #0]
				if(angle > PI)
 800221e:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002222:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002226:	ed93 7a00 	vldr	s14, [r3]
 800222a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800222e:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8002232:	edd3 7a00 	vldr	s15, [r3]
 8002236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	dd09      	ble.n	8002254 <voice_obfuscation+0xa4c>
					angle = PI;
 8002240:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002244:	f103 0354 	add.w	r3, r3, #84	; 0x54
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800224e:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8002252:	6013      	str	r3, [r2, #0]
				if(angle < 0)
 8002254:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002258:	f103 0374 	add.w	r3, r3, #116	; 0x74
 800225c:	edd3 7a00 	vldr	s15, [r3]
 8002260:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002268:	d506      	bpl.n	8002278 <voice_obfuscation+0xa70>
					angle = 0;
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8002272:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8002276:	6013      	str	r3, [r2, #0]
				float mag = sqrt(eigen[i][1] * eigen[i][1] + eigen[i][0] * eigen[i][0]);
 8002278:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 800227c:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 8002280:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002284:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	3304      	adds	r3, #4
 8002290:	ed93 7a00 	vldr	s14, [r3]
 8002294:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002298:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 800229c:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80022a0:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	3304      	adds	r3, #4
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b4:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 80022b8:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 80022bc:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80022c0:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	edd3 6a00 	vldr	s13, [r3]
 80022ce:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 80022d2:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 80022d6:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80022da:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f0:	ee17 0a90 	vmov	r0, s15
 80022f4:	f7fe f8f4 	bl	80004e0 <__aeabi_f2d>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	ec43 2b10 	vmov	d0, r2, r3
 8002300:	f005 feb6 	bl	8008070 <sqrt>
 8002304:	ec53 2b10 	vmov	r2, r3, d0
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc18 	bl	8000b40 <__aeabi_d2f>
 8002310:	4603      	mov	r3, r0
 8002312:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8002316:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800231a:	6013      	str	r3, [r2, #0]
				eigen[i][0] = mag * cos(angle);
 800231c:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002320:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002324:	6818      	ldr	r0, [r3, #0]
 8002326:	f7fe f8db 	bl	80004e0 <__aeabi_f2d>
 800232a:	4604      	mov	r4, r0
 800232c:	460d      	mov	r5, r1
 800232e:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002332:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	f7fe f8d2 	bl	80004e0 <__aeabi_f2d>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	ec43 2b10 	vmov	d0, r2, r3
 8002344:	f005 fd6c 	bl	8007e20 <cos>
 8002348:	ec53 2b10 	vmov	r2, r3, d0
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fe f91e 	bl	8000590 <__aeabi_dmul>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fbf0 	bl	8000b40 <__aeabi_d2f>
 8002360:	4601      	mov	r1, r0
 8002362:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002366:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 800236a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800236e:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	6019      	str	r1, [r3, #0]
				eigen[i][1] = mag * sin(angle);
 800237a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800237e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	f7fe f8ac 	bl	80004e0 <__aeabi_f2d>
 8002388:	4604      	mov	r4, r0
 800238a:	460d      	mov	r5, r1
 800238c:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002390:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	f7fe f8a3 	bl	80004e0 <__aeabi_f2d>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	ec43 2b10 	vmov	d0, r2, r3
 80023a2:	f005 fd9d 	bl	8007ee0 <sin>
 80023a6:	ec53 2b10 	vmov	r2, r3, d0
 80023aa:	4620      	mov	r0, r4
 80023ac:	4629      	mov	r1, r5
 80023ae:	f7fe f8ef 	bl	8000590 <__aeabi_dmul>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	f7fe fbc1 	bl	8000b40 <__aeabi_d2f>
 80023be:	4601      	mov	r1, r0
 80023c0:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 80023c4:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 80023c8:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80023cc:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	3304      	adds	r3, #4
 80023d8:	6019      	str	r1, [r3, #0]
				eigen[i + 1][0] = mag * cos(angle);
 80023da:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80023de:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	f7fe f87c 	bl	80004e0 <__aeabi_f2d>
 80023e8:	4604      	mov	r4, r0
 80023ea:	460d      	mov	r5, r1
 80023ec:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80023f0:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	f7fe f873 	bl	80004e0 <__aeabi_f2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	ec43 2b10 	vmov	d0, r2, r3
 8002402:	f005 fd0d 	bl	8007e20 <cos>
 8002406:	ec53 2b10 	vmov	r2, r3, d0
 800240a:	4620      	mov	r0, r4
 800240c:	4629      	mov	r1, r5
 800240e:	f7fe f8bf 	bl	8000590 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800241e:	f103 0378 	add.w	r3, r3, #120	; 0x78
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1c5c      	adds	r4, r3, #1
 8002426:	f7fe fb8b 	bl	8000b40 <__aeabi_d2f>
 800242a:	4601      	mov	r1, r0
 800242c:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002430:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 8002434:	00e3      	lsls	r3, r4, #3
 8002436:	4413      	add	r3, r2
 8002438:	6019      	str	r1, [r3, #0]
				eigen[i + 1][1] = -mag * sin(angle);
 800243a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800243e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	eef1 7a67 	vneg.f32	s15, s15
 800244a:	ee17 3a90 	vmov	r3, s15
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f846 	bl	80004e0 <__aeabi_f2d>
 8002454:	4604      	mov	r4, r0
 8002456:	460d      	mov	r5, r1
 8002458:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800245c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8002460:	6818      	ldr	r0, [r3, #0]
 8002462:	f7fe f83d 	bl	80004e0 <__aeabi_f2d>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	ec43 2b10 	vmov	d0, r2, r3
 800246e:	f005 fd37 	bl	8007ee0 <sin>
 8002472:	ec53 2b10 	vmov	r2, r3, d0
 8002476:	4620      	mov	r0, r4
 8002478:	4629      	mov	r1, r5
 800247a:	f7fe f889 	bl	8000590 <__aeabi_dmul>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800248a:	f103 0378 	add.w	r3, r3, #120	; 0x78
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	1c5c      	adds	r4, r3, #1
 8002492:	f7fe fb55 	bl	8000b40 <__aeabi_d2f>
 8002496:	4601      	mov	r1, r0
 8002498:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 800249c:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 80024a0:	00e3      	lsls	r3, r4, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	3304      	adds	r3, #4
 80024a6:	6019      	str	r1, [r3, #0]
				++i;
 80024a8:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80024ac:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80024b8:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80024bc:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < LPC_LEN; ++i){
 80024be:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80024c2:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80024ce:	f102 0278 	add.w	r2, r2, #120	; 0x78
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80024d8:	f103 0378 	add.w	r3, r3, #120	; 0x78
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b09      	cmp	r3, #9
 80024e0:	f77f ae1c 	ble.w	800211c <voice_obfuscation+0x914>
			}
		}
		matrix_delete(m);
 80024e4:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	f7fe fd3f 	bl	8000f6c <matrix_delete>

		float poly_coefficients[LPC_LEN + 1][2] = {0};
 80024ee:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 80024f2:	f6a3 5318 	subw	r3, r3, #3352	; 0xd18
 80024f6:	4618      	mov	r0, r3
 80024f8:	2358      	movs	r3, #88	; 0x58
 80024fa:	461a      	mov	r2, r3
 80024fc:	2100      	movs	r1, #0
 80024fe:	f005 f9d1 	bl	80078a4 <memset>
		poly_coefficients[0][0] = 1;
 8002502:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002506:	f6a3 5318 	subw	r3, r3, #3352	; 0xd18
 800250a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800250e:	601a      	str	r2, [r3, #0]
		poly_coefficients[0][1] = 0;
 8002510:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002514:	f6a3 5318 	subw	r3, r3, #3352	; 0xd18
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
		poly_coefficients[1][0] = -eigen[0][0];
 800251e:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002522:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	eef1 7a67 	vneg.f32	s15, s15
 800252e:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002532:	f6a3 5318 	subw	r3, r3, #3352	; 0xd18
 8002536:	edc3 7a02 	vstr	s15, [r3, #8]
		poly_coefficients[1][1] = -eigen[0][1];
 800253a:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 800253e:	f5a3 634c 	sub.w	r3, r3, #3264	; 0xcc0
 8002542:	edd3 7a01 	vldr	s15, [r3, #4]
 8002546:	eef1 7a67 	vneg.f32	s15, s15
 800254a:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 800254e:	f6a3 5318 	subw	r3, r3, #3352	; 0xd18
 8002552:	edc3 7a03 	vstr	s15, [r3, #12]
		for(int i = 1; i < LPC_LEN; ++i){
 8002556:	2301      	movs	r3, #1
 8002558:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800255c:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e123      	b.n	80027ac <voice_obfuscation+0xfa4>
 8002564:	f3af 8000 	nop.w
 8002568:	cccccccd 	.word	0xcccccccd
 800256c:	3feccccc 	.word	0x3feccccc
			float window[2][2] = {{-eigen[i][0],-eigen[i][1]}, {1,0}};
 8002570:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002574:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 8002578:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800257c:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	edd3 7a00 	vldr	s15, [r3]
 800258a:	eef1 7a67 	vneg.f32	s15, s15
 800258e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002592:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 8002596:	edc3 7a00 	vstr	s15, [r3]
 800259a:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 800259e:	f5a3 624c 	sub.w	r2, r3, #3264	; 0xcc0
 80025a2:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80025a6:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4413      	add	r3, r2
 80025b0:	3304      	adds	r3, #4
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	eef1 7a67 	vneg.f32	s15, s15
 80025ba:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80025be:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80025c2:	edc3 7a01 	vstr	s15, [r3, #4]
 80025c6:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80025ca:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80025ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80025d8:	f2a3 535c 	subw	r3, r3, #1372	; 0x55c
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	60da      	str	r2, [r3, #12]
			float temp_coefficients[LPC_LEN + 1][2] = {0};
 80025e2:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80025e6:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80025ea:	4618      	mov	r0, r3
 80025ec:	2358      	movs	r3, #88	; 0x58
 80025ee:	461a      	mov	r2, r3
 80025f0:	2100      	movs	r1, #0
 80025f2:	f005 f957 	bl	80078a4 <memset>
			temp_coefficients[0][0] = 1;
 80025f6:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80025fa:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 80025fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002602:	601a      	str	r2, [r3, #0]
			temp_coefficients[0][1] = 0;
 8002604:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002608:	f2a3 53b4 	subw	r3, r3, #1460	; 0x5b4
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	605a      	str	r2, [r3, #4]
			for(int j = 0; j < i; ++j){
 8002612:	2300      	movs	r3, #0
 8002614:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8002618:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e042      	b.n	80026a6 <voice_obfuscation+0xe9e>
				complex_mul(poly_coefficients[j], window[0], temp_coefficients[j + 1]);
 8002620:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8002624:	3b18      	subs	r3, #24
 8002626:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800262a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	00d2      	lsls	r2, r2, #3
 8002632:	1898      	adds	r0, r3, r2
 8002634:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002638:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002644:	3b34      	subs	r3, #52	; 0x34
 8002646:	00d2      	lsls	r2, r2, #3
 8002648:	441a      	add	r2, r3
 800264a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800264e:	3b5c      	subs	r3, #92	; 0x5c
 8002650:	4619      	mov	r1, r3
 8002652:	f7ff f80f 	bl	8001674 <complex_mul>
				complex_mul(poly_coefficients[j + 1], window[1], temp_coefficients[j + 1]);
 8002656:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800265a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8002666:	3b18      	subs	r3, #24
 8002668:	00d2      	lsls	r2, r2, #3
 800266a:	1898      	adds	r0, r3, r2
 800266c:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002670:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800267c:	3b34      	subs	r3, #52	; 0x34
 800267e:	00d2      	lsls	r2, r2, #3
 8002680:	441a      	add	r2, r3
 8002682:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002686:	3b5c      	subs	r3, #92	; 0x5c
 8002688:	3308      	adds	r3, #8
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fff2 	bl	8001674 <complex_mul>
			for(int j = 0; j < i; ++j){
 8002690:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002694:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3301      	adds	r3, #1
 800269c:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80026a0:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80026aa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80026b4:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	dbb0      	blt.n	8002620 <voice_obfuscation+0xe18>
			}
			complex_mul(poly_coefficients[i], window[0], temp_coefficients[i + 1]);
 80026be:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 80026c2:	3b18      	subs	r3, #24
 80026c4:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80026c8:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	00d2      	lsls	r2, r2, #3
 80026d0:	1898      	adds	r0, r3, r2
 80026d2:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80026d6:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026e2:	3b34      	subs	r3, #52	; 0x34
 80026e4:	00d2      	lsls	r2, r2, #3
 80026e6:	441a      	add	r2, r3
 80026e8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026ec:	3b5c      	subs	r3, #92	; 0x5c
 80026ee:	4619      	mov	r1, r3
 80026f0:	f7fe ffc0 	bl	8001674 <complex_mul>
			for(int j = 0; j < i + 2; ++ j){
 80026f4:	2300      	movs	r3, #0
 80026f6:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80026fa:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80026fe:	6013      	str	r3, [r2, #0]
 8002700:	e03c      	b.n	800277c <voice_obfuscation+0xf74>
				poly_coefficients[j][0] = temp_coefficients[j][0];
 8002702:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002706:	f2a3 52b4 	subw	r2, r3, #1460	; 0x5b4
 800270a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800270e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 800271e:	f6a3 5118 	subw	r1, r3, #3352	; 0xd18
 8002722:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002726:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	601a      	str	r2, [r3, #0]
				poly_coefficients[j][1] = temp_coefficients[j][1];
 8002732:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002736:	f2a3 52b4 	subw	r2, r3, #1460	; 0x5b4
 800273a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800273e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 8002750:	f6a3 5118 	subw	r1, r3, #3352	; 0xd18
 8002754:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002758:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	3304      	adds	r3, #4
 8002764:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < i + 2; ++ j){
 8002766:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800276a:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8002776:	f102 0268 	add.w	r2, r2, #104	; 0x68
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002780:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800278c:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8002790:	6812      	ldr	r2, [r2, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	ddb5      	ble.n	8002702 <voice_obfuscation+0xefa>
		for(int i = 1; i < LPC_LEN; ++i){
 8002796:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800279a:	f103 0370 	add.w	r3, r3, #112	; 0x70
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3301      	adds	r3, #1
 80027a2:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80027a6:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80027b0:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b09      	cmp	r3, #9
 80027b8:	f77f aeda 	ble.w	8002570 <voice_obfuscation+0xd68>
			}
		}

		float a_lpc_new[LPC_LEN + 1];
		for(int i = 0; i < LPC_LEN + 1; ++i){
 80027bc:	2300      	movs	r3, #0
 80027be:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80027c2:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	e022      	b.n	8002810 <voice_obfuscation+0x1008>
			a_lpc_new[i] = poly_coefficients[i][0];
 80027ca:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 80027ce:	f6a3 5218 	subw	r2, r3, #3352	; 0xd18
 80027d2:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80027d6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4413      	add	r3, r2
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	f507 5357 	add.w	r3, r7, #13760	; 0x35c0
 80027e6:	f6a3 5144 	subw	r1, r3, #3396	; 0xd44
 80027ea:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80027ee:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < LPC_LEN + 1; ++i){
 80027fa:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80027fe:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800280a:	f102 0264 	add.w	r2, r2, #100	; 0x64
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002814:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b0a      	cmp	r3, #10
 800281c:	ddd5      	ble.n	80027ca <voice_obfuscation+0xfc2>
		}
		float out[WIN_LENGTH] = {0};
 800281e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002822:	f2a3 5344 	subw	r3, r3, #1348	; 0x544
 8002826:	4618      	mov	r0, r3
 8002828:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800282c:	461a      	mov	r2, r3
 800282e:	2100      	movs	r1, #0
 8002830:	f005 f838 	bl	80078a4 <memset>
		filter1(a, a_lpc_new, LPC_LEN + 1, frame, out, WIN_LENGTH);
 8002834:	f507 5236 	add.w	r2, r7, #11648	; 0x2d80
 8002838:	3a38      	subs	r2, #56	; 0x38
 800283a:	f507 5122 	add.w	r1, r7, #10368	; 0x2880
 800283e:	3904      	subs	r1, #4
 8002840:	f507 502c 	add.w	r0, r7, #11008	; 0x2b00
 8002844:	3820      	subs	r0, #32
 8002846:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002850:	3b44      	subs	r3, #68	; 0x44
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	220b      	movs	r2, #11
 8002858:	f7fe ff52 	bl	8001700 <filter1>
		float max_peak = 0;
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8002864:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8002868:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < WIN_LENGTH; ++i){
 800286a:	2300      	movs	r3, #0
 800286c:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8002870:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e04b      	b.n	8002910 <voice_obfuscation+0x1108>
			// out[i] *= hann_coef[i];
			if(max_peak < abs(out[i])){
 8002878:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800287c:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 8002880:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002884:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002896:	ee17 3a90 	vmov	r3, s15
 800289a:	2b00      	cmp	r3, #0
 800289c:	bfb8      	it	lt
 800289e:	425b      	neglt	r3, r3
 80028a0:	ee07 3a90 	vmov	s15, r3
 80028a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a8:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80028ac:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	d51d      	bpl.n	80028fa <voice_obfuscation+0x10f2>
				max_peak = abs(out[i]);
 80028be:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80028c2:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 80028c6:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80028ca:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028dc:	ee17 3a90 	vmov	r3, s15
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bfb8      	it	lt
 80028e4:	425b      	neglt	r3, r3
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ee:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80028f2:	f103 0360 	add.w	r3, r3, #96	; 0x60
 80028f6:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < WIN_LENGTH; ++i){
 80028fa:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80028fe:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 800290a:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 8002914:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800291e:	dbab      	blt.n	8002878 <voice_obfuscation+0x1070>
			}
		}
		for(int i = 0; i < WIN_LENGTH; ++i){
 8002920:	2300      	movs	r3, #0
 8002922:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 8002926:	f102 0258 	add.w	r2, r2, #88	; 0x58
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	e042      	b.n	80029b4 <voice_obfuscation+0x11ac>
			output[i] = (int16_t)((out[i]) * INT16_MAX - 1) + sum;
 800292e:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002932:	f2a3 5244 	subw	r2, r3, #1348	; 0x544
 8002936:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800293a:	f103 0358 	add.w	r3, r3, #88	; 0x58
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	edd3 7a00 	vldr	s15, [r3]
 8002948:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80029d4 <voice_obfuscation+0x11cc>
 800294c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002954:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295c:	ee17 3a90 	vmov	r3, s15
 8002960:	b21b      	sxth	r3, r3
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800296a:	f507 43ab 	add.w	r3, r7, #21888	; 0x5580
 800296e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297a:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 800297e:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800298a:	f5a2 62b8 	sub.w	r2, r2, #1472	; 0x5c0
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	4413      	add	r3, r2
 8002992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002996:	ee17 2a90 	vmov	r2, s15
 800299a:	b212      	sxth	r2, r2
 800299c:	801a      	strh	r2, [r3, #0]
		for(int i = 0; i < WIN_LENGTH; ++i){
 800299e:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80029a2:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3301      	adds	r3, #1
 80029aa:	f507 42aa 	add.w	r2, r7, #21760	; 0x5500
 80029ae:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	f507 43aa 	add.w	r3, r7, #21760	; 0x5500
 80029b8:	f103 0358 	add.w	r3, r3, #88	; 0x58
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80029c2:	dbb4      	blt.n	800292e <voice_obfuscation+0x1126>
		}
}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	f507 47ab 	add.w	r7, r7, #21888	; 0x5580
 80029cc:	3740      	adds	r7, #64	; 0x40
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bdb0      	pop	{r4, r5, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	46fffe00 	.word	0x46fffe00

080029d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	f5ad 5da1 	sub.w	sp, sp, #5152	; 0x1420
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029e2:	f000 fe50 	bl	8003686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029e6:	f000 f9e5 	bl	8002db4 <SystemClock_Config>
//		hann_coef[i] = sqrt((hann_coef[i] * WIN_SHIFT ) / (maximum_val * K));
//	}
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029ea:	f000 fb03 	bl	8002ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 80029ee:	f000 fac7 	bl	8002f80 <MX_DMA_Init>
  MX_I2S2_Init();
 80029f2:	f000 fa2b 	bl	8002e4c <MX_I2S2_Init>
  MX_LPUART1_UART_Init();
 80029f6:	f000 fa79 	bl	8002eec <MX_LPUART1_UART_Init>
  MX_I2S3_Init();
 80029fa:	f000 fa4f 	bl	8002e9c <MX_I2S3_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2S_Receive_DMA(&hi2s2, (uint16_t *)i2s_rxBuf, SAMPLE_SIZE);
 80029fe:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8002a02:	49c2      	ldr	r1, [pc, #776]	; (8002d0c <main+0x334>)
 8002a04:	48c2      	ldr	r0, [pc, #776]	; (8002d10 <main+0x338>)
 8002a06:	f001 fe37 	bl	8004678 <HAL_I2S_Receive_DMA>
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)i2s_txBuf, SAMPLE_SIZE);
 8002a0a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8002a0e:	49c1      	ldr	r1, [pc, #772]	; (8002d14 <main+0x33c>)
 8002a10:	48c1      	ldr	r0, [pc, #772]	; (8002d18 <main+0x340>)
 8002a12:	f001 fd89 	bl	8004528 <HAL_I2S_Transmit_DMA>
  uint8_t prev_rxBuf_status = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002a1c:	f102 0207 	add.w	r2, r2, #7
 8002a20:	7013      	strb	r3, [r2, #0]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int dataBuf_ptr = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002a28:	f102 020c 	add.w	r2, r2, #12
 8002a2c:	6013      	str	r3, [r2, #0]
	  int txBuf_ptr = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002a34:	f102 0208 	add.w	r2, r2, #8
 8002a38:	6013      	str	r3, [r2, #0]

	  if(rxBuf_status == 1){
 8002a3a:	4bb8      	ldr	r3, [pc, #736]	; (8002d1c <main+0x344>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	f040 80c8 	bne.w	8002bd6 <main+0x1fe>
//		  if(prev_rxBuf_status == 1) exit(1); // DEBUG DOUBLING
//		  printf("rxBuf half\n");  // DEBUG PRINTMSG

		  /* READ IN MICROPHONE DATA */
		  int uter_trigger = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002a4c:	f102 0204 	add.w	r2, r2, #4
 8002a50:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < SAMPLE_SIZE/2; i = i+2){
 8002a52:	2300      	movs	r3, #0
 8002a54:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e034      	b.n	8002ac6 <main+0xee>
				dataBuf[dataBuf_ptr] = i2s_rxBuf[i];
 8002a5c:	4aab      	ldr	r2, [pc, #684]	; (8002d0c <main+0x334>)
 8002a5e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002a68:	4aad      	ldr	r2, [pc, #692]	; (8002d20 <main+0x348>)
 8002a6a:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002a6e:	f103 030c 	add.w	r3, r3, #12
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(abs(dataBuf[dataBuf_ptr]) > TRIGGER_TRESH)
 8002a78:	4aa9      	ldr	r2, [pc, #676]	; (8002d20 <main+0x348>)
 8002a7a:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002a7e:	f103 030c 	add.w	r3, r3, #12
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	bfb8      	it	lt
 8002a8c:	425b      	neglt	r3, r3
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002a94:	d905      	bls.n	8002aa2 <main+0xca>
					uter_trigger = 1;
 8002a96:	2301      	movs	r3, #1
 8002a98:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002a9c:	f102 0204 	add.w	r2, r2, #4
 8002aa0:	6013      	str	r3, [r2, #0]
		  		++dataBuf_ptr;
 8002aa2:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002aa6:	f103 030c 	add.w	r3, r3, #12
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002ab2:	f102 020c 	add.w	r2, r2, #12
 8002ab6:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < SAMPLE_SIZE/2; i = i+2){
 8002ab8:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	3302      	adds	r3, #2
 8002ac0:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ad0:	dbc4      	blt.n	8002a5c <main+0x84>
		  }

		  /* PERFORM VOICE OBFUSCATION */
//		  HAL_Delay(15);
		  int16_t i2s_temp_buf[WIN_LENGTH];
		  txBuf_ptr = 0;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002ad8:	f102 0208 	add.w	r2, r2, #8
 8002adc:	6013      	str	r3, [r2, #0]
		  if(uter_trigger)
 8002ade:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002ae2:	f103 0304 	add.w	r3, r3, #4
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <main+0x124>
			  voice_obfuscation(dataBuf, i2s_temp_buf);
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	3b0c      	subs	r3, #12
 8002af2:	4619      	mov	r1, r3
 8002af4:	488a      	ldr	r0, [pc, #552]	; (8002d20 <main+0x348>)
 8002af6:	f7fe fe87 	bl	8001808 <voice_obfuscation>
 8002afa:	e025      	b.n	8002b48 <main+0x170>
		  else{
			  for(int i = 0; i < WIN_LENGTH; ++i){
 8002afc:	2300      	movs	r3, #0
 8002afe:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002b02:	f102 021c 	add.w	r2, r2, #28
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	e016      	b.n	8002b38 <main+0x160>
				  i2s_temp_buf[i] = 0;
 8002b0a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002b0e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8002b12:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002b16:	f102 021c 	add.w	r2, r2, #28
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  for(int i = 0; i < WIN_LENGTH; ++i){
 8002b22:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002b26:	f103 031c 	add.w	r3, r3, #28
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002b32:	f102 021c 	add.w	r2, r2, #28
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002b3c:	f103 031c 	add.w	r3, r3, #28
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002b46:	dbe0      	blt.n	8002b0a <main+0x132>
			  }
		  }

		  /* TRANSFER THE OBFUSCATED AUDIO TO TX BUFFER */
		  for(int j = 0; j < SAMPLE_SIZE/4; ++j){
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002b4e:	f102 0218 	add.w	r2, r2, #24
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	e028      	b.n	8002ba8 <main+0x1d0>
			  i2s_txBuf[txBuf_ptr] = i2s_temp_buf[j];
 8002b56:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002b5a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8002b5e:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002b62:	f102 0218 	add.w	r2, r2, #24
 8002b66:	6812      	ldr	r2, [r2, #0]
 8002b68:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8002b6c:	4a69      	ldr	r2, [pc, #420]	; (8002d14 <main+0x33c>)
 8002b6e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002b72:	f103 0308 	add.w	r3, r3, #8
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf_ptr = txBuf_ptr + 2;
 8002b7c:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002b80:	f103 0308 	add.w	r3, r3, #8
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3302      	adds	r3, #2
 8002b88:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002b8c:	f102 0208 	add.w	r2, r2, #8
 8002b90:	6013      	str	r3, [r2, #0]
		  for(int j = 0; j < SAMPLE_SIZE/4; ++j){
 8002b92:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002b96:	f103 0318 	add.w	r3, r3, #24
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002ba2:	f102 0218 	add.w	r2, r2, #24
 8002ba6:	6013      	str	r3, [r2, #0]
 8002ba8:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002bac:	f103 0318 	add.w	r3, r3, #24
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002bb6:	dbce      	blt.n	8002b56 <main+0x17e>
		  }
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // DEBUG TIMING
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2108      	movs	r1, #8
 8002bbc:	4859      	ldr	r0, [pc, #356]	; (8002d24 <main+0x34c>)
 8002bbe:	f001 fb97 	bl	80042f0 <HAL_GPIO_WritePin>

		  /* SET FLAGS */
		  rxBuf_status = 0;
 8002bc2:	4b56      	ldr	r3, [pc, #344]	; (8002d1c <main+0x344>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
		  prev_rxBuf_status = 1;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002bce:	f102 0207 	add.w	r2, r2, #7
 8002bd2:	7013      	strb	r3, [r2, #0]
 8002bd4:	e725      	b.n	8002a22 <main+0x4a>
	  }

	  else if (rxBuf_status == 2){
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <main+0x344>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	f47f af20 	bne.w	8002a22 <main+0x4a>
//		  if(prev_rxBuf_status == 2) exit(1); // DEBUG DOUBLING
//		  printf("rxBuf full\n"); // DEBUG PRINTMSG

		  /* READ IN MICROPHONE DATA */
		  int uter_trigger = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002be8:	f102 0214 	add.w	r2, r2, #20
 8002bec:	6013      	str	r3, [r2, #0]
		  for(int i = SAMPLE_SIZE/2; i < SAMPLE_SIZE; i = i+2){
 8002bee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bf2:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002bf6:	f102 0210 	add.w	r2, r2, #16
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	e03a      	b.n	8002c74 <main+0x29c>
			    dataBuf[dataBuf_ptr] = i2s_rxBuf[i];
 8002bfe:	4a43      	ldr	r2, [pc, #268]	; (8002d0c <main+0x334>)
 8002c00:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002c04:	f103 0310 	add.w	r3, r3, #16
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8002c0e:	4a44      	ldr	r2, [pc, #272]	; (8002d20 <main+0x348>)
 8002c10:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002c14:	f103 030c 	add.w	r3, r3, #12
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(abs(dataBuf[dataBuf_ptr]) > TRIGGER_TRESH)
 8002c1e:	4a40      	ldr	r2, [pc, #256]	; (8002d20 <main+0x348>)
 8002c20:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002c24:	f103 030c 	add.w	r3, r3, #12
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bfb8      	it	lt
 8002c32:	425b      	neglt	r3, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002c3a:	d905      	bls.n	8002c48 <main+0x270>
					uter_trigger = 1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002c42:	f102 0214 	add.w	r2, r2, #20
 8002c46:	6013      	str	r3, [r2, #0]
				++dataBuf_ptr;
 8002c48:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002c4c:	f103 030c 	add.w	r3, r3, #12
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002c58:	f102 020c 	add.w	r2, r2, #12
 8002c5c:	6013      	str	r3, [r2, #0]
		  for(int i = SAMPLE_SIZE/2; i < SAMPLE_SIZE; i = i+2){
 8002c5e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002c62:	f103 0310 	add.w	r3, r3, #16
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3302      	adds	r3, #2
 8002c6a:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002c6e:	f102 0210 	add.w	r2, r2, #16
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002c78:	f103 0310 	add.w	r3, r3, #16
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8002c82:	dbbc      	blt.n	8002bfe <main+0x226>
		  }

		  /* PERFORM VOICE OBFUSCATION */
//		  HAL_Delay(15);
		  int16_t i2s_temp_buf[WIN_LENGTH];
		  txBuf_ptr = SAMPLE_SIZE/2; // STARTS FROM THE HALF-FILLED POSITION
 8002c84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c88:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002c8c:	f102 0208 	add.w	r2, r2, #8
 8002c90:	6013      	str	r3, [r2, #0]
		  if(uter_trigger)
 8002c92:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002c96:	f103 0314 	add.w	r3, r3, #20
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <main+0x2d8>
			  voice_obfuscation(dataBuf, i2s_temp_buf);
 8002ca0:	f107 0310 	add.w	r3, r7, #16
 8002ca4:	3b0c      	subs	r3, #12
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	481d      	ldr	r0, [pc, #116]	; (8002d20 <main+0x348>)
 8002caa:	f7fe fdad 	bl	8001808 <voice_obfuscation>
 8002cae:	e025      	b.n	8002cfc <main+0x324>
		  else{
			  for(int i = 0; i < WIN_LENGTH; ++i){
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002cb6:	f102 020c 	add.w	r2, r2, #12
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e016      	b.n	8002cec <main+0x314>
				  i2s_temp_buf[i] = 0;
 8002cbe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002cc2:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8002cc6:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002cca:	f102 020c 	add.w	r2, r2, #12
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  for(int i = 0; i < WIN_LENGTH; ++i){
 8002cd6:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002cda:	f103 030c 	add.w	r3, r3, #12
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002ce6:	f102 020c 	add.w	r2, r2, #12
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002cf0:	f103 030c 	add.w	r3, r3, #12
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002cfa:	dbe0      	blt.n	8002cbe <main+0x2e6>
			  }
		  }
		  /* TRANSFER THE OBFUSCATED AUDIO TO TX BUFFER */
		  for(int j = 0; j < SAMPLE_SIZE/4; ++j){
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002d02:	f102 0208 	add.w	r2, r2, #8
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e037      	b.n	8002d7a <main+0x3a2>
 8002d0a:	bf00      	nop
 8002d0c:	200002b4 	.word	0x200002b4
 8002d10:	2000008c 	.word	0x2000008c
 8002d14:	200052b4 	.word	0x200052b4
 8002d18:	200000c8 	.word	0x200000c8
 8002d1c:	2000b6b4 	.word	0x2000b6b4
 8002d20:	2000a2b4 	.word	0x2000a2b4
 8002d24:	48000800 	.word	0x48000800
			  i2s_txBuf[txBuf_ptr] = i2s_temp_buf[j];
 8002d28:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002d2c:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8002d30:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002d34:	f102 0208 	add.w	r2, r2, #8
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <main+0x3d0>)
 8002d40:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002d44:	f103 0308 	add.w	r3, r3, #8
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			  txBuf_ptr = txBuf_ptr + 2;
 8002d4e:	f507 53a1 	add.w	r3, r7, #5152	; 0x1420
 8002d52:	f103 0308 	add.w	r3, r3, #8
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	f507 52a1 	add.w	r2, r7, #5152	; 0x1420
 8002d5e:	f102 0208 	add.w	r2, r2, #8
 8002d62:	6013      	str	r3, [r2, #0]
		  for(int j = 0; j < SAMPLE_SIZE/4; ++j){
 8002d64:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002d68:	f103 0308 	add.w	r3, r3, #8
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002d74:	f102 0208 	add.w	r2, r2, #8
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8002d7e:	f103 0308 	add.w	r3, r3, #8
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002d88:	dbce      	blt.n	8002d28 <main+0x350>
		  }
//		  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)i2s_txBuf, SAMPLE_SIZE); // DEBUG NON-CIRCULAR TRANSMIT
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET); // DEBUG TIMING
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2108      	movs	r1, #8
 8002d8e:	4807      	ldr	r0, [pc, #28]	; (8002dac <main+0x3d4>)
 8002d90:	f001 faae 	bl	80042f0 <HAL_GPIO_WritePin>

		  /* SET FLAGS */
		  rxBuf_status = 0;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <main+0x3d8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
		  prev_rxBuf_status = 2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	f507 52a0 	add.w	r2, r7, #5120	; 0x1400
 8002da0:	f102 0207 	add.w	r2, r2, #7
 8002da4:	7013      	strb	r3, [r2, #0]
  {
 8002da6:	e63c      	b.n	8002a22 <main+0x4a>
 8002da8:	200052b4 	.word	0x200052b4
 8002dac:	48000800 	.word	0x48000800
 8002db0:	2000b6b4 	.word	0x2000b6b4

08002db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b094      	sub	sp, #80	; 0x50
 8002db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dba:	f107 0318 	add.w	r3, r7, #24
 8002dbe:	2238      	movs	r2, #56	; 0x38
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 fd6e 	bl	80078a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
 8002dd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f001 fdac 	bl	8004934 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002de6:	2340      	movs	r3, #64	; 0x40
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dea:	2302      	movs	r3, #2
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dee:	2302      	movs	r3, #2
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002df2:	2304      	movs	r3, #4
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002df6:	2355      	movs	r3, #85	; 0x55
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e02:	2302      	movs	r3, #2
 8002e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e06:	f107 0318 	add.w	r3, r7, #24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f001 fe46 	bl	8004a9c <HAL_RCC_OscConfig>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002e16:	f000 f997 	bl	8003148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e1a:	230f      	movs	r3, #15
 8002e1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	2104      	movs	r1, #4
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 f94a 	bl	80050cc <HAL_RCC_ClockConfig>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8002e3e:	f000 f983 	bl	8003148 <Error_Handler>
  }
}
 8002e42:	bf00      	nop
 8002e44:	3750      	adds	r7, #80	; 0x50
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <MX_I2S2_Init+0x48>)
 8002e52:	4a11      	ldr	r2, [pc, #68]	; (8002e98 <MX_I2S2_Init+0x4c>)
 8002e54:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <MX_I2S2_Init+0x48>)
 8002e58:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e5c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <MX_I2S2_Init+0x48>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <MX_I2S2_Init+0x48>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <MX_I2S2_Init+0x48>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <MX_I2S2_Init+0x48>)
 8002e72:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002e76:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002e78:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <MX_I2S2_Init+0x48>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002e7e:	4805      	ldr	r0, [pc, #20]	; (8002e94 <MX_I2S2_Init+0x48>)
 8002e80:	f001 fa72 	bl	8004368 <HAL_I2S_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8002e8a:	f000 f95d 	bl	8003148 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000008c 	.word	0x2000008c
 8002e98:	40003800 	.word	0x40003800

08002e9c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002ea0:	4b10      	ldr	r3, [pc, #64]	; (8002ee4 <MX_I2S3_Init+0x48>)
 8002ea2:	4a11      	ldr	r2, [pc, #68]	; (8002ee8 <MX_I2S3_Init+0x4c>)
 8002ea4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <MX_I2S3_Init+0x48>)
 8002ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002eae:	4b0d      	ldr	r3, [pc, #52]	; (8002ee4 <MX_I2S3_Init+0x48>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <MX_I2S3_Init+0x48>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002eba:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <MX_I2S3_Init+0x48>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <MX_I2S3_Init+0x48>)
 8002ec2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002ec6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002ec8:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <MX_I2S3_Init+0x48>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002ece:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <MX_I2S3_Init+0x48>)
 8002ed0:	f001 fa4a 	bl	8004368 <HAL_I2S_Init>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <MX_I2S3_Init+0x42>
  {
    Error_Handler();
 8002eda:	f000 f935 	bl	8003148 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200000c8 	.word	0x200000c8
 8002ee8:	40003c00 	.word	0x40003c00

08002eec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002ef0:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002ef2:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <MX_LPUART1_UART_Init+0x90>)
 8002ef4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002ef6:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002efc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002f04:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002f10:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f12:	220c      	movs	r2, #12
 8002f14:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f16:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f1c:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002f2e:	4812      	ldr	r0, [pc, #72]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f30:	f003 fa74 	bl	800641c <HAL_UART_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f3a:	f000 f905 	bl	8003148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f3e:	2100      	movs	r1, #0
 8002f40:	480d      	ldr	r0, [pc, #52]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f42:	f004 fba2 	bl	800768a <HAL_UARTEx_SetTxFifoThreshold>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002f4c:	f000 f8fc 	bl	8003148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f50:	2100      	movs	r1, #0
 8002f52:	4809      	ldr	r0, [pc, #36]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f54:	f004 fbd7 	bl	8007706 <HAL_UARTEx_SetRxFifoThreshold>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002f5e:	f000 f8f3 	bl	8003148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <MX_LPUART1_UART_Init+0x8c>)
 8002f64:	f004 fb58 	bl	8007618 <HAL_UARTEx_DisableFifoMode>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002f6e:	f000 f8eb 	bl	8003148 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200001c4 	.word	0x200001c4
 8002f7c:	40008000 	.word	0x40008000

08002f80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <MX_DMA_Init+0x70>)
 8002f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8a:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <MX_DMA_Init+0x70>)
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	6493      	str	r3, [r2, #72]	; 0x48
 8002f92:	4b17      	ldr	r3, [pc, #92]	; (8002ff0 <MX_DMA_Init+0x70>)
 8002f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <MX_DMA_Init+0x70>)
 8002fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa2:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <MX_DMA_Init+0x70>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6493      	str	r3, [r2, #72]	; 0x48
 8002faa:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <MX_DMA_Init+0x70>)
 8002fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	200b      	movs	r0, #11
 8002fbc:	f000 fcaf 	bl	800391e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002fc0:	200b      	movs	r0, #11
 8002fc2:	f000 fcc6 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	200c      	movs	r0, #12
 8002fcc:	f000 fca7 	bl	800391e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002fd0:	200c      	movs	r0, #12
 8002fd2:	f000 fcbe 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2100      	movs	r1, #0
 8002fda:	200d      	movs	r0, #13
 8002fdc:	f000 fc9f 	bl	800391e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002fe0:	200d      	movs	r0, #13
 8002fe2:	f000 fcb6 	bl	8003952 <HAL_NVIC_EnableIRQ>

}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	; 0x28
 8002ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	609a      	str	r2, [r3, #8]
 8003006:	60da      	str	r2, [r3, #12]
 8003008:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <MX_GPIO_Init+0xfc>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	4a38      	ldr	r2, [pc, #224]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003016:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003022:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003026:	4a32      	ldr	r2, [pc, #200]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003028:	f043 0320 	orr.w	r3, r3, #32
 800302c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <MX_GPIO_Init+0xfc>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003046:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003052:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003056:	4a26      	ldr	r2, [pc, #152]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <MX_GPIO_Init+0xfc>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	607b      	str	r3, [r7, #4]
 8003068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800306a:	2200      	movs	r2, #0
 800306c:	2108      	movs	r1, #8
 800306e:	4821      	ldr	r0, [pc, #132]	; (80030f4 <MX_GPIO_Init+0x100>)
 8003070:	f001 f93e 	bl	80042f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003074:	2200      	movs	r2, #0
 8003076:	2120      	movs	r1, #32
 8003078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800307c:	f001 f938 	bl	80042f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003086:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800308a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003090:	f107 0314 	add.w	r3, r7, #20
 8003094:	4619      	mov	r1, r3
 8003096:	4817      	ldr	r0, [pc, #92]	; (80030f4 <MX_GPIO_Init+0x100>)
 8003098:	f000 ffa8 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800309c:	2308      	movs	r3, #8
 800309e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a0:	2301      	movs	r3, #1
 80030a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a8:	2300      	movs	r3, #0
 80030aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	4619      	mov	r1, r3
 80030b2:	4810      	ldr	r0, [pc, #64]	; (80030f4 <MX_GPIO_Init+0x100>)
 80030b4:	f000 ff9a 	bl	8003fec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80030b8:	2320      	movs	r3, #32
 80030ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030bc:	2301      	movs	r3, #1
 80030be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c4:	2300      	movs	r3, #0
 80030c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80030c8:	f107 0314 	add.w	r3, r7, #20
 80030cc:	4619      	mov	r1, r3
 80030ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d2:	f000 ff8b 	bl	8003fec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	2100      	movs	r1, #0
 80030da:	2028      	movs	r0, #40	; 0x28
 80030dc:	f000 fc1f 	bl	800391e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030e0:	2028      	movs	r0, #40	; 0x28
 80030e2:	f000 fc36 	bl	8003952 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030e6:	bf00      	nop
 80030e8:	3728      	adds	r7, #40	; 0x28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40021000 	.word	0x40021000
 80030f4:	48000800 	.word	0x48000800

080030f8 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	//	 printf("half callback\n");  // DEBUG PRINTMSG
		rxBuf_status = 1;
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // DEBUG TIMING
 8003106:	2201      	movs	r2, #1
 8003108:	2108      	movs	r1, #8
 800310a:	4804      	ldr	r0, [pc, #16]	; (800311c <HAL_I2S_RxHalfCpltCallback+0x24>)
 800310c:	f001 f8f0 	bl	80042f0 <HAL_GPIO_WritePin>
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	2000b6b4 	.word	0x2000b6b4
 800311c:	48000800 	.word	0x48000800

08003120 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s){
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	//	printf("full callback\n");  // DEBUG PRINTMSG
		rxBuf_status = 2;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_I2S_RxCpltCallback+0x20>)
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET); // DEBUG TIMING
 800312e:	2201      	movs	r2, #1
 8003130:	2108      	movs	r1, #8
 8003132:	4804      	ldr	r0, [pc, #16]	; (8003144 <HAL_I2S_RxCpltCallback+0x24>)
 8003134:	f001 f8dc 	bl	80042f0 <HAL_GPIO_WritePin>
}
 8003138:	bf00      	nop
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	2000b6b4 	.word	0x2000b6b4
 8003144:	48000800 	.word	0x48000800

08003148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800314c:	b672      	cpsid	i
}
 800314e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003150:	e7fe      	b.n	8003150 <Error_Handler+0x8>
	...

08003154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_MspInit+0x44>)
 800315c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315e:	4a0e      	ldr	r2, [pc, #56]	; (8003198 <HAL_MspInit+0x44>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6613      	str	r3, [r2, #96]	; 0x60
 8003166:	4b0c      	ldr	r3, [pc, #48]	; (8003198 <HAL_MspInit+0x44>)
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	607b      	str	r3, [r7, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_MspInit+0x44>)
 8003174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003176:	4a08      	ldr	r2, [pc, #32]	; (8003198 <HAL_MspInit+0x44>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	6593      	str	r3, [r2, #88]	; 0x58
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_MspInit+0x44>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800318a:	f001 fc77 	bl	8004a7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000

0800319c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b0a2      	sub	sp, #136	; 0x88
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031b4:	f107 0320 	add.w	r3, r7, #32
 80031b8:	2254      	movs	r2, #84	; 0x54
 80031ba:	2100      	movs	r1, #0
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 fb71 	bl	80078a4 <memset>
  if(hi2s->Instance==SPI2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7b      	ldr	r2, [pc, #492]	; (80033b4 <HAL_I2S_MspInit+0x218>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d165      	bne.n	8003298 <HAL_I2S_MspInit+0xfc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80031cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031d0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d6:	f107 0320 	add.w	r3, r7, #32
 80031da:	4618      	mov	r0, r3
 80031dc:	f002 f992 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2S_MspInit+0x4e>
    {
      Error_Handler();
 80031e6:	f7ff ffaf 	bl	8003148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031ea:	4b73      	ldr	r3, [pc, #460]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	4a72      	ldr	r2, [pc, #456]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f4:	6593      	str	r3, [r2, #88]	; 0x58
 80031f6:	4b70      	ldr	r3, [pc, #448]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fe:	61fb      	str	r3, [r7, #28]
 8003200:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003202:	4b6d      	ldr	r3, [pc, #436]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	4a6c      	ldr	r2, [pc, #432]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 8003208:	f043 0302 	orr.w	r3, r3, #2
 800320c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800320e:	4b6a      	ldr	r3, [pc, #424]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	69bb      	ldr	r3, [r7, #24]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800321a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800321e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003220:	2302      	movs	r3, #2
 8003222:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800322e:	2305      	movs	r3, #5
 8003230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003234:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003238:	4619      	mov	r1, r3
 800323a:	4860      	ldr	r0, [pc, #384]	; (80033bc <HAL_I2S_MspInit+0x220>)
 800323c:	f000 fed6 	bl	8003fec <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel1;
 8003240:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 8003242:	4a60      	ldr	r2, [pc, #384]	; (80033c4 <HAL_I2S_MspInit+0x228>)
 8003244:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8003246:	4b5e      	ldr	r3, [pc, #376]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 8003248:	220c      	movs	r2, #12
 800324a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800324c:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 8003254:	2200      	movs	r2, #0
 8003256:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003258:	4b59      	ldr	r3, [pc, #356]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800325e:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 8003260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003264:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003266:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 8003268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800326e:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 8003270:	2220      	movs	r2, #32
 8003272:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003274:	4b52      	ldr	r3, [pc, #328]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 8003276:	2200      	movs	r2, #0
 8003278:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800327a:	4851      	ldr	r0, [pc, #324]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 800327c:	f000 fb84 	bl	8003988 <HAL_DMA_Init>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2S_MspInit+0xee>
    {
      Error_Handler();
 8003286:	f7ff ff5f 	bl	8003148 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4c      	ldr	r2, [pc, #304]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
 8003290:	4a4b      	ldr	r2, [pc, #300]	; (80033c0 <HAL_I2S_MspInit+0x224>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003296:	e089      	b.n	80033ac <HAL_I2S_MspInit+0x210>
  else if(hi2s->Instance==SPI3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4a      	ldr	r2, [pc, #296]	; (80033c8 <HAL_I2S_MspInit+0x22c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	f040 8084 	bne.w	80033ac <HAL_I2S_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80032a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032a8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2sClockSelection = RCC_I2SCLKSOURCE_SYSCLK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032ae:	f107 0320 	add.w	r3, r7, #32
 80032b2:	4618      	mov	r0, r3
 80032b4:	f002 f926 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <HAL_I2S_MspInit+0x126>
      Error_Handler();
 80032be:	f7ff ff43 	bl	8003148 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80032c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c6:	4a3c      	ldr	r2, [pc, #240]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80032c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032cc:	6593      	str	r3, [r2, #88]	; 0x58
 80032ce:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80032dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032de:	4a36      	ldr	r2, [pc, #216]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032e6:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80032e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f2:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80032f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f6:	4a30      	ldr	r2, [pc, #192]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032fe:	4b2e      	ldr	r3, [pc, #184]	; (80033b8 <HAL_I2S_MspInit+0x21c>)
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	f003 0304 	and.w	r3, r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800330a:	2310      	movs	r3, #16
 800330c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800331c:	2306      	movs	r3, #6
 800331e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003322:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003326:	4619      	mov	r1, r3
 8003328:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332c:	f000 fe5e 	bl	8003fec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8003330:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003334:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003336:	2302      	movs	r3, #2
 8003338:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333a:	2300      	movs	r3, #0
 800333c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003344:	2306      	movs	r3, #6
 8003346:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800334e:	4619      	mov	r1, r3
 8003350:	481e      	ldr	r0, [pc, #120]	; (80033cc <HAL_I2S_MspInit+0x230>)
 8003352:	f000 fe4b 	bl	8003fec <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Channel3;
 8003356:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 8003358:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <HAL_I2S_MspInit+0x238>)
 800335a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 800335c:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 800335e:	220f      	movs	r2, #15
 8003360:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 8003364:	2210      	movs	r2, #16
 8003366:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 800336a:	2200      	movs	r2, #0
 800336c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800336e:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 8003370:	2280      	movs	r2, #128	; 0x80
 8003372:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 8003376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800337a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800337c:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 800337e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003382:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 8003386:	2220      	movs	r2, #32
 8003388:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 800338c:	2200      	movs	r2, #0
 800338e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8003390:	480f      	ldr	r0, [pc, #60]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 8003392:	f000 faf9 	bl	8003988 <HAL_DMA_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_I2S_MspInit+0x204>
      Error_Handler();
 800339c:	f7ff fed4 	bl	8003148 <Error_Handler>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <HAL_I2S_MspInit+0x234>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6293      	str	r3, [r2, #40]	; 0x28
}
 80033ac:	bf00      	nop
 80033ae:	3788      	adds	r7, #136	; 0x88
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40003800 	.word	0x40003800
 80033b8:	40021000 	.word	0x40021000
 80033bc:	48000400 	.word	0x48000400
 80033c0:	20000104 	.word	0x20000104
 80033c4:	40020008 	.word	0x40020008
 80033c8:	40003c00 	.word	0x40003c00
 80033cc:	48000800 	.word	0x48000800
 80033d0:	20000164 	.word	0x20000164
 80033d4:	40020030 	.word	0x40020030

080033d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b09e      	sub	sp, #120	; 0x78
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033f0:	f107 0310 	add.w	r3, r7, #16
 80033f4:	2254      	movs	r2, #84	; 0x54
 80033f6:	2100      	movs	r1, #0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 fa53 	bl	80078a4 <memset>
  if(huart->Instance==LPUART1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a37      	ldr	r2, [pc, #220]	; (80034e0 <HAL_UART_MspInit+0x108>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d167      	bne.n	80034d8 <HAL_UART_MspInit+0x100>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003408:	2320      	movs	r3, #32
 800340a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800340c:	2300      	movs	r3, #0
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003410:	f107 0310 	add.w	r3, r7, #16
 8003414:	4618      	mov	r0, r3
 8003416:	f002 f875 	bl	8005504 <HAL_RCCEx_PeriphCLKConfig>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003420:	f7ff fe92 	bl	8003148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003424:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <HAL_UART_MspInit+0x10c>)
 8003426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003428:	4a2e      	ldr	r2, [pc, #184]	; (80034e4 <HAL_UART_MspInit+0x10c>)
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003430:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <HAL_UART_MspInit+0x10c>)
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	f003 0301 	and.w	r3, r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343c:	4b29      	ldr	r3, [pc, #164]	; (80034e4 <HAL_UART_MspInit+0x10c>)
 800343e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003440:	4a28      	ldr	r2, [pc, #160]	; (80034e4 <HAL_UART_MspInit+0x10c>)
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003448:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <HAL_UART_MspInit+0x10c>)
 800344a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8003454:	230c      	movs	r3, #12
 8003456:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003460:	2300      	movs	r3, #0
 8003462:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8003464:	230c      	movs	r3, #12
 8003466:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003468:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800346c:	4619      	mov	r1, r3
 800346e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003472:	f000 fdbb 	bl	8003fec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_UART_MspInit+0x110>)
 8003478:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <HAL_UART_MspInit+0x114>)
 800347a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <HAL_UART_MspInit+0x110>)
 800347e:	2223      	movs	r2, #35	; 0x23
 8003480:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_UART_MspInit+0x110>)
 8003484:	2210      	movs	r2, #16
 8003486:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003488:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <HAL_UART_MspInit+0x110>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800348e:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_UART_MspInit+0x110>)
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_UART_MspInit+0x110>)
 8003496:	2200      	movs	r2, #0
 8003498:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800349a:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <HAL_UART_MspInit+0x110>)
 800349c:	2200      	movs	r2, #0
 800349e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_UART_MspInit+0x110>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80034a6:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_UART_MspInit+0x110>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80034ac:	480e      	ldr	r0, [pc, #56]	; (80034e8 <HAL_UART_MspInit+0x110>)
 80034ae:	f000 fa6b 	bl	8003988 <HAL_DMA_Init>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80034b8:	f7ff fe46 	bl	8003148 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a0a      	ldr	r2, [pc, #40]	; (80034e8 <HAL_UART_MspInit+0x110>)
 80034c0:	679a      	str	r2, [r3, #120]	; 0x78
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <HAL_UART_MspInit+0x110>)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2100      	movs	r1, #0
 80034cc:	205b      	movs	r0, #91	; 0x5b
 80034ce:	f000 fa26 	bl	800391e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80034d2:	205b      	movs	r0, #91	; 0x5b
 80034d4:	f000 fa3d 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80034d8:	bf00      	nop
 80034da:	3778      	adds	r7, #120	; 0x78
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40008000 	.word	0x40008000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	20000254 	.word	0x20000254
 80034ec:	4002001c 	.word	0x4002001c

080034f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <NMI_Handler+0x4>

080034f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034fa:	e7fe      	b.n	80034fa <HardFault_Handler+0x4>

080034fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003500:	e7fe      	b.n	8003500 <MemManage_Handler+0x4>

08003502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003506:	e7fe      	b.n	8003506 <BusFault_Handler+0x4>

08003508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800350c:	e7fe      	b.n	800350c <UsageFault_Handler+0x4>

0800350e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800353c:	f000 f8f6 	bl	800372c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003540:	bf00      	nop
 8003542:	bd80      	pop	{r7, pc}

08003544 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <DMA1_Channel1_IRQHandler+0x10>)
 800354a:	f000 fc00 	bl	8003d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000104 	.word	0x20000104

08003558 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800355c:	4802      	ldr	r0, [pc, #8]	; (8003568 <DMA1_Channel2_IRQHandler+0x10>)
 800355e:	f000 fbf6 	bl	8003d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000254 	.word	0x20000254

0800356c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <DMA1_Channel3_IRQHandler+0x10>)
 8003572:	f000 fbec 	bl	8003d4e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000164 	.word	0x20000164

08003580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003584:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003588:	f000 feca 	bl	8004320 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}

08003590 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <LPUART1_IRQHandler+0x10>)
 8003596:	f002 ff91 	bl	80064bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200001c4 	.word	0x200001c4

080035a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <_sbrk+0x5c>)
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <_sbrk+0x60>)
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <_sbrk+0x64>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <_sbrk+0x64>)
 80035c2:	4a12      	ldr	r2, [pc, #72]	; (800360c <_sbrk+0x68>)
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <_sbrk+0x64>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d207      	bcs.n	80035e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d4:	f004 f92c 	bl	8007830 <__errno>
 80035d8:	4603      	mov	r3, r0
 80035da:	220c      	movs	r2, #12
 80035dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035e2:	e009      	b.n	80035f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <_sbrk+0x64>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <_sbrk+0x64>)
 80035f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20020000 	.word	0x20020000
 8003604:	00000400 	.word	0x00000400
 8003608:	2000b6b8 	.word	0x2000b6b8
 800360c:	2000b6d0 	.word	0x2000b6d0

08003610 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <SystemInit+0x20>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	4a05      	ldr	r2, [pc, #20]	; (8003630 <SystemInit+0x20>)
 800361c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003634:	480d      	ldr	r0, [pc, #52]	; (800366c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003636:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003638:	480d      	ldr	r0, [pc, #52]	; (8003670 <LoopForever+0x6>)
  ldr r1, =_edata
 800363a:	490e      	ldr	r1, [pc, #56]	; (8003674 <LoopForever+0xa>)
  ldr r2, =_sidata
 800363c:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <LoopForever+0xe>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003640:	e002      	b.n	8003648 <LoopCopyDataInit>

08003642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003646:	3304      	adds	r3, #4

08003648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800364c:	d3f9      	bcc.n	8003642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003650:	4c0b      	ldr	r4, [pc, #44]	; (8003680 <LoopForever+0x16>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003654:	e001      	b.n	800365a <LoopFillZerobss>

08003656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003658:	3204      	adds	r2, #4

0800365a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800365c:	d3fb      	bcc.n	8003656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800365e:	f7ff ffd7 	bl	8003610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003662:	f004 f8eb 	bl	800783c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003666:	f7ff f9b7 	bl	80029d8 <main>

0800366a <LoopForever>:

LoopForever:
    b LoopForever
 800366a:	e7fe      	b.n	800366a <LoopForever>
  ldr   r0, =_estack
 800366c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003674:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003678:	08009f90 	.word	0x08009f90
  ldr r2, =_sbss
 800367c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003680:	2000b6d0 	.word	0x2000b6d0

08003684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003684:	e7fe      	b.n	8003684 <ADC1_2_IRQHandler>

08003686 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003690:	2003      	movs	r0, #3
 8003692:	f000 f939 	bl	8003908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003696:	2000      	movs	r0, #0
 8003698:	f000 f80e 	bl	80036b8 <HAL_InitTick>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	71fb      	strb	r3, [r7, #7]
 80036a6:	e001      	b.n	80036ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036a8:	f7ff fd54 	bl	8003154 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036ac:	79fb      	ldrb	r3, [r7, #7]

}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80036c4:	4b16      	ldr	r3, [pc, #88]	; (8003720 <HAL_InitTick+0x68>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d022      	beq.n	8003712 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_InitTick+0x6c>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b13      	ldr	r3, [pc, #76]	; (8003720 <HAL_InitTick+0x68>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f944 	bl	800396e <HAL_SYSTICK_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10f      	bne.n	800370c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	d809      	bhi.n	8003706 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036f2:	2200      	movs	r2, #0
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036fa:	f000 f910 	bl	800391e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036fe:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <HAL_InitTick+0x70>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	e007      	b.n	8003716 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
 800370a:	e004      	b.n	8003716 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e001      	b.n	8003716 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003716:	7bfb      	ldrb	r3, [r7, #15]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000008 	.word	0x20000008
 8003724:	20000000 	.word	0x20000000
 8003728:	20000004 	.word	0x20000004

0800372c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_IncTick+0x1c>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b05      	ldr	r3, [pc, #20]	; (800374c <HAL_IncTick+0x20>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4413      	add	r3, r2
 800373a:	4a03      	ldr	r2, [pc, #12]	; (8003748 <HAL_IncTick+0x1c>)
 800373c:	6013      	str	r3, [r2, #0]
}
 800373e:	bf00      	nop
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	2000b6bc 	.word	0x2000b6bc
 800374c:	20000008 	.word	0x20000008

08003750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return uwTick;
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_GetTick+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	2000b6bc 	.word	0x2000b6bc

08003768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003778:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <__NVIC_SetPriorityGrouping+0x44>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003784:	4013      	ands	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800379a:	4a04      	ldr	r2, [pc, #16]	; (80037ac <__NVIC_SetPriorityGrouping+0x44>)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	60d3      	str	r3, [r2, #12]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr
 80037ac:	e000ed00 	.word	0xe000ed00

080037b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <__NVIC_GetPriorityGrouping+0x18>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	f003 0307 	and.w	r3, r3, #7
}
 80037be:	4618      	mov	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	db0b      	blt.n	80037f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	f003 021f 	and.w	r2, r3, #31
 80037e4:	4907      	ldr	r1, [pc, #28]	; (8003804 <__NVIC_EnableIRQ+0x38>)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2001      	movs	r0, #1
 80037ee:	fa00 f202 	lsl.w	r2, r0, r2
 80037f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	e000e100 	.word	0xe000e100

08003808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db0a      	blt.n	8003832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	490c      	ldr	r1, [pc, #48]	; (8003854 <__NVIC_SetPriority+0x4c>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	440b      	add	r3, r1
 800382c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003830:	e00a      	b.n	8003848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4908      	ldr	r1, [pc, #32]	; (8003858 <__NVIC_SetPriority+0x50>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	3b04      	subs	r3, #4
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	440b      	add	r3, r1
 8003846:	761a      	strb	r2, [r3, #24]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000e100 	.word	0xe000e100
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	2b04      	cmp	r3, #4
 8003878:	bf28      	it	cs
 800387a:	2304      	movcs	r3, #4
 800387c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3304      	adds	r3, #4
 8003882:	2b06      	cmp	r3, #6
 8003884:	d902      	bls.n	800388c <NVIC_EncodePriority+0x30>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3b03      	subs	r3, #3
 800388a:	e000      	b.n	800388e <NVIC_EncodePriority+0x32>
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	401a      	ands	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	43d9      	mvns	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	4313      	orrs	r3, r2
         );
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	; 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d4:	d301      	bcc.n	80038da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d6:	2301      	movs	r3, #1
 80038d8:	e00f      	b.n	80038fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <SysTick_Config+0x40>)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e2:	210f      	movs	r1, #15
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e8:	f7ff ff8e 	bl	8003808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <SysTick_Config+0x40>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f2:	4b04      	ldr	r3, [pc, #16]	; (8003904 <SysTick_Config+0x40>)
 80038f4:	2207      	movs	r2, #7
 80038f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	e000e010 	.word	0xe000e010

08003908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff29 	bl	8003768 <__NVIC_SetPriorityGrouping>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	4603      	mov	r3, r0
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800392c:	f7ff ff40 	bl	80037b0 <__NVIC_GetPriorityGrouping>
 8003930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	6978      	ldr	r0, [r7, #20]
 8003938:	f7ff ff90 	bl	800385c <NVIC_EncodePriority>
 800393c:	4602      	mov	r2, r0
 800393e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff5f 	bl	8003808 <__NVIC_SetPriority>
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff33 	bl	80037cc <__NVIC_EnableIRQ>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff ffa4 	bl	80038c4 <SysTick_Config>
 800397c:	4603      	mov	r3, r0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e08d      	b.n	8003ab6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	4b47      	ldr	r3, [pc, #284]	; (8003ac0 <HAL_DMA_Init+0x138>)
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d80f      	bhi.n	80039c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	4b45      	ldr	r3, [pc, #276]	; (8003ac4 <HAL_DMA_Init+0x13c>)
 80039ae:	4413      	add	r3, r2
 80039b0:	4a45      	ldr	r2, [pc, #276]	; (8003ac8 <HAL_DMA_Init+0x140>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	091b      	lsrs	r3, r3, #4
 80039b8:	009a      	lsls	r2, r3, #2
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a42      	ldr	r2, [pc, #264]	; (8003acc <HAL_DMA_Init+0x144>)
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
 80039c4:	e00e      	b.n	80039e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b40      	ldr	r3, [pc, #256]	; (8003ad0 <HAL_DMA_Init+0x148>)
 80039ce:	4413      	add	r3, r2
 80039d0:	4a3d      	ldr	r2, [pc, #244]	; (8003ac8 <HAL_DMA_Init+0x140>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	009a      	lsls	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a3c      	ldr	r2, [pc, #240]	; (8003ad4 <HAL_DMA_Init+0x14c>)
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa76 	bl	8003f28 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a44:	d102      	bne.n	8003a4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685a      	ldr	r2, [r3, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d010      	beq.n	8003a8c <HAL_DMA_Init+0x104>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d80c      	bhi.n	8003a8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa96 	bl	8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	e008      	b.n	8003a9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40020407 	.word	0x40020407
 8003ac4:	bffdfff8 	.word	0xbffdfff8
 8003ac8:	cccccccd 	.word	0xcccccccd
 8003acc:	40020000 	.word	0x40020000
 8003ad0:	bffdfbf8 	.word	0xbffdfbf8
 8003ad4:	40020400 	.word	0x40020400

08003ad8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_DMA_Start_IT+0x20>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e066      	b.n	8003bc6 <HAL_DMA_Start_IT+0xee>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d155      	bne.n	8003bb8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f9bb 	bl	8003eac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 020e 	orr.w	r2, r2, #14
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e00f      	b.n	8003b70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 020a 	orr.w	r2, r2, #10
 8003b6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d007      	beq.n	8003b8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0201 	orr.w	r2, r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e005      	b.n	8003bc4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b085      	sub	sp, #20
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d005      	beq.n	8003bf2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2204      	movs	r2, #4
 8003bea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	e037      	b.n	8003c62 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 020e 	bic.w	r2, r2, #14
 8003c00:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c10:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f003 021f 	and.w	r2, r3, #31
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	2101      	movs	r1, #1
 8003c30:	fa01 f202 	lsl.w	r2, r1, r2
 8003c34:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c3e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00c      	beq.n	8003c62 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c56:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c60:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d00d      	beq.n	8003cb4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e047      	b.n	8003d44 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 020e 	bic.w	r2, r2, #14
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00c      	beq.n	8003d24 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
    }
  }
  return status;
 8003d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	2204      	movs	r2, #4
 8003d70:	409a      	lsls	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4013      	ands	r3, r2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d026      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x7a>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d021      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d107      	bne.n	8003da2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0204 	bic.w	r2, r2, #4
 8003da0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	f003 021f 	and.w	r2, r3, #31
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	2104      	movs	r1, #4
 8003db0:	fa01 f202 	lsl.w	r2, r1, r2
 8003db4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d071      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003dc6:	e06c      	b.n	8003ea2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02e      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d029      	beq.n	8003e3a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 020a 	bic.w	r2, r2, #10
 8003e02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	f003 021f 	and.w	r2, r3, #31
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	2102      	movs	r1, #2
 8003e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e1e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d038      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e38:	e033      	b.n	8003ea2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	2208      	movs	r2, #8
 8003e44:	409a      	lsls	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d02a      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d025      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 020e 	bic.w	r2, r2, #14
 8003e66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	f003 021f 	and.w	r2, r3, #31
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2101      	movs	r1, #1
 8003e76:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ea2:	bf00      	nop
 8003ea4:	bf00      	nop
}
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ec2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ed4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f003 021f 	and.w	r2, r3, #31
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b10      	cmp	r3, #16
 8003ef8:	d108      	bne.n	8003f0c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f0a:	e007      	b.n	8003f1c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d802      	bhi.n	8003f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003f3c:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e001      	b.n	8003f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f44:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3b08      	subs	r3, #8
 8003f52:	4a12      	ldr	r2, [pc, #72]	; (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	009a      	lsls	r2, r3, #2
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	461a      	mov	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a0b      	ldr	r2, [pc, #44]	; (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f72:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40020407 	.word	0x40020407
 8003f94:	40020800 	.word	0x40020800
 8003f98:	40020820 	.word	0x40020820
 8003f9c:	cccccccd 	.word	0xcccccccd
 8003fa0:	40020880 	.word	0x40020880

08003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003fc6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	1000823f 	.word	0x1000823f
 8003fe8:	40020940 	.word	0x40020940

08003fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ffa:	e15a      	b.n	80042b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	fa01 f303 	lsl.w	r3, r1, r3
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 814c 	beq.w	80042ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d005      	beq.n	800402c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004028:	2b02      	cmp	r3, #2
 800402a:	d130      	bne.n	800408e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	2203      	movs	r2, #3
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004062:	2201      	movs	r2, #1
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4013      	ands	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	091b      	lsrs	r3, r3, #4
 8004078:	f003 0201 	and.w	r2, r3, #1
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b03      	cmp	r3, #3
 8004098:	d017      	beq.n	80040ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	2203      	movs	r2, #3
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	43db      	mvns	r3, r3
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	4013      	ands	r3, r2
 80040b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d123      	bne.n	800411e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	08da      	lsrs	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	3208      	adds	r2, #8
 80040de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	220f      	movs	r2, #15
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	691a      	ldr	r2, [r3, #16]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	08da      	lsrs	r2, r3, #3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3208      	adds	r2, #8
 8004118:	6939      	ldr	r1, [r7, #16]
 800411a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	2203      	movs	r2, #3
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43db      	mvns	r3, r3
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4013      	ands	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f003 0203 	and.w	r2, r3, #3
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4313      	orrs	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 80a6 	beq.w	80042ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004160:	4b5b      	ldr	r3, [pc, #364]	; (80042d0 <HAL_GPIO_Init+0x2e4>)
 8004162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004164:	4a5a      	ldr	r2, [pc, #360]	; (80042d0 <HAL_GPIO_Init+0x2e4>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	6613      	str	r3, [r2, #96]	; 0x60
 800416c:	4b58      	ldr	r3, [pc, #352]	; (80042d0 <HAL_GPIO_Init+0x2e4>)
 800416e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004178:	4a56      	ldr	r2, [pc, #344]	; (80042d4 <HAL_GPIO_Init+0x2e8>)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	089b      	lsrs	r3, r3, #2
 800417e:	3302      	adds	r3, #2
 8004180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004184:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 0303 	and.w	r3, r3, #3
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	220f      	movs	r2, #15
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041a2:	d01f      	beq.n	80041e4 <HAL_GPIO_Init+0x1f8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a4c      	ldr	r2, [pc, #304]	; (80042d8 <HAL_GPIO_Init+0x2ec>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d019      	beq.n	80041e0 <HAL_GPIO_Init+0x1f4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a4b      	ldr	r2, [pc, #300]	; (80042dc <HAL_GPIO_Init+0x2f0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_GPIO_Init+0x1f0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a4a      	ldr	r2, [pc, #296]	; (80042e0 <HAL_GPIO_Init+0x2f4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00d      	beq.n	80041d8 <HAL_GPIO_Init+0x1ec>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a49      	ldr	r2, [pc, #292]	; (80042e4 <HAL_GPIO_Init+0x2f8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <HAL_GPIO_Init+0x1e8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a48      	ldr	r2, [pc, #288]	; (80042e8 <HAL_GPIO_Init+0x2fc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d101      	bne.n	80041d0 <HAL_GPIO_Init+0x1e4>
 80041cc:	2305      	movs	r3, #5
 80041ce:	e00a      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041d0:	2306      	movs	r3, #6
 80041d2:	e008      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041d4:	2304      	movs	r3, #4
 80041d6:	e006      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041d8:	2303      	movs	r3, #3
 80041da:	e004      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041dc:	2302      	movs	r3, #2
 80041de:	e002      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041e0:	2301      	movs	r3, #1
 80041e2:	e000      	b.n	80041e6 <HAL_GPIO_Init+0x1fa>
 80041e4:	2300      	movs	r3, #0
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	f002 0203 	and.w	r2, r2, #3
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	4093      	lsls	r3, r2
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041f6:	4937      	ldr	r1, [pc, #220]	; (80042d4 <HAL_GPIO_Init+0x2e8>)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	089b      	lsrs	r3, r3, #2
 80041fc:	3302      	adds	r3, #2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004204:	4b39      	ldr	r3, [pc, #228]	; (80042ec <HAL_GPIO_Init+0x300>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	43db      	mvns	r3, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004228:	4a30      	ldr	r2, [pc, #192]	; (80042ec <HAL_GPIO_Init+0x300>)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800422e:	4b2f      	ldr	r3, [pc, #188]	; (80042ec <HAL_GPIO_Init+0x300>)
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004252:	4a26      	ldr	r2, [pc, #152]	; (80042ec <HAL_GPIO_Init+0x300>)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004258:	4b24      	ldr	r3, [pc, #144]	; (80042ec <HAL_GPIO_Init+0x300>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	43db      	mvns	r3, r3
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4013      	ands	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800427c:	4a1b      	ldr	r2, [pc, #108]	; (80042ec <HAL_GPIO_Init+0x300>)
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004282:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <HAL_GPIO_Init+0x300>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	43db      	mvns	r3, r3
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4013      	ands	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80042a6:	4a11      	ldr	r2, [pc, #68]	; (80042ec <HAL_GPIO_Init+0x300>)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3301      	adds	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f47f ae9d 	bne.w	8003ffc <HAL_GPIO_Init+0x10>
  }
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40010000 	.word	0x40010000
 80042d8:	48000400 	.word	0x48000400
 80042dc:	48000800 	.word	0x48000800
 80042e0:	48000c00 	.word	0x48000c00
 80042e4:	48001000 	.word	0x48001000
 80042e8:	48001400 	.word	0x48001400
 80042ec:	40010400 	.word	0x40010400

080042f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	807b      	strh	r3, [r7, #2]
 80042fc:	4613      	mov	r3, r2
 80042fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004300:	787b      	ldrb	r3, [r7, #1]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004306:	887a      	ldrh	r2, [r7, #2]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800430c:	e002      	b.n	8004314 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	4603      	mov	r3, r0
 8004328:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800432c:	695a      	ldr	r2, [r3, #20]
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	4013      	ands	r3, r2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d006      	beq.n	8004344 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004336:	4a05      	ldr	r2, [pc, #20]	; (800434c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	4618      	mov	r0, r3
 8004340:	f000 f806 	bl	8004350 <HAL_GPIO_EXTI_Callback>
  }
}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40010400 	.word	0x40010400

08004350 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
	...

08004368 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0d0      	b.n	800451c <HAL_I2S_Init+0x1b4>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d106      	bne.n	8004394 <HAL_I2S_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7fe ff04 	bl	800319c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80043aa:	f023 030f 	bic.w	r3, r3, #15
 80043ae:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2202      	movs	r2, #2
 80043b6:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d061      	beq.n	8004484 <HAL_I2S_Init+0x11c>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <HAL_I2S_Init+0x66>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80043c8:	2310      	movs	r3, #16
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	e001      	b.n	80043d2 <HAL_I2S_Init+0x6a>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80043ce:	2320      	movs	r3, #32
 80043d0:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d802      	bhi.n	80043e0 <HAL_I2S_Init+0x78>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80043e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80043e4:	f001 fadc 	bl	80059a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80043e8:	60f8      	str	r0, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043f2:	d125      	bne.n	8004440 <HAL_I2S_Init+0xd8>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d010      	beq.n	800441e <HAL_I2S_Init+0xb6>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	fbb2 f2f3 	udiv	r2, r2, r3
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	461a      	mov	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	fbb2 f3f3 	udiv	r3, r2, r3
 8004418:	3305      	adds	r3, #5
 800441a:	613b      	str	r3, [r7, #16]
 800441c:	e01f      	b.n	800445e <HAL_I2S_Init+0xf6>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	fbb2 f2f3 	udiv	r2, r2, r3
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	461a      	mov	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	fbb2 f3f3 	udiv	r3, r2, r3
 800443a:	3305      	adds	r3, #5
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e00e      	b.n	800445e <HAL_I2S_Init+0xf6>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	fbb2 f2f3 	udiv	r2, r2, r3
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	461a      	mov	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	3305      	adds	r3, #5
 800445c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4a30      	ldr	r2, [pc, #192]	; (8004524 <HAL_I2S_Init+0x1bc>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	08db      	lsrs	r3, r3, #3
 8004468:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	021b      	lsls	r3, r3, #8
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e003      	b.n	800448c <HAL_I2S_Init+0x124>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004484:	2302      	movs	r3, #2
 8004486:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d902      	bls.n	8004498 <HAL_I2S_Init+0x130>
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	2bff      	cmp	r3, #255	; 0xff
 8004496:	d907      	bls.n	80044a8 <HAL_I2S_Init+0x140>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	639a      	str	r2, [r3, #56]	; 0x38
    return  HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e039      	b.n	800451c <HAL_I2S_Init+0x1b4>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	ea42 0103 	orr.w	r1, r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044c6:	f023 030f 	bic.w	r3, r3, #15
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6851      	ldr	r1, [r2, #4]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6892      	ldr	r2, [r2, #8]
 80044d2:	4311      	orrs	r1, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	68d2      	ldr	r2, [r2, #12]
 80044d8:	4311      	orrs	r1, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6992      	ldr	r2, [r2, #24]
 80044de:	430a      	orrs	r2, r1
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ea:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b30      	cmp	r3, #48	; 0x30
 80044f2:	d003      	beq.n	80044fc <HAL_I2S_Init+0x194>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2bb0      	cmp	r3, #176	; 0xb0
 80044fa:	d107      	bne.n	800450c <HAL_I2S_Init+0x1a4>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800450a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	cccccccd 	.word	0xcccccccd

08004528 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <HAL_I2S_Transmit_DMA+0x1a>
 800453c:	88fb      	ldrh	r3, [r7, #6]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e08e      	b.n	8004664 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b01      	cmp	r3, #1
 8004550:	d101      	bne.n	8004556 <HAL_I2S_Transmit_DMA+0x2e>
 8004552:	2302      	movs	r3, #2
 8004554:	e086      	b.n	8004664 <HAL_I2S_Transmit_DMA+0x13c>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b01      	cmp	r3, #1
 8004568:	d005      	beq.n	8004576 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 8004572:	2302      	movs	r3, #2
 8004574:	e076      	b.n	8004664 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2203      	movs	r2, #3
 800457a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pTxBuffPtr = pData;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	61da      	str	r2, [r3, #28]

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d002      	beq.n	80045a2 <HAL_I2S_Transmit_DMA+0x7a>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d10a      	bne.n	80045b8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80045a2:	88fb      	ldrh	r3, [r7, #6]
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = (Size << 1U);
 80045ac:	88fb      	ldrh	r3, [r7, #6]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	845a      	strh	r2, [r3, #34]	; 0x22
 80045b6:	e005      	b.n	80045c4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	841a      	strh	r2, [r3, #32]
    hi2s->TxXferCount = Size;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	88fa      	ldrh	r2, [r7, #6]
 80045c2:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	4a28      	ldr	r2, [pc, #160]	; (800466c <HAL_I2S_Transmit_DMA+0x144>)
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a27      	ldr	r2, [pc, #156]	; (8004670 <HAL_I2S_Transmit_DMA+0x148>)
 80045d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	4a26      	ldr	r2, [pc, #152]	; (8004674 <HAL_I2S_Transmit_DMA+0x14c>)
 80045da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                                 (uint32_t)hi2s->pTxBuffPtr,
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	69db      	ldr	r3, [r3, #28]
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80045e4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80045ec:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8c1b      	ldrh	r3, [r3, #32]
 80045f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80045f4:	f7ff fa70 	bl	8003ad8 <HAL_DMA_Start_IT>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00f      	beq.n	800461e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	f043 0208 	orr.w	r2, r3, #8
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    __HAL_UNLOCK(hi2s);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e022      	b.n	8004664 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d107      	bne.n	800463c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800463a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d107      	bne.n	800465a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f042 0202 	orr.w	r2, r2, #2
 8004658:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	0800486f 	.word	0x0800486f
 8004670:	0800482d 	.word	0x0800482d
 8004674:	080048e9 	.word	0x080048e9

08004678 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b086      	sub	sp, #24
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_I2S_Receive_DMA+0x1a>
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e0a1      	b.n	80047da <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_I2S_Receive_DMA+0x2e>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e099      	b.n	80047da <HAL_I2S_Receive_DMA+0x162>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hi2s->State != HAL_I2S_STATE_READY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d005      	beq.n	80046c6 <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	e089      	b.n	80047da <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2204      	movs	r2, #4
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38
  hi2s->pRxBuffPtr = pData;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d002      	beq.n	80046f2 <HAL_I2S_Receive_DMA+0x7a>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d10a      	bne.n	8004708 <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount = (Size << 1U);
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004706:	e005      	b.n	8004714 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->RxXferCount = Size;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	88fa      	ldrh	r2, [r7, #6]
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	4a32      	ldr	r2, [pc, #200]	; (80047e4 <HAL_I2S_Receive_DMA+0x16c>)
 800471a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <HAL_I2S_Receive_DMA+0x170>)
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	4a30      	ldr	r2, [pc, #192]	; (80047ec <HAL_I2S_Receive_DMA+0x174>)
 800472a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800473a:	d10a      	bne.n	8004752 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	613b      	str	r3, [r7, #16]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	613b      	str	r3, [r7, #16]
 8004750:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	4619      	mov	r1, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004768:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800476a:	f7ff f9b5 	bl	8003ad8 <HAL_DMA_Start_IT>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00f      	beq.n	8004794 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004778:	f043 0208 	orr.w	r2, r3, #8
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    __HAL_UNLOCK(hi2s);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e022      	b.n	80047da <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d107      	bne.n	80047b2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047b0:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	080048cd 	.word	0x080048cd
 80047e8:	0800488b 	.word	0x0800488b
 80047ec:	080048e9 	.word	0x080048e9

080047f0 <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004838:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10e      	bne.n	8004860 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0202 	bic.w	r2, r2, #2
 8004850:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff ffcf 	bl	8004804 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004866:	bf00      	nop
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f7ff ffb7 	bl	80047f0 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b084      	sub	sp, #16
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10e      	bne.n	80048be <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0201 	bic.w	r2, r2, #1
 80048ae:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7fe fc2e 	bl	8003120 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7fe fc0c 	bl	80030f8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 0203 	bic.w	r2, r2, #3
 8004904:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	845a      	strh	r2, [r3, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	855a      	strh	r2, [r3, #42]	; 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	f043 0208 	orr.w	r2, r3, #8
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff ff76 	bl	8004818 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d141      	bne.n	80049c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004942:	4b4b      	ldr	r3, [pc, #300]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494e:	d131      	bne.n	80049b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004950:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004956:	4a46      	ldr	r2, [pc, #280]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800495c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004960:	4b43      	ldr	r3, [pc, #268]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004968:	4a41      	ldr	r2, [pc, #260]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800496e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004970:	4b40      	ldr	r3, [pc, #256]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2232      	movs	r2, #50	; 0x32
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	4a3f      	ldr	r2, [pc, #252]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800497c:	fba2 2303 	umull	r2, r3, r2, r3
 8004980:	0c9b      	lsrs	r3, r3, #18
 8004982:	3301      	adds	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004986:	e002      	b.n	800498e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3b01      	subs	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800498e:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499a:	d102      	bne.n	80049a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f2      	bne.n	8004988 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049a2:	4b33      	ldr	r3, [pc, #204]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ae:	d158      	bne.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e057      	b.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049b4:	4b2e      	ldr	r3, [pc, #184]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ba:	4a2d      	ldr	r2, [pc, #180]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049c4:	e04d      	b.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049cc:	d141      	bne.n	8004a52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ce:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049da:	d131      	bne.n	8004a40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049dc:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049e2:	4a23      	ldr	r2, [pc, #140]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049ec:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049f4:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049fc:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2232      	movs	r2, #50	; 0x32
 8004a02:	fb02 f303 	mul.w	r3, r2, r3
 8004a06:	4a1c      	ldr	r2, [pc, #112]	; (8004a78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004a08:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0c:	0c9b      	lsrs	r3, r3, #18
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a12:	e002      	b.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d102      	bne.n	8004a2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f2      	bne.n	8004a14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a2e:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3a:	d112      	bne.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e011      	b.n	8004a64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a46:	4a0a      	ldr	r2, [pc, #40]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a50:	e007      	b.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a5a:	4a05      	ldr	r2, [pc, #20]	; (8004a70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	40007000 	.word	0x40007000
 8004a74:	20000000 	.word	0x20000000
 8004a78:	431bde83 	.word	0x431bde83

08004a7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a04      	ldr	r2, [pc, #16]	; (8004a98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a8a:	6093      	str	r3, [r2, #8]
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	40007000 	.word	0x40007000

08004a9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e306      	b.n	80050bc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d075      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aba:	4b97      	ldr	r3, [pc, #604]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ac4:	4b94      	ldr	r3, [pc, #592]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	d102      	bne.n	8004ada <HAL_RCC_OscConfig+0x3e>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b03      	cmp	r3, #3
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x44>
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	4b8d      	ldr	r3, [pc, #564]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05b      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x108>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d157      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e2e1      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d106      	bne.n	8004b10 <HAL_RCC_OscConfig+0x74>
 8004b02:	4b85      	ldr	r3, [pc, #532]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a84      	ldr	r2, [pc, #528]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01d      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x98>
 8004b1a:	4b7f      	ldr	r3, [pc, #508]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a7e      	ldr	r2, [pc, #504]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b7c      	ldr	r3, [pc, #496]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a7b      	ldr	r2, [pc, #492]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0xb0>
 8004b34:	4b78      	ldr	r3, [pc, #480]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a77      	ldr	r2, [pc, #476]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b75      	ldr	r3, [pc, #468]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a74      	ldr	r2, [pc, #464]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d013      	beq.n	8004b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fe fdfc 	bl	8003750 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fe fdf8 	bl	8003750 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e2a6      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b6e:	4b6a      	ldr	r3, [pc, #424]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0xc0>
 8004b7a:	e014      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fde8 	bl	8003750 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fe fde4 	bl	8003750 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e292      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b96:	4b60      	ldr	r3, [pc, #384]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f0      	bne.n	8004b84 <HAL_RCC_OscConfig+0xe8>
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d075      	beq.n	8004c9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bb2:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bbc:	4b56      	ldr	r3, [pc, #344]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b0c      	cmp	r3, #12
 8004bca:	d102      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x136>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d002      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x13c>
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d11f      	bne.n	8004c18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd8:	4b4f      	ldr	r3, [pc, #316]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x154>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e265      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bf0:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	061b      	lsls	r3, r3, #24
 8004bfe:	4946      	ldr	r1, [pc, #280]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c04:	4b45      	ldr	r3, [pc, #276]	; (8004d1c <HAL_RCC_OscConfig+0x280>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe fd55 	bl	80036b8 <HAL_InitTick>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d043      	beq.n	8004c9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e251      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c20:	4b3d      	ldr	r3, [pc, #244]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a3c      	ldr	r2, [pc, #240]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fe fd90 	bl	8003750 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fe fd8c 	bl	8003750 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e23a      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c46:	4b34      	ldr	r3, [pc, #208]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b31      	ldr	r3, [pc, #196]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	061b      	lsls	r3, r3, #24
 8004c60:	492d      	ldr	r1, [pc, #180]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	604b      	str	r3, [r1, #4]
 8004c66:	e01a      	b.n	8004c9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2a      	ldr	r2, [pc, #168]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004c6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fe fd6c 	bl	8003750 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fe fd68 	bl	8003750 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e216      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c8e:	4b22      	ldr	r3, [pc, #136]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1e0>
 8004c9a:	e000      	b.n	8004c9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d041      	beq.n	8004d2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01c      	beq.n	8004cec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb2:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc2:	f7fe fd45 	bl	8003750 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cca:	f7fe fd41 	bl	8003750 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e1ef      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ef      	beq.n	8004cca <HAL_RCC_OscConfig+0x22e>
 8004cea:	e020      	b.n	8004d2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <HAL_RCC_OscConfig+0x27c>)
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fe fd28 	bl	8003750 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d02:	e00d      	b.n	8004d20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d04:	f7fe fd24 	bl	8003750 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d906      	bls.n	8004d20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e1d2      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d20:	4b8c      	ldr	r3, [pc, #560]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1ea      	bne.n	8004d04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0304 	and.w	r3, r3, #4
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80a6 	beq.w	8004e88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d40:	4b84      	ldr	r3, [pc, #528]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_OscConfig+0x2b4>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <HAL_RCC_OscConfig+0x2b6>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00d      	beq.n	8004d72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	4b7f      	ldr	r3, [pc, #508]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5a:	4a7e      	ldr	r2, [pc, #504]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d60:	6593      	str	r3, [r2, #88]	; 0x58
 8004d62:	4b7c      	ldr	r3, [pc, #496]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d72:	4b79      	ldr	r3, [pc, #484]	; (8004f58 <HAL_RCC_OscConfig+0x4bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d118      	bne.n	8004db0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d7e:	4b76      	ldr	r3, [pc, #472]	; (8004f58 <HAL_RCC_OscConfig+0x4bc>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a75      	ldr	r2, [pc, #468]	; (8004f58 <HAL_RCC_OscConfig+0x4bc>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8a:	f7fe fce1 	bl	8003750 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d90:	e008      	b.n	8004da4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d92:	f7fe fcdd 	bl	8003750 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e18b      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004da4:	4b6c      	ldr	r3, [pc, #432]	; (8004f58 <HAL_RCC_OscConfig+0x4bc>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0f0      	beq.n	8004d92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d108      	bne.n	8004dca <HAL_RCC_OscConfig+0x32e>
 8004db8:	4b66      	ldr	r3, [pc, #408]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbe:	4a65      	ldr	r2, [pc, #404]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004dc0:	f043 0301 	orr.w	r3, r3, #1
 8004dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dc8:	e024      	b.n	8004e14 <HAL_RCC_OscConfig+0x378>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b05      	cmp	r3, #5
 8004dd0:	d110      	bne.n	8004df4 <HAL_RCC_OscConfig+0x358>
 8004dd2:	4b60      	ldr	r3, [pc, #384]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd8:	4a5e      	ldr	r2, [pc, #376]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004dda:	f043 0304 	orr.w	r3, r3, #4
 8004dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004de2:	4b5c      	ldr	r3, [pc, #368]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de8:	4a5a      	ldr	r2, [pc, #360]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004df2:	e00f      	b.n	8004e14 <HAL_RCC_OscConfig+0x378>
 8004df4:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dfa:	4a56      	ldr	r2, [pc, #344]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e04:	4b53      	ldr	r3, [pc, #332]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0a:	4a52      	ldr	r2, [pc, #328]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004e0c:	f023 0304 	bic.w	r3, r3, #4
 8004e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d016      	beq.n	8004e4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1c:	f7fe fc98 	bl	8003750 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e24:	f7fe fc94 	bl	8003750 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e140      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e3a:	4b46      	ldr	r3, [pc, #280]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ed      	beq.n	8004e24 <HAL_RCC_OscConfig+0x388>
 8004e48:	e015      	b.n	8004e76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fe fc81 	bl	8003750 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fe fc7d 	bl	8003750 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e129      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e68:	4b3a      	ldr	r3, [pc, #232]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1ed      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e76:	7ffb      	ldrb	r3, [r7, #31]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7c:	4b35      	ldr	r3, [pc, #212]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e80:	4a34      	ldr	r2, [pc, #208]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d03c      	beq.n	8004f0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d01c      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e9c:	4b2d      	ldr	r3, [pc, #180]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ea2:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004ea4:	f043 0301 	orr.w	r3, r3, #1
 8004ea8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fe fc50 	bl	8003750 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eb4:	f7fe fc4c 	bl	8003750 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e0fa      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ec6:	4b23      	ldr	r3, [pc, #140]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ef      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x418>
 8004ed4:	e01b      	b.n	8004f0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ed6:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004ede:	f023 0301 	bic.w	r3, r3, #1
 8004ee2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee6:	f7fe fc33 	bl	8003750 <HAL_GetTick>
 8004eea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eec:	e008      	b.n	8004f00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eee:	f7fe fc2f 	bl	8003750 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e0dd      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f00:	4b14      	ldr	r3, [pc, #80]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1ef      	bne.n	8004eee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80d1 	beq.w	80050ba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f18:	4b0e      	ldr	r3, [pc, #56]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	f000 808b 	beq.w	800503c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	d15e      	bne.n	8004fec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a08      	ldr	r2, [pc, #32]	; (8004f54 <HAL_RCC_OscConfig+0x4b8>)
 8004f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3a:	f7fe fc09 	bl	8003750 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f40:	e00c      	b.n	8004f5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f42:	f7fe fc05 	bl	8003750 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d905      	bls.n	8004f5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e0b3      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
 8004f54:	40021000 	.word	0x40021000
 8004f58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f5c:	4b59      	ldr	r3, [pc, #356]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ec      	bne.n	8004f42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f68:	4b56      	ldr	r3, [pc, #344]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	4b56      	ldr	r3, [pc, #344]	; (80050c8 <HAL_RCC_OscConfig+0x62c>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6a11      	ldr	r1, [r2, #32]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f78:	3a01      	subs	r2, #1
 8004f7a:	0112      	lsls	r2, r2, #4
 8004f7c:	4311      	orrs	r1, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004f82:	0212      	lsls	r2, r2, #8
 8004f84:	4311      	orrs	r1, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f8a:	0852      	lsrs	r2, r2, #1
 8004f8c:	3a01      	subs	r2, #1
 8004f8e:	0552      	lsls	r2, r2, #21
 8004f90:	4311      	orrs	r1, r2
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f96:	0852      	lsrs	r2, r2, #1
 8004f98:	3a01      	subs	r2, #1
 8004f9a:	0652      	lsls	r2, r2, #25
 8004f9c:	4311      	orrs	r1, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fa2:	06d2      	lsls	r2, r2, #27
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	4947      	ldr	r1, [pc, #284]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fac:	4b45      	ldr	r3, [pc, #276]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a44      	ldr	r2, [pc, #272]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fb8:	4b42      	ldr	r3, [pc, #264]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	4a41      	ldr	r2, [pc, #260]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fe fbc4 	bl	8003750 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fe fbc0 	bl	8003750 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e06e      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fde:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0f0      	beq.n	8004fcc <HAL_RCC_OscConfig+0x530>
 8004fea:	e066      	b.n	80050ba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fec:	4b35      	ldr	r3, [pc, #212]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a34      	ldr	r2, [pc, #208]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ff6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ff8:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4a31      	ldr	r2, [pc, #196]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8004ffe:	f023 0303 	bic.w	r3, r3, #3
 8005002:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005004:	4b2f      	ldr	r3, [pc, #188]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a2e      	ldr	r2, [pc, #184]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 800500a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800500e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005012:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fe fb9c 	bl	8003750 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800501c:	f7fe fb98 	bl	8003750 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e046      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800502e:	4b25      	ldr	r3, [pc, #148]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0x580>
 800503a:	e03e      	b.n	80050ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e039      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005048:	4b1e      	ldr	r3, [pc, #120]	; (80050c4 <HAL_RCC_OscConfig+0x628>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f003 0203 	and.w	r2, r3, #3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a1b      	ldr	r3, [r3, #32]
 8005058:	429a      	cmp	r2, r3
 800505a:	d12c      	bne.n	80050b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	3b01      	subs	r3, #1
 8005068:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506a:	429a      	cmp	r2, r3
 800506c:	d123      	bne.n	80050b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800507a:	429a      	cmp	r2, r3
 800507c:	d11b      	bne.n	80050b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d113      	bne.n	80050b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	3b01      	subs	r3, #1
 800509c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800509e:	429a      	cmp	r2, r3
 80050a0:	d109      	bne.n	80050b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	3b01      	subs	r3, #1
 80050b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d001      	beq.n	80050ba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40021000 	.word	0x40021000
 80050c8:	019f800c 	.word	0x019f800c

080050cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050d6:	2300      	movs	r3, #0
 80050d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e11e      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050e4:	4b91      	ldr	r3, [pc, #580]	; (800532c <HAL_RCC_ClockConfig+0x260>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d910      	bls.n	8005114 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b8e      	ldr	r3, [pc, #568]	; (800532c <HAL_RCC_ClockConfig+0x260>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 020f 	bic.w	r2, r3, #15
 80050fa:	498c      	ldr	r1, [pc, #560]	; (800532c <HAL_RCC_ClockConfig+0x260>)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b8a      	ldr	r3, [pc, #552]	; (800532c <HAL_RCC_ClockConfig+0x260>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e106      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d073      	beq.n	8005208 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d129      	bne.n	800517c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005128:	4b81      	ldr	r3, [pc, #516]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0f4      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005138:	f000 f99e 	bl	8005478 <RCC_GetSysClockFreqFromPLLSource>
 800513c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4a7c      	ldr	r2, [pc, #496]	; (8005334 <HAL_RCC_ClockConfig+0x268>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d93f      	bls.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005146:	4b7a      	ldr	r3, [pc, #488]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800515a:	2b00      	cmp	r3, #0
 800515c:	d033      	beq.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005162:	2b00      	cmp	r3, #0
 8005164:	d12f      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005166:	4b72      	ldr	r3, [pc, #456]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800516e:	4a70      	ldr	r2, [pc, #448]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005174:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	e024      	b.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b02      	cmp	r3, #2
 8005182:	d107      	bne.n	8005194 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005184:	4b6a      	ldr	r3, [pc, #424]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e0c6      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005194:	4b66      	ldr	r3, [pc, #408]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e0be      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80051a4:	f000 f8ce 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	4a61      	ldr	r2, [pc, #388]	; (8005334 <HAL_RCC_ClockConfig+0x268>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d909      	bls.n	80051c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051b2:	4b5f      	ldr	r3, [pc, #380]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ba:	4a5d      	ldr	r2, [pc, #372]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051c6:	4b5a      	ldr	r3, [pc, #360]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f023 0203 	bic.w	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4957      	ldr	r1, [pc, #348]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d8:	f7fe faba 	bl	8003750 <HAL_GetTick>
 80051dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051e0:	f7fe fab6 	bl	8003750 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e095      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f6:	4b4e      	ldr	r3, [pc, #312]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 020c 	and.w	r2, r3, #12
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	429a      	cmp	r2, r3
 8005206:	d1eb      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d023      	beq.n	800525c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d005      	beq.n	800522c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005220:	4b43      	ldr	r3, [pc, #268]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a42      	ldr	r2, [pc, #264]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005226:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800522a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d007      	beq.n	8005248 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005238:	4b3d      	ldr	r3, [pc, #244]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005240:	4a3b      	ldr	r2, [pc, #236]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005242:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005246:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005248:	4b39      	ldr	r3, [pc, #228]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	4936      	ldr	r1, [pc, #216]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
 800525a:	e008      	b.n	800526e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	2b80      	cmp	r3, #128	; 0x80
 8005260:	d105      	bne.n	800526e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005262:	4b33      	ldr	r3, [pc, #204]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	4a32      	ldr	r2, [pc, #200]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 8005268:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800526c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800526e:	4b2f      	ldr	r3, [pc, #188]	; (800532c <HAL_RCC_ClockConfig+0x260>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d21d      	bcs.n	80052b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527c:	4b2b      	ldr	r3, [pc, #172]	; (800532c <HAL_RCC_ClockConfig+0x260>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 020f 	bic.w	r2, r3, #15
 8005284:	4929      	ldr	r1, [pc, #164]	; (800532c <HAL_RCC_ClockConfig+0x260>)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800528c:	f7fe fa60 	bl	8003750 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005292:	e00a      	b.n	80052aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005294:	f7fe fa5c 	bl	8003750 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e03b      	b.n	8005322 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052aa:	4b20      	ldr	r3, [pc, #128]	; (800532c <HAL_RCC_ClockConfig+0x260>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 030f 	and.w	r3, r3, #15
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d1ed      	bne.n	8005294 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c4:	4b1a      	ldr	r3, [pc, #104]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	4917      	ldr	r1, [pc, #92]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052e2:	4b13      	ldr	r3, [pc, #76]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	490f      	ldr	r1, [pc, #60]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052f6:	f000 f825 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 80052fa:	4602      	mov	r2, r0
 80052fc:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <HAL_RCC_ClockConfig+0x264>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	091b      	lsrs	r3, r3, #4
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	490c      	ldr	r1, [pc, #48]	; (8005338 <HAL_RCC_ClockConfig+0x26c>)
 8005308:	5ccb      	ldrb	r3, [r1, r3]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	fa22 f303 	lsr.w	r3, r2, r3
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <HAL_RCC_ClockConfig+0x270>)
 8005314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_RCC_ClockConfig+0x274>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe f9cc 	bl	80036b8 <HAL_InitTick>
 8005320:	4603      	mov	r3, r0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40022000 	.word	0x40022000
 8005330:	40021000 	.word	0x40021000
 8005334:	04c4b400 	.word	0x04c4b400
 8005338:	08009cf8 	.word	0x08009cf8
 800533c:	20000000 	.word	0x20000000
 8005340:	20000004 	.word	0x20000004

08005344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800534a:	4b2c      	ldr	r3, [pc, #176]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
 8005352:	2b04      	cmp	r3, #4
 8005354:	d102      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005356:	4b2a      	ldr	r3, [pc, #168]	; (8005400 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e047      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800535c:	4b27      	ldr	r3, [pc, #156]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 030c 	and.w	r3, r3, #12
 8005364:	2b08      	cmp	r3, #8
 8005366:	d102      	bne.n	800536e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005368:	4b26      	ldr	r3, [pc, #152]	; (8005404 <HAL_RCC_GetSysClockFreq+0xc0>)
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	e03e      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800536e:	4b23      	ldr	r3, [pc, #140]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 030c 	and.w	r3, r3, #12
 8005376:	2b0c      	cmp	r3, #12
 8005378:	d136      	bne.n	80053e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800537a:	4b20      	ldr	r3, [pc, #128]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005384:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	091b      	lsrs	r3, r3, #4
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	3301      	adds	r3, #1
 8005390:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d10c      	bne.n	80053b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005398:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <HAL_RCC_GetSysClockFreq+0xc0>)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a0:	4a16      	ldr	r2, [pc, #88]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80053a2:	68d2      	ldr	r2, [r2, #12]
 80053a4:	0a12      	lsrs	r2, r2, #8
 80053a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	617b      	str	r3, [r7, #20]
      break;
 80053b0:	e00c      	b.n	80053cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <HAL_RCC_GetSysClockFreq+0xbc>)
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	4a10      	ldr	r2, [pc, #64]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80053bc:	68d2      	ldr	r2, [r2, #12]
 80053be:	0a12      	lsrs	r2, r2, #8
 80053c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]
      break;
 80053ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	0e5b      	lsrs	r3, r3, #25
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	3301      	adds	r3, #1
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	e001      	b.n	80053ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053ec:	693b      	ldr	r3, [r7, #16]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
 8005400:	00f42400 	.word	0x00f42400
 8005404:	016e3600 	.word	0x016e3600

08005408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800540c:	4b03      	ldr	r3, [pc, #12]	; (800541c <HAL_RCC_GetHCLKFreq+0x14>)
 800540e:	681b      	ldr	r3, [r3, #0]
}
 8005410:	4618      	mov	r0, r3
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000000 	.word	0x20000000

08005420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005424:	f7ff fff0 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 8005428:	4602      	mov	r2, r0
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	f003 0307 	and.w	r3, r3, #7
 8005434:	4904      	ldr	r1, [pc, #16]	; (8005448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005436:	5ccb      	ldrb	r3, [r1, r3]
 8005438:	f003 031f 	and.w	r3, r3, #31
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005440:	4618      	mov	r0, r3
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40021000 	.word	0x40021000
 8005448:	08009d08 	.word	0x08009d08

0800544c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005450:	f7ff ffda 	bl	8005408 <HAL_RCC_GetHCLKFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	0adb      	lsrs	r3, r3, #11
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	4904      	ldr	r1, [pc, #16]	; (8005474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	08009d08 	.word	0x08009d08

08005478 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800547e:	4b1e      	ldr	r3, [pc, #120]	; (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005488:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	091b      	lsrs	r3, r3, #4
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	2b03      	cmp	r3, #3
 800549a:	d10c      	bne.n	80054b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800549c:	4a17      	ldr	r2, [pc, #92]	; (80054fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a4:	4a14      	ldr	r2, [pc, #80]	; (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054a6:	68d2      	ldr	r2, [r2, #12]
 80054a8:	0a12      	lsrs	r2, r2, #8
 80054aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]
    break;
 80054b4:	e00c      	b.n	80054d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054b6:	4a12      	ldr	r2, [pc, #72]	; (8005500 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80054be:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054c0:	68d2      	ldr	r2, [r2, #12]
 80054c2:	0a12      	lsrs	r2, r2, #8
 80054c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80054c8:	fb02 f303 	mul.w	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]
    break;
 80054ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	0e5b      	lsrs	r3, r3, #25
 80054d6:	f003 0303 	and.w	r3, r3, #3
 80054da:	3301      	adds	r3, #1
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80054ea:	687b      	ldr	r3, [r7, #4]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	40021000 	.word	0x40021000
 80054fc:	016e3600 	.word	0x016e3600
 8005500:	00f42400 	.word	0x00f42400

08005504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800550c:	2300      	movs	r3, #0
 800550e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005510:	2300      	movs	r3, #0
 8005512:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 8098 	beq.w	8005652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005522:	2300      	movs	r3, #0
 8005524:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005526:	4b43      	ldr	r3, [pc, #268]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10d      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005532:	4b40      	ldr	r3, [pc, #256]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005536:	4a3f      	ldr	r2, [pc, #252]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800553c:	6593      	str	r3, [r2, #88]	; 0x58
 800553e:	4b3d      	ldr	r3, [pc, #244]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005546:	60bb      	str	r3, [r7, #8]
 8005548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554a:	2301      	movs	r3, #1
 800554c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800554e:	4b3a      	ldr	r3, [pc, #232]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a39      	ldr	r2, [pc, #228]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800555a:	f7fe f8f9 	bl	8003750 <HAL_GetTick>
 800555e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005560:	e009      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005562:	f7fe f8f5 	bl	8003750 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d902      	bls.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	74fb      	strb	r3, [r7, #19]
        break;
 8005574:	e005      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005576:	4b30      	ldr	r3, [pc, #192]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ef      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005582:	7cfb      	ldrb	r3, [r7, #19]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d159      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005588:	4b2a      	ldr	r3, [pc, #168]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005592:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d01e      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d019      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055a4:	4b23      	ldr	r3, [pc, #140]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055b0:	4b20      	ldr	r3, [pc, #128]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b6:	4a1f      	ldr	r2, [pc, #124]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055c0:	4b1c      	ldr	r3, [pc, #112]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c6:	4a1b      	ldr	r2, [pc, #108]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055d0:	4a18      	ldr	r2, [pc, #96]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d016      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e2:	f7fe f8b5 	bl	8003750 <HAL_GetTick>
 80055e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055e8:	e00b      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fe f8b1 	bl	8003750 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d902      	bls.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	74fb      	strb	r3, [r7, #19]
            break;
 8005600:	e006      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ec      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005624:	4903      	ldr	r1, [pc, #12]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800562c:	e008      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800562e:	7cfb      	ldrb	r3, [r7, #19]
 8005630:	74bb      	strb	r3, [r7, #18]
 8005632:	e005      	b.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005634:	40021000 	.word	0x40021000
 8005638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563c:	7cfb      	ldrb	r3, [r7, #19]
 800563e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005640:	7c7b      	ldrb	r3, [r7, #17]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005646:	4ba7      	ldr	r3, [pc, #668]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800564a:	4aa6      	ldr	r2, [pc, #664]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005650:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800565e:	4ba1      	ldr	r3, [pc, #644]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005664:	f023 0203 	bic.w	r2, r3, #3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	499d      	ldr	r1, [pc, #628]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005680:	4b98      	ldr	r3, [pc, #608]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005686:	f023 020c 	bic.w	r2, r3, #12
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	4995      	ldr	r1, [pc, #596]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056a2:	4b90      	ldr	r3, [pc, #576]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	498c      	ldr	r1, [pc, #560]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056c4:	4b87      	ldr	r3, [pc, #540]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	4984      	ldr	r1, [pc, #528]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0310 	and.w	r3, r3, #16
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056e6:	4b7f      	ldr	r3, [pc, #508]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	497b      	ldr	r1, [pc, #492]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0320 	and.w	r3, r3, #32
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005708:	4b76      	ldr	r3, [pc, #472]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	4973      	ldr	r1, [pc, #460]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800572a:	4b6e      	ldr	r3, [pc, #440]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69db      	ldr	r3, [r3, #28]
 8005738:	496a      	ldr	r1, [pc, #424]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800574c:	4b65      	ldr	r3, [pc, #404]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	4962      	ldr	r1, [pc, #392]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800576e:	4b5d      	ldr	r3, [pc, #372]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	4959      	ldr	r1, [pc, #356]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005790:	4b54      	ldr	r3, [pc, #336]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005792:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005796:	f023 0203 	bic.w	r2, r3, #3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	4951      	ldr	r1, [pc, #324]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057b2:	4b4c      	ldr	r3, [pc, #304]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4948      	ldr	r1, [pc, #288]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d015      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057d4:	4b43      	ldr	r3, [pc, #268]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	4940      	ldr	r1, [pc, #256]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f2:	d105      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057f4:	4b3b      	ldr	r3, [pc, #236]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	4a3a      	ldr	r2, [pc, #232]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005808:	2b00      	cmp	r3, #0
 800580a:	d015      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800580c:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581a:	4932      	ldr	r1, [pc, #200]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800582a:	d105      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582c:	4b2d      	ldr	r3, [pc, #180]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a2c      	ldr	r2, [pc, #176]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005836:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d015      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005844:	4b27      	ldr	r3, [pc, #156]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	4924      	ldr	r1, [pc, #144]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005854:	4313      	orrs	r3, r2
 8005856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005862:	d105      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005864:	4b1f      	ldr	r3, [pc, #124]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800586e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d015      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800587c:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588a:	4916      	ldr	r1, [pc, #88]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588c:	4313      	orrs	r3, r2
 800588e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005896:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800589a:	d105      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d019      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058b4:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	4908      	ldr	r1, [pc, #32]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d2:	d109      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058d4:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	4a02      	ldr	r2, [pc, #8]	; (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058de:	60d3      	str	r3, [r2, #12]
 80058e0:	e002      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80058e2:	bf00      	nop
 80058e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d015      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058f4:	4b29      	ldr	r3, [pc, #164]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	4926      	ldr	r1, [pc, #152]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005904:	4313      	orrs	r3, r2
 8005906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005912:	d105      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005914:	4b21      	ldr	r3, [pc, #132]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	4a20      	ldr	r2, [pc, #128]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800591a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d015      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593a:	4918      	ldr	r1, [pc, #96]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594a:	d105      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800594c:	4b13      	ldr	r3, [pc, #76]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	4a12      	ldr	r2, [pc, #72]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005956:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d015      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005964:	4b0d      	ldr	r3, [pc, #52]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800596a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005972:	490a      	ldr	r1, [pc, #40]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005982:	d105      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	4a04      	ldr	r2, [pc, #16]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800598a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800598e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005990:	7cbb      	ldrb	r3, [r7, #18]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40021000 	.word	0x40021000

080059a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_QSPI  QSPI peripheral clock (only for devices with QSPI)
  *            @arg @ref RCC_PERIPHCLK_RTC  RTC peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllvco, plln, pllp;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059b2:	d136      	bne.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80059b4:	4bb1      	ldr	r3, [pc, #708]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80059b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059be:	613b      	str	r3, [r7, #16]

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80059c0:	4bae      	ldr	r3, [pc, #696]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80059c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d108      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d4:	d104      	bne.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
    {
      frequency = LSE_VALUE;
 80059d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	f000 bd12 	b.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80059e0:	4ba6      	ldr	r3, [pc, #664]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80059e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d108      	bne.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f4:	d104      	bne.n	8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    {
      frequency = LSI_VALUE;
 80059f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	f000 bd02 	b.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005a00:	4b9e      	ldr	r3, [pc, #632]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a0c:	f040 84fa 	bne.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a16:	f040 84f5 	bne.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = HSE_VALUE / 32U;
 8005a1a:	4b99      	ldr	r3, [pc, #612]	; (8005c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	f000 bcf1 	b.w	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
  else
  {
    /* Other external peripheral clock source than RTC */

    /* Compute PLL clock input */
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8005a22:	4b96      	ldr	r3, [pc, #600]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d10c      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a2e:	4b93      	ldr	r3, [pc, #588]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3a:	d102      	bne.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        pllvco = HSI_VALUE;
 8005a3c:	4b91      	ldr	r3, [pc, #580]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005a3e:	61bb      	str	r3, [r7, #24]
 8005a40:	e017      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	e014      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 8005a48:	4b8c      	ldr	r3, [pc, #560]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0303 	and.w	r3, r3, #3
 8005a50:	2b03      	cmp	r3, #3
 8005a52:	d10c      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0xce>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a54:	4b89      	ldr	r3, [pc, #548]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a60:	d102      	bne.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      {
        pllvco = HSE_VALUE;
 8005a62:	4b89      	ldr	r3, [pc, #548]	; (8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	e004      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
      else
      {
        pllvco = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e001      	b.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
      }
    }
    else /* No source */
    {
      pllvco = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
    }

    /* f(PLL Source) / PLLM */
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005a72:	4b82      	ldr	r3, [pc, #520]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	091b      	lsrs	r3, r3, #4
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a84:	61bb      	str	r3, [r7, #24]

    switch(PeriphClk)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a8c:	f000 8466 	beq.w	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a96:	f200 848e 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aa0:	f000 8263 	beq.w	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005aaa:	f200 8484 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab4:	f000 8417 	beq.w	80062e6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005abe:	f200 847a 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ac8:	f000 83d0 	beq.w	800626c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad2:	f200 8470 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005adc:	f000 8398 	beq.w	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ae6:	f200 8466 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af0:	f000 8360 	beq.w	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afa:	f200 845c 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	f000 8318 	beq.w	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0e:	f200 8452 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b18:	f000 82ca 	beq.w	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b22:	f200 8448 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b2c:	f000 827c 	beq.w	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b36:	f200 843e 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b40:	f000 8236 	beq.w	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x610>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4a:	f200 8434 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b54:	f000 81e4 	beq.w	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5e:	f200 842a 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b80      	cmp	r3, #128	; 0x80
 8005b66:	f000 81b1 	beq.w	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b80      	cmp	r3, #128	; 0x80
 8005b6e:	f200 8422 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	d84b      	bhi.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 841b 	beq.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	2b1f      	cmp	r3, #31
 8005b86:	f200 8416 	bhi.w	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8005b8a:	a201      	add	r2, pc, #4	; (adr r2, 8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1f0>)
 8005b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b90:	08005c1b 	.word	0x08005c1b
 8005b94:	08005c8d 	.word	0x08005c8d
 8005b98:	080063b7 	.word	0x080063b7
 8005b9c:	08005cef 	.word	0x08005cef
 8005ba0:	080063b7 	.word	0x080063b7
 8005ba4:	080063b7 	.word	0x080063b7
 8005ba8:	080063b7 	.word	0x080063b7
 8005bac:	08005d51 	.word	0x08005d51
 8005bb0:	080063b7 	.word	0x080063b7
 8005bb4:	080063b7 	.word	0x080063b7
 8005bb8:	080063b7 	.word	0x080063b7
 8005bbc:	080063b7 	.word	0x080063b7
 8005bc0:	080063b7 	.word	0x080063b7
 8005bc4:	080063b7 	.word	0x080063b7
 8005bc8:	080063b7 	.word	0x080063b7
 8005bcc:	08005db3 	.word	0x08005db3
 8005bd0:	080063b7 	.word	0x080063b7
 8005bd4:	080063b7 	.word	0x080063b7
 8005bd8:	080063b7 	.word	0x080063b7
 8005bdc:	080063b7 	.word	0x080063b7
 8005be0:	080063b7 	.word	0x080063b7
 8005be4:	080063b7 	.word	0x080063b7
 8005be8:	080063b7 	.word	0x080063b7
 8005bec:	080063b7 	.word	0x080063b7
 8005bf0:	080063b7 	.word	0x080063b7
 8005bf4:	080063b7 	.word	0x080063b7
 8005bf8:	080063b7 	.word	0x080063b7
 8005bfc:	080063b7 	.word	0x080063b7
 8005c00:	080063b7 	.word	0x080063b7
 8005c04:	080063b7 	.word	0x080063b7
 8005c08:	080063b7 	.word	0x080063b7
 8005c0c:	08005e1b 	.word	0x08005e1b
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b40      	cmp	r3, #64	; 0x40
 8005c14:	f000 8135 	beq.w	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x4e2>
      break;

#endif /* QUADSPI */

    default:
      break;
 8005c18:	e3cd      	b.n	80063b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005c1a:	4b18      	ldr	r3, [pc, #96]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f003 0303 	and.w	r3, r3, #3
 8005c24:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>
        frequency = HAL_RCC_GetPCLK2Freq();
 8005c2c:	f7ff fc0e 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 8005c30:	61f8      	str	r0, [r7, #28]
      break;
 8005c32:	e3c2      	b.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d103      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
        frequency = HAL_RCC_GetSysClockFreq();
 8005c3a:	f7ff fb83 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005c3e:	61f8      	str	r0, [r7, #28]
      break;
 8005c40:	e3bb      	b.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI) )
 8005c42:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d102      	bne.n	8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
        frequency = HSI_VALUE;
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8005c58:	61fb      	str	r3, [r7, #28]
      break;
 8005c5a:	e3ae      	b.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	f040 83a7 	bne.w	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	f040 83a3 	bne.w	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
        frequency = LSE_VALUE;
 8005c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c78:	61fb      	str	r3, [r7, #28]
      break;
 8005c7a:	e39e      	b.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8005c7c:	40021000 	.word	0x40021000
 8005c80:	000b71b0 	.word	0x000b71b0
 8005c84:	00f42400 	.word	0x00f42400
 8005c88:	016e3600 	.word	0x016e3600
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005c8c:	4ba2      	ldr	r3, [pc, #648]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c92:	f003 030c 	and.w	r3, r3, #12
 8005c96:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005c9e:	f7ff fbbf 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005ca2:	61f8      	str	r0, [r7, #28]
      break;
 8005ca4:	e38b      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d103      	bne.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
        frequency = HAL_RCC_GetSysClockFreq();
 8005cac:	f7ff fb4a 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005cb0:	61f8      	str	r0, [r7, #28]
      break;
 8005cb2:	e384      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005cb4:	4b98      	ldr	r3, [pc, #608]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc0:	d105      	bne.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d102      	bne.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
        frequency = HSI_VALUE;
 8005cc8:	4b94      	ldr	r3, [pc, #592]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005cca:	61fb      	str	r3, [r7, #28]
      break;
 8005ccc:	e377      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))  && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005cce:	4b92      	ldr	r3, [pc, #584]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	f040 8370 	bne.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	f040 836c 	bne.w	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
        frequency = LSE_VALUE;
 8005ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cea:	61fb      	str	r3, [r7, #28]
      break;
 8005cec:	e367      	b.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005cee:	4b8a      	ldr	r3, [pc, #552]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cf8:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005d00:	f7ff fb8e 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005d04:	61f8      	str	r0, [r7, #28]
      break;
 8005d06:	e35c      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2b10      	cmp	r3, #16
 8005d0c:	d103      	bne.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
        frequency = HAL_RCC_GetSysClockFreq();
 8005d0e:	f7ff fb19 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005d12:	61f8      	str	r0, [r7, #28]
      break;
 8005d14:	e355      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005d16:	4b80      	ldr	r3, [pc, #512]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d22:	d105      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d102      	bne.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x390>
        frequency = HSI_VALUE;
 8005d2a:	4b7c      	ldr	r3, [pc, #496]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005d2c:	61fb      	str	r3, [r7, #28]
      break;
 8005d2e:	e348      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005d30:	4b79      	ldr	r3, [pc, #484]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d36:	f003 0302 	and.w	r3, r3, #2
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	f040 8341 	bne.w	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b30      	cmp	r3, #48	; 0x30
 8005d44:	f040 833d 	bne.w	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
        frequency = LSE_VALUE;
 8005d48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4c:	61fb      	str	r3, [r7, #28]
      break;
 8005d4e:	e338      	b.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005d50:	4b71      	ldr	r3, [pc, #452]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d5a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005d62:	f7ff fb5d 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005d66:	61f8      	str	r0, [r7, #28]
      break;
 8005d68:	e32d      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b40      	cmp	r3, #64	; 0x40
 8005d6e:	d103      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        frequency = HAL_RCC_GetSysClockFreq();
 8005d70:	f7ff fae8 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005d74:	61f8      	str	r0, [r7, #28]
      break;
 8005d76:	e326      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005d78:	4b67      	ldr	r3, [pc, #412]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d84:	d105      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b80      	cmp	r3, #128	; 0x80
 8005d8a:	d102      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3f2>
        frequency = HSI_VALUE;
 8005d8c:	4b63      	ldr	r3, [pc, #396]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005d8e:	61fb      	str	r3, [r7, #28]
      break;
 8005d90:	e319      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005d92:	4b61      	ldr	r3, [pc, #388]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	f040 8312 	bne.w	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2bc0      	cmp	r3, #192	; 0xc0
 8005da6:	f040 830e 	bne.w	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
        frequency = LSE_VALUE;
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	61fb      	str	r3, [r7, #28]
      break;
 8005db0:	e309      	b.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005db2:	4b59      	ldr	r3, [pc, #356]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbc:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d103      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005dc4:	f7ff fb2c 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005dc8:	61f8      	str	r0, [r7, #28]
      break;
 8005dca:	e2fe      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dd2:	d103      	bne.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetSysClockFreq();
 8005dd4:	f7ff fab6 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005dd8:	61f8      	str	r0, [r7, #28]
      break;
 8005dda:	e2f6      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005ddc:	4b4e      	ldr	r3, [pc, #312]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d106      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df0:	d102      	bne.n	8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
        frequency = HSI_VALUE;
 8005df2:	4b4a      	ldr	r3, [pc, #296]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005df4:	61fb      	str	r3, [r7, #28]
      break;
 8005df6:	e2e8      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005df8:	4b47      	ldr	r3, [pc, #284]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	f040 82e1 	bne.w	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e0e:	f040 82dc 	bne.w	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
        frequency = LSE_VALUE;
 8005e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e16:	61fb      	str	r3, [r7, #28]
      break;
 8005e18:	e2d7      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005e1a:	4b3f      	ldr	r3, [pc, #252]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e24:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d103      	bne.n	8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005e2c:	f7ff faf8 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005e30:	61f8      	str	r0, [r7, #28]
      break;
 8005e32:	e2cc      	b.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3a:	d103      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
        frequency = HAL_RCC_GetSysClockFreq();
 8005e3c:	f7ff fa82 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005e40:	61f8      	str	r0, [r7, #28]
      break;
 8005e42:	e2c4      	b.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005e44:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e50:	d106      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e58:	d102      	bne.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
        frequency = HSI_VALUE;
 8005e5a:	4b30      	ldr	r3, [pc, #192]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005e5c:	61fb      	str	r3, [r7, #28]
      break;
 8005e5e:	e2b6      	b.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      else if((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005e60:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	f040 82af 	bne.w	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e76:	f040 82aa 	bne.w	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
        frequency = LSE_VALUE;
 8005e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e7e:	61fb      	str	r3, [r7, #28]
      break;
 8005e80:	e2a5      	b.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xa2e>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005e82:	4b25      	ldr	r3, [pc, #148]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e88:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e8c:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d103      	bne.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7ff fac4 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005e98:	61f8      	str	r0, [r7, #28]
      break;
 8005e9a:	e29a      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea2:	d103      	bne.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        frequency = HAL_RCC_GetSysClockFreq();
 8005ea4:	f7ff fa4e 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005ea8:	61f8      	str	r0, [r7, #28]
      break;
 8005eaa:	e292      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005eac:	4b1a      	ldr	r3, [pc, #104]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb8:	f040 828b 	bne.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec2:	f040 8286 	bne.w	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
        frequency = HSI_VALUE;
 8005ec6:	4b15      	ldr	r3, [pc, #84]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005ec8:	61fb      	str	r3, [r7, #28]
      break;
 8005eca:	e282      	b.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa32>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005ecc:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ed6:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005ede:	f7ff fa9f 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005ee2:	61f8      	str	r0, [r7, #28]
      break;
 8005ee4:	e277      	b.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eec:	d103      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x556>
        frequency = HAL_RCC_GetSysClockFreq();
 8005eee:	f7ff fa29 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005ef2:	61f8      	str	r0, [r7, #28]
      break;
 8005ef4:	e26f      	b.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f02:	f040 8268 	bne.w	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0c:	f040 8263 	bne.w	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
        frequency = HSI_VALUE;
 8005f10:	4b02      	ldr	r3, [pc, #8]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005f12:	61fb      	str	r3, [r7, #28]
      break;
 8005f14:	e25f      	b.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f16:	bf00      	nop
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	00f42400 	.word	0x00f42400
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005f20:	4ba0      	ldr	r3, [pc, #640]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f2a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d103      	bne.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005f32:	f7ff fa75 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005f36:	61f8      	str	r0, [r7, #28]
      break;
 8005f38:	e24f      	b.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f40:	d103      	bne.n	8005f4a <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        frequency = HAL_RCC_GetSysClockFreq();
 8005f42:	f7ff f9ff 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005f46:	61f8      	str	r0, [r7, #28]
      break;
 8005f48:	e247      	b.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005f4a:	4b96      	ldr	r3, [pc, #600]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f56:	f040 8240 	bne.w	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f60:	f040 823b 	bne.w	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
        frequency = HSI_VALUE;
 8005f64:	4b90      	ldr	r3, [pc, #576]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005f66:	61fb      	str	r3, [r7, #28]
      break;
 8005f68:	e237      	b.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
      srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005f6a:	4b8e      	ldr	r3, [pc, #568]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005f7c:	f7ff fa50 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005f80:	61f8      	str	r0, [r7, #28]
      break;
 8005f82:	e22c      	b.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if(srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d103      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
        frequency = HAL_RCC_GetSysClockFreq();
 8005f8a:	f7ff f9db 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8005f8e:	61f8      	str	r0, [r7, #28]
      break;
 8005f90:	e225      	b.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005f92:	4b84      	ldr	r3, [pc, #528]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9e:	f040 821e 	bne.w	80063de <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	f040 821a 	bne.w	80063de <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
        frequency = HSI_VALUE;
 8005faa:	4b7f      	ldr	r3, [pc, #508]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8005fac:	61fb      	str	r3, [r7, #28]
      break;
 8005fae:	e216      	b.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005fb0:	4b7c      	ldr	r3, [pc, #496]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005fba:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d103      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005fc2:	f7ff fa2d 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8005fc6:	61f8      	str	r0, [r7, #28]
      break;
 8005fc8:	e20b      	b.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      else if((HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8005fca:	4b76      	ldr	r3, [pc, #472]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d107      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fde:	d103      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
        frequency = LSI_VALUE;
 8005fe0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	e01e      	b.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8005fe8:	4b6e      	ldr	r3, [pc, #440]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff4:	d106      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ffc:	d102      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
        frequency = HSI_VALUE;
 8005ffe:	4b6a      	ldr	r3, [pc, #424]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006000:	61fb      	str	r3, [r7, #28]
 8006002:	e010      	b.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
      else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006004:	4b67      	ldr	r3, [pc, #412]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	f040 81e7 	bne.w	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800601a:	f040 81e2 	bne.w	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
        frequency = LSE_VALUE;
 800601e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006022:	61fb      	str	r3, [r7, #28]
      break;
 8006024:	e1dd      	b.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8006026:	e1dc      	b.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
      srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006028:	4b5e      	ldr	r3, [pc, #376]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006032:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_SAI1CLKSOURCE_SYSCLK)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d103      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        frequency = HAL_RCC_GetSysClockFreq();
 800603a:	f7ff f983 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 800603e:	61f8      	str	r0, [r7, #28]
      break;
 8006040:	e1d1      	b.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_PLL)
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006048:	d11b      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800604a:	4b56      	ldr	r3, [pc, #344]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 81c7 	beq.w	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006058:	4b52      	ldr	r3, [pc, #328]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	0a1b      	lsrs	r3, r3, #8
 800605e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006062:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	fb03 f202 	mul.w	r2, r3, r2
 800606c:	4b4d      	ldr	r3, [pc, #308]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	0d5b      	lsrs	r3, r3, #21
 8006072:	f003 0303 	and.w	r3, r3, #3
 8006076:	3301      	adds	r3, #1
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	fbb2 f3f3 	udiv	r3, r2, r3
 800607e:	61fb      	str	r3, [r7, #28]
      break;
 8006080:	e1b1      	b.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if(srcclk == RCC_SAI1CLKSOURCE_EXT)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006088:	d102      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        frequency = EXTERNAL_CLOCK_VALUE;
 800608a:	4b48      	ldr	r3, [pc, #288]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800608c:	61fb      	str	r3, [r7, #28]
      break;
 800608e:	e1aa      	b.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SAI1CLKSOURCE_HSI))
 8006090:	4b44      	ldr	r3, [pc, #272]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800609c:	f040 81a3 	bne.w	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060a6:	f040 819e 	bne.w	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
        frequency = HSI_VALUE;
 80060aa:	4b3f      	ldr	r3, [pc, #252]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80060ac:	61fb      	str	r3, [r7, #28]
      break;
 80060ae:	e19a      	b.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80060b0:	4b3c      	ldr	r3, [pc, #240]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80060ba:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d103      	bne.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
        frequency = HAL_RCC_GetSysClockFreq();
 80060c2:	f7ff f93f 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 80060c6:	61f8      	str	r0, [r7, #28]
      break;
 80060c8:	e18f      	b.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_PLL)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060d0:	d11b      	bne.n	800610a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 80060d2:	4b34      	ldr	r3, [pc, #208]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8185 	beq.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80060e0:	4b30      	ldr	r3, [pc, #192]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	0a1b      	lsrs	r3, r3, #8
 80060e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ea:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	fb03 f202 	mul.w	r2, r3, r2
 80060f4:	4b2b      	ldr	r3, [pc, #172]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	0d5b      	lsrs	r3, r3, #21
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	3301      	adds	r3, #1
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	fbb2 f3f3 	udiv	r3, r2, r3
 8006106:	61fb      	str	r3, [r7, #28]
      break;
 8006108:	e16f      	b.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if(srcclk == RCC_I2SCLKSOURCE_EXT)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006110:	d102      	bne.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006112:	4b26      	ldr	r3, [pc, #152]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006114:	61fb      	str	r3, [r7, #28]
      break;
 8006116:	e168      	b.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      else if((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2SCLKSOURCE_HSI))
 8006118:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006124:	f040 8161 	bne.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800612e:	f040 815c 	bne.w	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
        frequency = HSI_VALUE;
 8006132:	4b1d      	ldr	r3, [pc, #116]	; (80061a8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006134:	61fb      	str	r3, [r7, #28]
      break;
 8006136:	e158      	b.n	80063ea <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
      srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006138:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006142:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_FDCANCLKSOURCE_PCLK1)
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800614a:	d103      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        frequency = HAL_RCC_GetPCLK1Freq();
 800614c:	f7ff f968 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8006150:	61f8      	str	r0, [r7, #28]
      break;
 8006152:	e14c      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_HSE)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d102      	bne.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = HSE_VALUE;
 800615a:	4b15      	ldr	r3, [pc, #84]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800615c:	61fb      	str	r3, [r7, #28]
      break;
 800615e:	e146      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
      else if(srcclk == RCC_FDCANCLKSOURCE_PLL)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006166:	f040 8142 	bne.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_48M1CLK) != 0U)
 800616a:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 813b 	beq.w	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006178:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	0a1b      	lsrs	r3, r3, #8
 800617e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006182:	60fb      	str	r3, [r7, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	fb03 f202 	mul.w	r2, r3, r2
 800618c:	4b05      	ldr	r3, [pc, #20]	; (80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	0d5b      	lsrs	r3, r3, #21
 8006192:	f003 0303 	and.w	r3, r3, #3
 8006196:	3301      	adds	r3, #1
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	fbb2 f3f3 	udiv	r3, r2, r3
 800619e:	61fb      	str	r3, [r7, #28]
      break;
 80061a0:	e125      	b.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80061a2:	bf00      	nop
 80061a4:	40021000 	.word	0x40021000
 80061a8:	00f42400 	.word	0x00f42400
 80061ac:	00bb8000 	.word	0x00bb8000
 80061b0:	016e3600 	.word	0x016e3600
      srcclk = __HAL_RCC_GET_USB_SOURCE();
 80061b4:	4b96      	ldr	r3, [pc, #600]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80061be:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_USBCLKSOURCE_PLL)  /* PLL ? */
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c6:	d114      	bne.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80061c8:	4b91      	ldr	r3, [pc, #580]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	0a1b      	lsrs	r3, r3, #8
 80061ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d2:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	fb03 f202 	mul.w	r2, r3, r2
 80061dc:	4b8c      	ldr	r3, [pc, #560]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	0d5b      	lsrs	r3, r3, #21
 80061e2:	f003 0303 	and.w	r3, r3, #3
 80061e6:	3301      	adds	r3, #1
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ee:	61fb      	str	r3, [r7, #28]
      break;
 80061f0:	e0ff      	b.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      else if((HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48)) /* HSI48 ? */
 80061f2:	4b87      	ldr	r3, [pc, #540]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80061f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	f040 80f8 	bne.w	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	f040 80f4 	bne.w	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
        frequency = HSI48_VALUE;
 800620a:	4b82      	ldr	r3, [pc, #520]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800620c:	61fb      	str	r3, [r7, #28]
      break;
 800620e:	e0f0      	b.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
      srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006210:	4b7f      	ldr	r3, [pc, #508]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006216:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800621a:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_RNGCLKSOURCE_PLL)  /* PLL ? */
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006222:	d114      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006224:	4b7a      	ldr	r3, [pc, #488]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	0a1b      	lsrs	r3, r3, #8
 800622a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800622e:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	fb03 f202 	mul.w	r2, r3, r2
 8006238:	4b75      	ldr	r3, [pc, #468]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	0d5b      	lsrs	r3, r3, #21
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	3301      	adds	r3, #1
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	fbb2 f3f3 	udiv	r3, r2, r3
 800624a:	61fb      	str	r3, [r7, #28]
      break;
 800624c:	e0d3      	b.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      else if( (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48)) /* HSI48 ? */
 800624e:	4b70      	ldr	r3, [pc, #448]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	f040 80cc 	bne.w	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 80c8 	bne.w	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
        frequency = HSI48_VALUE;
 8006266:	4b6b      	ldr	r3, [pc, #428]	; (8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8006268:	61fb      	str	r3, [r7, #28]
      break;
 800626a:	e0c4      	b.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 800626c:	4b68      	ldr	r3, [pc, #416]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800626e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006272:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006276:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC12CLKSOURCE_PLL)
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800627e:	d129      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 8006280:	4b63      	ldr	r3, [pc, #396]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 80b6 	beq.w	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800628e:	4b60      	ldr	r3, [pc, #384]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	0a1b      	lsrs	r3, r3, #8
 8006294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006298:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800629a:	4b5d      	ldr	r3, [pc, #372]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	0edb      	lsrs	r3, r3, #27
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80062ac:	4b58      	ldr	r3, [pc, #352]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
              pllp = 17U;
 80062b8:	2311      	movs	r3, #17
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e001      	b.n	80062c2 <HAL_RCCEx_GetPeriphCLKFreq+0x922>
              pllp = 7U;
 80062be:	2307      	movs	r3, #7
 80062c0:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	fb03 f202 	mul.w	r2, r3, r2
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d0:	61fb      	str	r3, [r7, #28]
      break;
 80062d2:	e092      	b.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      else if(srcclk == RCC_ADC12CLKSOURCE_SYSCLK)
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062da:	f040 808e 	bne.w	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
        frequency = HAL_RCC_GetSysClockFreq();
 80062de:	f7ff f831 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 80062e2:	61f8      	str	r0, [r7, #28]
      break;
 80062e4:	e089      	b.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0xa5a>
      srcclk = __HAL_RCC_GET_ADC345_SOURCE();
 80062e6:	4b4a      	ldr	r3, [pc, #296]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80062e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80062f0:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_ADC345CLKSOURCE_PLL)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f8:	d128      	bne.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
        if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_ADCCLK) != 0U)
 80062fa:	4b45      	ldr	r3, [pc, #276]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d07b      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006306:	4b42      	ldr	r3, [pc, #264]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006310:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006312:	4b3f      	ldr	r3, [pc, #252]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	0edb      	lsrs	r3, r3, #27
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	617b      	str	r3, [r7, #20]
          if(pllp == 0U)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
            if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006324:	4b3a      	ldr	r3, [pc, #232]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d002      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
              pllp = 17U;
 8006330:	2311      	movs	r3, #17
 8006332:	617b      	str	r3, [r7, #20]
 8006334:	e001      	b.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
              pllp = 7U;
 8006336:	2307      	movs	r3, #7
 8006338:	617b      	str	r3, [r7, #20]
          frequency = (pllvco * plln) / pllp;
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	fb03 f202 	mul.w	r2, r3, r2
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	61fb      	str	r3, [r7, #28]
      break;
 800634a:	e058      	b.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      else if(srcclk == RCC_ADC345CLKSOURCE_SYSCLK)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006352:	d154      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
        frequency = HAL_RCC_GetSysClockFreq();
 8006354:	f7fe fff6 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8006358:	61f8      	str	r0, [r7, #28]
      break;
 800635a:	e050      	b.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0xa5e>
      srcclk = __HAL_RCC_GET_QSPI_SOURCE();
 800635c:	4b2c      	ldr	r3, [pc, #176]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 800635e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006362:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006366:	613b      	str	r3, [r7, #16]
      if(srcclk == RCC_QSPICLKSOURCE_PLL)  /* PLL ? */
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800636e:	d114      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006370:	4b27      	ldr	r3, [pc, #156]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	0a1b      	lsrs	r3, r3, #8
 8006376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800637a:	60fb      	str	r3, [r7, #12]
        frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	fb03 f202 	mul.w	r2, r3, r2
 8006384:	4b22      	ldr	r3, [pc, #136]	; (8006410 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>)
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	0d5b      	lsrs	r3, r3, #21
 800638a:	f003 0303 	and.w	r3, r3, #3
 800638e:	3301      	adds	r3, #1
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	fbb2 f3f3 	udiv	r3, r2, r3
 8006396:	61fb      	str	r3, [r7, #28]
      break;
 8006398:	e033      	b.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_HSI)
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a0:	d102      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa08>
        frequency = HSI_VALUE;
 80063a2:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80063a4:	61fb      	str	r3, [r7, #28]
      break;
 80063a6:	e02c      	b.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      else if(srcclk == RCC_QSPICLKSOURCE_SYSCLK)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d129      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
        frequency = HAL_RCC_GetSysClockFreq();
 80063ae:	f7fe ffc9 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 80063b2:	61f8      	str	r0, [r7, #28]
      break;
 80063b4:	e025      	b.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
      break;
 80063b6:	bf00      	nop
 80063b8:	e024      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063ba:	bf00      	nop
 80063bc:	e022      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063be:	bf00      	nop
 80063c0:	e020      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063c2:	bf00      	nop
 80063c4:	e01e      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063c6:	bf00      	nop
 80063c8:	e01c      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063ca:	bf00      	nop
 80063cc:	e01a      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063ce:	bf00      	nop
 80063d0:	e018      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063d2:	bf00      	nop
 80063d4:	e016      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063d6:	bf00      	nop
 80063d8:	e014      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063da:	bf00      	nop
 80063dc:	e012      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063de:	bf00      	nop
 80063e0:	e010      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063e2:	bf00      	nop
 80063e4:	e00e      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063e6:	bf00      	nop
 80063e8:	e00c      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063ea:	bf00      	nop
 80063ec:	e00a      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063ee:	bf00      	nop
 80063f0:	e008      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063f2:	bf00      	nop
 80063f4:	e006      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063f6:	bf00      	nop
 80063f8:	e004      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063fa:	bf00      	nop
 80063fc:	e002      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 80063fe:	bf00      	nop
 8006400:	e000      	b.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
      break;
 8006402:	bf00      	nop
    }
  }

  return(frequency);
 8006404:	69fb      	ldr	r3, [r7, #28]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3720      	adds	r7, #32
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40021000 	.word	0x40021000
 8006414:	02dc6c00 	.word	0x02dc6c00
 8006418:	00f42400 	.word	0x00f42400

0800641c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e042      	b.n	80064b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fc ffc9 	bl	80033d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2224      	movs	r2, #36	; 0x24
 800644a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fb64 	bl	8006b2c <UART_SetConfig>
 8006464:	4603      	mov	r3, r0
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e022      	b.n	80064b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fe54 	bl	8007124 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800648a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800649a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0201 	orr.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fedb 	bl	8007268 <UART_CheckIdleState>
 80064b2:	4603      	mov	r3, r0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3708      	adds	r7, #8
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b0ba      	sub	sp, #232	; 0xe8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69db      	ldr	r3, [r3, #28]
 80064ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80064ea:	4013      	ands	r3, r2
 80064ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11b      	bne.n	8006530 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b00      	cmp	r3, #0
 8006502:	d015      	beq.n	8006530 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d105      	bne.n	800651c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d009      	beq.n	8006530 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006520:	2b00      	cmp	r3, #0
 8006522:	f000 82d6 	beq.w	8006ad2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4798      	blx	r3
      }
      return;
 800652e:	e2d0      	b.n	8006ad2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 811f 	beq.w	8006778 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800653a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800653e:	4b8b      	ldr	r3, [pc, #556]	; (800676c <HAL_UART_IRQHandler+0x2b0>)
 8006540:	4013      	ands	r3, r2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006546:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800654a:	4b89      	ldr	r3, [pc, #548]	; (8006770 <HAL_UART_IRQHandler+0x2b4>)
 800654c:	4013      	ands	r3, r2
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8112 	beq.w	8006778 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b00      	cmp	r3, #0
 800655e:	d011      	beq.n	8006584 <HAL_UART_IRQHandler+0xc8>
 8006560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2201      	movs	r2, #1
 8006572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657a:	f043 0201 	orr.w	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d011      	beq.n	80065b4 <HAL_UART_IRQHandler+0xf8>
 8006590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2202      	movs	r2, #2
 80065a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065aa:	f043 0204 	orr.w	r2, r3, #4
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d011      	beq.n	80065e4 <HAL_UART_IRQHandler+0x128>
 80065c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00b      	beq.n	80065e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2204      	movs	r2, #4
 80065d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065da:	f043 0202 	orr.w	r2, r3, #2
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d017      	beq.n	8006620 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d105      	bne.n	8006608 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006600:	4b5a      	ldr	r3, [pc, #360]	; (800676c <HAL_UART_IRQHandler+0x2b0>)
 8006602:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00b      	beq.n	8006620 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2208      	movs	r2, #8
 800660e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006616:	f043 0208 	orr.w	r2, r3, #8
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006628:	2b00      	cmp	r3, #0
 800662a:	d012      	beq.n	8006652 <HAL_UART_IRQHandler+0x196>
 800662c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006630:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00c      	beq.n	8006652 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006640:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 823c 	beq.w	8006ad6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800665e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d013      	beq.n	8006692 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800666a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d105      	bne.n	8006682 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006698:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d005      	beq.n	80066b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d04f      	beq.n	8006756 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fee9 	bl	800748e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c6:	2b40      	cmp	r3, #64	; 0x40
 80066c8:	d141      	bne.n	800674e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	3308      	adds	r3, #8
 80066d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3308      	adds	r3, #8
 80066f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800670e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1d9      	bne.n	80066ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d013      	beq.n	8006746 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006722:	4a14      	ldr	r2, [pc, #80]	; (8006774 <HAL_UART_IRQHandler+0x2b8>)
 8006724:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800672a:	4618      	mov	r0, r3
 800672c:	f7fd faa8 	bl	8003c80 <HAL_DMA_Abort_IT>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d017      	beq.n	8006766 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	e00f      	b.n	8006766 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f9da 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674c:	e00b      	b.n	8006766 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f9d6 	bl	8006b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	e007      	b.n	8006766 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9d2 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006764:	e1b7      	b.n	8006ad6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006766:	bf00      	nop
    return;
 8006768:	e1b5      	b.n	8006ad6 <HAL_UART_IRQHandler+0x61a>
 800676a:	bf00      	nop
 800676c:	10000001 	.word	0x10000001
 8006770:	04000120 	.word	0x04000120
 8006774:	0800755b 	.word	0x0800755b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800677c:	2b01      	cmp	r3, #1
 800677e:	f040 814a 	bne.w	8006a16 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006786:	f003 0310 	and.w	r3, r3, #16
 800678a:	2b00      	cmp	r3, #0
 800678c:	f000 8143 	beq.w	8006a16 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006794:	f003 0310 	and.w	r3, r3, #16
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 813c 	beq.w	8006a16 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2210      	movs	r2, #16
 80067a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	f040 80b5 	bne.w	8006920 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067c2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8187 	beq.w	8006ada <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067d6:	429a      	cmp	r2, r3
 80067d8:	f080 817f 	bcs.w	8006ada <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0320 	and.w	r3, r3, #32
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f040 8086 	bne.w	8006904 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006800:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800680c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006822:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006826:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800682e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800683a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1da      	bne.n	80067f8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006866:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800686a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800686e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e1      	bne.n	8006842 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3308      	adds	r3, #8
 8006884:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800688e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3308      	adds	r3, #8
 800689e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e3      	bne.n	800687e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068d4:	f023 0310 	bic.w	r3, r3, #16
 80068d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80068e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e4      	bne.n	80068c4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fd f965 	bl	8003bce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006910:	b29b      	uxth	r3, r3
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	b29b      	uxth	r3, r3
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f8fb 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800691e:	e0dc      	b.n	8006ada <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800692c:	b29b      	uxth	r3, r3
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80ce 	beq.w	8006ade <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006942:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80c9 	beq.w	8006ade <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800695a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800696e:	647b      	str	r3, [r7, #68]	; 0x44
 8006970:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800697c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e4      	bne.n	800694c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3308      	adds	r3, #8
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	e853 3f00 	ldrex	r3, [r3]
 8006990:	623b      	str	r3, [r7, #32]
   return(result);
 8006992:	6a3b      	ldr	r3, [r7, #32]
 8006994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3308      	adds	r3, #8
 80069a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069aa:	633a      	str	r2, [r7, #48]	; 0x30
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069b2:	e841 2300 	strex	r3, r2, [r1]
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1e1      	bne.n	8006982 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2220      	movs	r2, #32
 80069c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	60fb      	str	r3, [r7, #12]
   return(result);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069f4:	61fb      	str	r3, [r7, #28]
 80069f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	69b9      	ldr	r1, [r7, #24]
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	617b      	str	r3, [r7, #20]
   return(result);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e4      	bne.n	80069d2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f880 	bl	8006b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a14:	e063      	b.n	8006ade <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00e      	beq.n	8006a40 <HAL_UART_IRQHandler+0x584>
 8006a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d008      	beq.n	8006a40 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fdcf 	bl	80075dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a3e:	e051      	b.n	8006ae4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d014      	beq.n	8006a76 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d105      	bne.n	8006a64 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d008      	beq.n	8006a76 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d03a      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	4798      	blx	r3
    }
    return;
 8006a74:	e035      	b.n	8006ae2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d009      	beq.n	8006a96 <HAL_UART_IRQHandler+0x5da>
 8006a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fd79 	bl	8007586 <UART_EndTransmit_IT>
    return;
 8006a94:	e026      	b.n	8006ae4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x5fa>
 8006aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aa6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fda8 	bl	8007604 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ab4:	e016      	b.n	8006ae4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d010      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x628>
 8006ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da0c      	bge.n	8006ae4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fd90 	bl	80075f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ad0:	e008      	b.n	8006ae4 <HAL_UART_IRQHandler+0x628>
      return;
 8006ad2:	bf00      	nop
 8006ad4:	e006      	b.n	8006ae4 <HAL_UART_IRQHandler+0x628>
    return;
 8006ad6:	bf00      	nop
 8006ad8:	e004      	b.n	8006ae4 <HAL_UART_IRQHandler+0x628>
      return;
 8006ada:	bf00      	nop
 8006adc:	e002      	b.n	8006ae4 <HAL_UART_IRQHandler+0x628>
      return;
 8006ade:	bf00      	nop
 8006ae0:	e000      	b.n	8006ae4 <HAL_UART_IRQHandler+0x628>
    return;
 8006ae2:	bf00      	nop
  }
}
 8006ae4:	37e8      	adds	r7, #232	; 0xe8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop

08006aec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b30:	b08c      	sub	sp, #48	; 0x30
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	431a      	orrs	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	4baa      	ldr	r3, [pc, #680]	; (8006e04 <UART_SetConfig+0x2d8>)
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a9f      	ldr	r2, [pc, #636]	; (8006e08 <UART_SetConfig+0x2dc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b94:	4313      	orrs	r3, r2
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ba2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	6812      	ldr	r2, [r2, #0]
 8006baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bac:	430b      	orrs	r3, r1
 8006bae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb6:	f023 010f 	bic.w	r1, r3, #15
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a90      	ldr	r2, [pc, #576]	; (8006e0c <UART_SetConfig+0x2e0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d125      	bne.n	8006c1c <UART_SetConfig+0xf0>
 8006bd0:	4b8f      	ldr	r3, [pc, #572]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d81a      	bhi.n	8006c14 <UART_SetConfig+0xe8>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <UART_SetConfig+0xb8>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006bf5 	.word	0x08006bf5
 8006be8:	08006c05 	.word	0x08006c05
 8006bec:	08006bfd 	.word	0x08006bfd
 8006bf0:	08006c0d 	.word	0x08006c0d
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e116      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e112      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	e10e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c12:	e10a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c1a:	e106      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a7c      	ldr	r2, [pc, #496]	; (8006e14 <UART_SetConfig+0x2e8>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d138      	bne.n	8006c98 <UART_SetConfig+0x16c>
 8006c26:	4b7a      	ldr	r3, [pc, #488]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	f003 030c 	and.w	r3, r3, #12
 8006c30:	2b0c      	cmp	r3, #12
 8006c32:	d82d      	bhi.n	8006c90 <UART_SetConfig+0x164>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0x110>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006c91 	.word	0x08006c91
 8006c44:	08006c91 	.word	0x08006c91
 8006c48:	08006c91 	.word	0x08006c91
 8006c4c:	08006c81 	.word	0x08006c81
 8006c50:	08006c91 	.word	0x08006c91
 8006c54:	08006c91 	.word	0x08006c91
 8006c58:	08006c91 	.word	0x08006c91
 8006c5c:	08006c79 	.word	0x08006c79
 8006c60:	08006c91 	.word	0x08006c91
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	08006c91 	.word	0x08006c91
 8006c6c:	08006c89 	.word	0x08006c89
 8006c70:	2300      	movs	r3, #0
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c76:	e0d8      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7e:	e0d4      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c80:	2304      	movs	r3, #4
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c86:	e0d0      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c88:	2308      	movs	r3, #8
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8e:	e0cc      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c90:	2310      	movs	r3, #16
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c96:	e0c8      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a5e      	ldr	r2, [pc, #376]	; (8006e18 <UART_SetConfig+0x2ec>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d125      	bne.n	8006cee <UART_SetConfig+0x1c2>
 8006ca2:	4b5b      	ldr	r3, [pc, #364]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ca8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d016      	beq.n	8006cde <UART_SetConfig+0x1b2>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d818      	bhi.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d00a      	beq.n	8006cce <UART_SetConfig+0x1a2>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d814      	bhi.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d002      	beq.n	8006cc6 <UART_SetConfig+0x19a>
 8006cc0:	2b10      	cmp	r3, #16
 8006cc2:	d008      	beq.n	8006cd6 <UART_SetConfig+0x1aa>
 8006cc4:	e00f      	b.n	8006ce6 <UART_SetConfig+0x1ba>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ccc:	e0ad      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd4:	e0a9      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cd6:	2304      	movs	r3, #4
 8006cd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cdc:	e0a5      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cde:	2308      	movs	r3, #8
 8006ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce4:	e0a1      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006ce6:	2310      	movs	r3, #16
 8006ce8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cec:	e09d      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a4a      	ldr	r2, [pc, #296]	; (8006e1c <UART_SetConfig+0x2f0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d125      	bne.n	8006d44 <UART_SetConfig+0x218>
 8006cf8:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d02:	2bc0      	cmp	r3, #192	; 0xc0
 8006d04:	d016      	beq.n	8006d34 <UART_SetConfig+0x208>
 8006d06:	2bc0      	cmp	r3, #192	; 0xc0
 8006d08:	d818      	bhi.n	8006d3c <UART_SetConfig+0x210>
 8006d0a:	2b80      	cmp	r3, #128	; 0x80
 8006d0c:	d00a      	beq.n	8006d24 <UART_SetConfig+0x1f8>
 8006d0e:	2b80      	cmp	r3, #128	; 0x80
 8006d10:	d814      	bhi.n	8006d3c <UART_SetConfig+0x210>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <UART_SetConfig+0x1f0>
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d008      	beq.n	8006d2c <UART_SetConfig+0x200>
 8006d1a:	e00f      	b.n	8006d3c <UART_SetConfig+0x210>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d22:	e082      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2a:	e07e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d32:	e07a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3a:	e076      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d42:	e072      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a35      	ldr	r2, [pc, #212]	; (8006e20 <UART_SetConfig+0x2f4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d12a      	bne.n	8006da4 <UART_SetConfig+0x278>
 8006d4e:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d5c:	d01a      	beq.n	8006d94 <UART_SetConfig+0x268>
 8006d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d62:	d81b      	bhi.n	8006d9c <UART_SetConfig+0x270>
 8006d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d68:	d00c      	beq.n	8006d84 <UART_SetConfig+0x258>
 8006d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6e:	d815      	bhi.n	8006d9c <UART_SetConfig+0x270>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <UART_SetConfig+0x250>
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d78:	d008      	beq.n	8006d8c <UART_SetConfig+0x260>
 8006d7a:	e00f      	b.n	8006d9c <UART_SetConfig+0x270>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d82:	e052      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d84:	2302      	movs	r3, #2
 8006d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d8a:	e04e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d92:	e04a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d94:	2308      	movs	r3, #8
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9a:	e046      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006d9c:	2310      	movs	r3, #16
 8006d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da2:	e042      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <UART_SetConfig+0x2dc>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d13a      	bne.n	8006e24 <UART_SetConfig+0x2f8>
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <UART_SetConfig+0x2e4>)
 8006db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dbc:	d01a      	beq.n	8006df4 <UART_SetConfig+0x2c8>
 8006dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc2:	d81b      	bhi.n	8006dfc <UART_SetConfig+0x2d0>
 8006dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc8:	d00c      	beq.n	8006de4 <UART_SetConfig+0x2b8>
 8006dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dce:	d815      	bhi.n	8006dfc <UART_SetConfig+0x2d0>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <UART_SetConfig+0x2b0>
 8006dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dd8:	d008      	beq.n	8006dec <UART_SetConfig+0x2c0>
 8006dda:	e00f      	b.n	8006dfc <UART_SetConfig+0x2d0>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006de2:	e022      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006de4:	2302      	movs	r3, #2
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dea:	e01e      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006dec:	2304      	movs	r3, #4
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e01a      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006df4:	2308      	movs	r3, #8
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfa:	e016      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006dfc:	2310      	movs	r3, #16
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e012      	b.n	8006e2a <UART_SetConfig+0x2fe>
 8006e04:	cfff69f3 	.word	0xcfff69f3
 8006e08:	40008000 	.word	0x40008000
 8006e0c:	40013800 	.word	0x40013800
 8006e10:	40021000 	.word	0x40021000
 8006e14:	40004400 	.word	0x40004400
 8006e18:	40004800 	.word	0x40004800
 8006e1c:	40004c00 	.word	0x40004c00
 8006e20:	40005000 	.word	0x40005000
 8006e24:	2310      	movs	r3, #16
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4aae      	ldr	r2, [pc, #696]	; (80070e8 <UART_SetConfig+0x5bc>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	f040 8097 	bne.w	8006f64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d823      	bhi.n	8006e86 <UART_SetConfig+0x35a>
 8006e3e:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <UART_SetConfig+0x318>)
 8006e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e44:	08006e69 	.word	0x08006e69
 8006e48:	08006e87 	.word	0x08006e87
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e87 	.word	0x08006e87
 8006e54:	08006e77 	.word	0x08006e77
 8006e58:	08006e87 	.word	0x08006e87
 8006e5c:	08006e87 	.word	0x08006e87
 8006e60:	08006e87 	.word	0x08006e87
 8006e64:	08006e7f 	.word	0x08006e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e68:	f7fe fada 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8006e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e6e:	e010      	b.n	8006e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e70:	4b9e      	ldr	r3, [pc, #632]	; (80070ec <UART_SetConfig+0x5c0>)
 8006e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e74:	e00d      	b.n	8006e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e76:	f7fe fa65 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8006e7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e7c:	e009      	b.n	8006e92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e84:	e005      	b.n	8006e92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8130 	beq.w	80070fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	4a94      	ldr	r2, [pc, #592]	; (80070f0 <UART_SetConfig+0x5c4>)
 8006ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006eac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	4413      	add	r3, r2
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d305      	bcc.n	8006eca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d903      	bls.n	8006ed2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ed0:	e113      	b.n	80070fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	60bb      	str	r3, [r7, #8]
 8006ed8:	60fa      	str	r2, [r7, #12]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ede:	4a84      	ldr	r2, [pc, #528]	; (80070f0 <UART_SetConfig+0x5c4>)
 8006ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	603b      	str	r3, [r7, #0]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ef4:	f7f9 fe74 	bl	8000be0 <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4610      	mov	r0, r2
 8006efe:	4619      	mov	r1, r3
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	020b      	lsls	r3, r1, #8
 8006f0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f0e:	0202      	lsls	r2, r0, #8
 8006f10:	6979      	ldr	r1, [r7, #20]
 8006f12:	6849      	ldr	r1, [r1, #4]
 8006f14:	0849      	lsrs	r1, r1, #1
 8006f16:	2000      	movs	r0, #0
 8006f18:	460c      	mov	r4, r1
 8006f1a:	4605      	mov	r5, r0
 8006f1c:	eb12 0804 	adds.w	r8, r2, r4
 8006f20:	eb43 0905 	adc.w	r9, r3, r5
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	469a      	mov	sl, r3
 8006f2c:	4693      	mov	fp, r2
 8006f2e:	4652      	mov	r2, sl
 8006f30:	465b      	mov	r3, fp
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 fe53 	bl	8000be0 <__aeabi_uldivmod>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4613      	mov	r3, r2
 8006f40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f48:	d308      	bcc.n	8006f5c <UART_SetConfig+0x430>
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f50:	d204      	bcs.n	8006f5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6a3a      	ldr	r2, [r7, #32]
 8006f58:	60da      	str	r2, [r3, #12]
 8006f5a:	e0ce      	b.n	80070fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f62:	e0ca      	b.n	80070fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	69db      	ldr	r3, [r3, #28]
 8006f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f6c:	d166      	bne.n	800703c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d827      	bhi.n	8006fc6 <UART_SetConfig+0x49a>
 8006f76:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <UART_SetConfig+0x450>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fa1 	.word	0x08006fa1
 8006f80:	08006fa9 	.word	0x08006fa9
 8006f84:	08006fb1 	.word	0x08006fb1
 8006f88:	08006fc7 	.word	0x08006fc7
 8006f8c:	08006fb7 	.word	0x08006fb7
 8006f90:	08006fc7 	.word	0x08006fc7
 8006f94:	08006fc7 	.word	0x08006fc7
 8006f98:	08006fc7 	.word	0x08006fc7
 8006f9c:	08006fbf 	.word	0x08006fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa0:	f7fe fa3e 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8006fa4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fa6:	e014      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fa8:	f7fe fa50 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 8006fac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fae:	e010      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b4e      	ldr	r3, [pc, #312]	; (80070ec <UART_SetConfig+0x5c0>)
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fb4:	e00d      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fe f9c5 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 8006fba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fbc:	e009      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fc4:	e005      	b.n	8006fd2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8090 	beq.w	80070fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	4a44      	ldr	r2, [pc, #272]	; (80070f0 <UART_SetConfig+0x5c4>)
 8006fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fec:	005a      	lsls	r2, r3, #1
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	441a      	add	r2, r3
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	2b0f      	cmp	r3, #15
 8007004:	d916      	bls.n	8007034 <UART_SetConfig+0x508>
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700c:	d212      	bcs.n	8007034 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f023 030f 	bic.w	r3, r3, #15
 8007016:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	085b      	lsrs	r3, r3, #1
 800701c:	b29b      	uxth	r3, r3
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	b29a      	uxth	r2, r3
 8007024:	8bfb      	ldrh	r3, [r7, #30]
 8007026:	4313      	orrs	r3, r2
 8007028:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	8bfa      	ldrh	r2, [r7, #30]
 8007030:	60da      	str	r2, [r3, #12]
 8007032:	e062      	b.n	80070fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800703a:	e05e      	b.n	80070fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800703c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007040:	2b08      	cmp	r3, #8
 8007042:	d828      	bhi.n	8007096 <UART_SetConfig+0x56a>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x520>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	08007097 	.word	0x08007097
 800705c:	08007087 	.word	0x08007087
 8007060:	08007097 	.word	0x08007097
 8007064:	08007097 	.word	0x08007097
 8007068:	08007097 	.word	0x08007097
 800706c:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fe f9d6 	bl	8005420 <HAL_RCC_GetPCLK1Freq>
 8007074:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007076:	e014      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fe f9e8 	bl	800544c <HAL_RCC_GetPCLK2Freq>
 800707c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800707e:	e010      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b1a      	ldr	r3, [pc, #104]	; (80070ec <UART_SetConfig+0x5c0>)
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007084:	e00d      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fe f95d 	bl	8005344 <HAL_RCC_GetSysClockFreq>
 800708a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800708c:	e009      	b.n	80070a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007094:	e005      	b.n	80070a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070a0:	bf00      	nop
    }

    if (pclk != 0U)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d028      	beq.n	80070fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <UART_SetConfig+0x5c4>)
 80070ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	085b      	lsrs	r3, r3, #1
 80070c0:	441a      	add	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	2b0f      	cmp	r3, #15
 80070d0:	d910      	bls.n	80070f4 <UART_SetConfig+0x5c8>
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070d8:	d20c      	bcs.n	80070f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070da:	6a3b      	ldr	r3, [r7, #32]
 80070dc:	b29a      	uxth	r2, r3
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60da      	str	r2, [r3, #12]
 80070e4:	e009      	b.n	80070fa <UART_SetConfig+0x5ce>
 80070e6:	bf00      	nop
 80070e8:	40008000 	.word	0x40008000
 80070ec:	00f42400 	.word	0x00f42400
 80070f0:	08009d10 	.word	0x08009d10
      }
      else
      {
        ret = HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2201      	movs	r2, #1
 8007106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2200      	movs	r2, #0
 800710e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	2200      	movs	r2, #0
 8007114:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007116:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800711a:	4618      	mov	r0, r3
 800711c:	3730      	adds	r7, #48	; 0x30
 800711e:	46bd      	mov	sp, r7
 8007120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007124 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00a      	beq.n	800714e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00a      	beq.n	8007170 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	f003 0304 	and.w	r3, r3, #4
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	f003 0310 	and.w	r3, r3, #16
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01a      	beq.n	800723a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007222:	d10a      	bne.n	800723a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	430a      	orrs	r2, r1
 8007238:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	605a      	str	r2, [r3, #4]
  }
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af02      	add	r7, sp, #8
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007278:	f7fc fa6a 	bl	8003750 <HAL_GetTick>
 800727c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0308 	and.w	r3, r3, #8
 8007288:	2b08      	cmp	r3, #8
 800728a:	d10e      	bne.n	80072aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800728c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f82f 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e025      	b.n	80072f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d10e      	bne.n	80072d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 f819 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e00f      	b.n	80072f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b09c      	sub	sp, #112	; 0x70
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	e0a9      	b.n	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007310:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007316:	f000 80a5 	beq.w	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800731a:	f7fc fa19 	bl	8003750 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007326:	429a      	cmp	r2, r3
 8007328:	d302      	bcc.n	8007330 <UART_WaitOnFlagUntilTimeout+0x32>
 800732a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800732c:	2b00      	cmp	r3, #0
 800732e:	d140      	bne.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800733e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007344:	667b      	str	r3, [r7, #100]	; 0x64
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800734e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007350:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007354:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800735c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e6      	bne.n	8007330 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	663b      	str	r3, [r7, #96]	; 0x60
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3308      	adds	r3, #8
 8007380:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007382:	64ba      	str	r2, [r7, #72]	; 0x48
 8007384:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007388:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e5      	bne.n	8007362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e069      	b.n	8007486 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0304 	and.w	r3, r3, #4
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d051      	beq.n	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ce:	d149      	bne.n	8007464 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073f8:	637b      	str	r3, [r7, #52]	; 0x34
 80073fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007400:	e841 2300 	strex	r3, r2, [r1]
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1e6      	bne.n	80073da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3308      	adds	r3, #8
 8007412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	e853 3f00 	ldrex	r3, [r3]
 800741a:	613b      	str	r3, [r7, #16]
   return(result);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	66bb      	str	r3, [r7, #104]	; 0x68
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	3308      	adds	r3, #8
 800742a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800742c:	623a      	str	r2, [r7, #32]
 800742e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007430:	69f9      	ldr	r1, [r7, #28]
 8007432:	6a3a      	ldr	r2, [r7, #32]
 8007434:	e841 2300 	strex	r3, r2, [r1]
 8007438:	61bb      	str	r3, [r7, #24]
   return(result);
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1e5      	bne.n	800740c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2220      	movs	r2, #32
 800744c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2220      	movs	r2, #32
 8007454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007460:	2303      	movs	r3, #3
 8007462:	e010      	b.n	8007486 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	69da      	ldr	r2, [r3, #28]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	4013      	ands	r3, r2
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	bf0c      	ite	eq
 8007474:	2301      	moveq	r3, #1
 8007476:	2300      	movne	r3, #0
 8007478:	b2db      	uxtb	r3, r3
 800747a:	461a      	mov	r2, r3
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	429a      	cmp	r2, r3
 8007480:	f43f af46 	beq.w	8007310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3770      	adds	r7, #112	; 0x70
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800748e:	b480      	push	{r7}
 8007490:	b095      	sub	sp, #84	; 0x54
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80074aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074b4:	643b      	str	r3, [r7, #64]	; 0x40
 80074b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e6      	bne.n	8007496 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3308      	adds	r3, #8
 80074ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074de:	f023 0301 	bic.w	r3, r3, #1
 80074e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	3308      	adds	r3, #8
 80074ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074f4:	e841 2300 	strex	r3, r2, [r1]
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1e3      	bne.n	80074c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007504:	2b01      	cmp	r3, #1
 8007506:	d118      	bne.n	800753a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	e853 3f00 	ldrex	r3, [r3]
 8007514:	60bb      	str	r3, [r7, #8]
   return(result);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f023 0310 	bic.w	r3, r3, #16
 800751c:	647b      	str	r3, [r7, #68]	; 0x44
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752a:	6979      	ldr	r1, [r7, #20]
 800752c:	69ba      	ldr	r2, [r7, #24]
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	613b      	str	r3, [r7, #16]
   return(result);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e6      	bne.n	8007508 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2220      	movs	r2, #32
 800753e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800754e:	bf00      	nop
 8007550:	3754      	adds	r7, #84	; 0x54
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7ff fac1 	bl	8006b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b088      	sub	sp, #32
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	60bb      	str	r3, [r7, #8]
   return(result);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a2:	61fb      	str	r3, [r7, #28]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	461a      	mov	r2, r3
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6979      	ldr	r1, [r7, #20]
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	613b      	str	r3, [r7, #16]
   return(result);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e6      	bne.n	800758e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fa8c 	bl	8006aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d4:	bf00      	nop
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007626:	2b01      	cmp	r3, #1
 8007628:	d101      	bne.n	800762e <HAL_UARTEx_DisableFifoMode+0x16>
 800762a:	2302      	movs	r3, #2
 800762c:	e027      	b.n	800767e <HAL_UARTEx_DisableFifoMode+0x66>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2224      	movs	r2, #36	; 0x24
 800763a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0201 	bic.w	r2, r2, #1
 8007654:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800765c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
 8007692:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800769e:	2302      	movs	r3, #2
 80076a0:	e02d      	b.n	80076fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2224      	movs	r2, #36	; 0x24
 80076ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f022 0201 	bic.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 f850 	bl	8007784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007716:	2b01      	cmp	r3, #1
 8007718:	d101      	bne.n	800771e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800771a:	2302      	movs	r3, #2
 800771c:	e02d      	b.n	800777a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2224      	movs	r2, #36	; 0x24
 800772a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	683a      	ldr	r2, [r7, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f812 	bl	8007784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007790:	2b00      	cmp	r3, #0
 8007792:	d108      	bne.n	80077a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077a4:	e031      	b.n	800780a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077a6:	2308      	movs	r3, #8
 80077a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077aa:	2308      	movs	r3, #8
 80077ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	0e5b      	lsrs	r3, r3, #25
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	f003 0307 	and.w	r3, r3, #7
 80077bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	0f5b      	lsrs	r3, r3, #29
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	7b3a      	ldrb	r2, [r7, #12]
 80077d2:	4911      	ldr	r1, [pc, #68]	; (8007818 <UARTEx_SetNbDataToProcess+0x94>)
 80077d4:	5c8a      	ldrb	r2, [r1, r2]
 80077d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077da:	7b3a      	ldrb	r2, [r7, #12]
 80077dc:	490f      	ldr	r1, [pc, #60]	; (800781c <UARTEx_SetNbDataToProcess+0x98>)
 80077de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	7b7a      	ldrb	r2, [r7, #13]
 80077f0:	4909      	ldr	r1, [pc, #36]	; (8007818 <UARTEx_SetNbDataToProcess+0x94>)
 80077f2:	5c8a      	ldrb	r2, [r1, r2]
 80077f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077f8:	7b7a      	ldrb	r2, [r7, #13]
 80077fa:	4908      	ldr	r1, [pc, #32]	; (800781c <UARTEx_SetNbDataToProcess+0x98>)
 80077fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800780a:	bf00      	nop
 800780c:	3714      	adds	r7, #20
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	08009d28 	.word	0x08009d28
 800781c:	08009d30 	.word	0x08009d30

08007820 <calloc>:
 8007820:	4b02      	ldr	r3, [pc, #8]	; (800782c <calloc+0xc>)
 8007822:	460a      	mov	r2, r1
 8007824:	4601      	mov	r1, r0
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	f000 b844 	b.w	80078b4 <_calloc_r>
 800782c:	2000000c 	.word	0x2000000c

08007830 <__errno>:
 8007830:	4b01      	ldr	r3, [pc, #4]	; (8007838 <__errno+0x8>)
 8007832:	6818      	ldr	r0, [r3, #0]
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	2000000c 	.word	0x2000000c

0800783c <__libc_init_array>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	4d0d      	ldr	r5, [pc, #52]	; (8007874 <__libc_init_array+0x38>)
 8007840:	4c0d      	ldr	r4, [pc, #52]	; (8007878 <__libc_init_array+0x3c>)
 8007842:	1b64      	subs	r4, r4, r5
 8007844:	10a4      	asrs	r4, r4, #2
 8007846:	2600      	movs	r6, #0
 8007848:	42a6      	cmp	r6, r4
 800784a:	d109      	bne.n	8007860 <__libc_init_array+0x24>
 800784c:	4d0b      	ldr	r5, [pc, #44]	; (800787c <__libc_init_array+0x40>)
 800784e:	4c0c      	ldr	r4, [pc, #48]	; (8007880 <__libc_init_array+0x44>)
 8007850:	f002 fa44 	bl	8009cdc <_init>
 8007854:	1b64      	subs	r4, r4, r5
 8007856:	10a4      	asrs	r4, r4, #2
 8007858:	2600      	movs	r6, #0
 800785a:	42a6      	cmp	r6, r4
 800785c:	d105      	bne.n	800786a <__libc_init_array+0x2e>
 800785e:	bd70      	pop	{r4, r5, r6, pc}
 8007860:	f855 3b04 	ldr.w	r3, [r5], #4
 8007864:	4798      	blx	r3
 8007866:	3601      	adds	r6, #1
 8007868:	e7ee      	b.n	8007848 <__libc_init_array+0xc>
 800786a:	f855 3b04 	ldr.w	r3, [r5], #4
 800786e:	4798      	blx	r3
 8007870:	3601      	adds	r6, #1
 8007872:	e7f2      	b.n	800785a <__libc_init_array+0x1e>
 8007874:	08009f88 	.word	0x08009f88
 8007878:	08009f88 	.word	0x08009f88
 800787c:	08009f88 	.word	0x08009f88
 8007880:	08009f8c 	.word	0x08009f8c

08007884 <malloc>:
 8007884:	4b02      	ldr	r3, [pc, #8]	; (8007890 <malloc+0xc>)
 8007886:	4601      	mov	r1, r0
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	f000 b895 	b.w	80079b8 <_malloc_r>
 800788e:	bf00      	nop
 8007890:	2000000c 	.word	0x2000000c

08007894 <free>:
 8007894:	4b02      	ldr	r3, [pc, #8]	; (80078a0 <free+0xc>)
 8007896:	4601      	mov	r1, r0
 8007898:	6818      	ldr	r0, [r3, #0]
 800789a:	f000 b821 	b.w	80078e0 <_free_r>
 800789e:	bf00      	nop
 80078a0:	2000000c 	.word	0x2000000c

080078a4 <memset>:
 80078a4:	4402      	add	r2, r0
 80078a6:	4603      	mov	r3, r0
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d100      	bne.n	80078ae <memset+0xa>
 80078ac:	4770      	bx	lr
 80078ae:	f803 1b01 	strb.w	r1, [r3], #1
 80078b2:	e7f9      	b.n	80078a8 <memset+0x4>

080078b4 <_calloc_r>:
 80078b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078b6:	fba1 2402 	umull	r2, r4, r1, r2
 80078ba:	b94c      	cbnz	r4, 80078d0 <_calloc_r+0x1c>
 80078bc:	4611      	mov	r1, r2
 80078be:	9201      	str	r2, [sp, #4]
 80078c0:	f000 f87a 	bl	80079b8 <_malloc_r>
 80078c4:	9a01      	ldr	r2, [sp, #4]
 80078c6:	4605      	mov	r5, r0
 80078c8:	b930      	cbnz	r0, 80078d8 <_calloc_r+0x24>
 80078ca:	4628      	mov	r0, r5
 80078cc:	b003      	add	sp, #12
 80078ce:	bd30      	pop	{r4, r5, pc}
 80078d0:	220c      	movs	r2, #12
 80078d2:	6002      	str	r2, [r0, #0]
 80078d4:	2500      	movs	r5, #0
 80078d6:	e7f8      	b.n	80078ca <_calloc_r+0x16>
 80078d8:	4621      	mov	r1, r4
 80078da:	f7ff ffe3 	bl	80078a4 <memset>
 80078de:	e7f4      	b.n	80078ca <_calloc_r+0x16>

080078e0 <_free_r>:
 80078e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078e2:	2900      	cmp	r1, #0
 80078e4:	d044      	beq.n	8007970 <_free_r+0x90>
 80078e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ea:	9001      	str	r0, [sp, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f1a1 0404 	sub.w	r4, r1, #4
 80078f2:	bfb8      	it	lt
 80078f4:	18e4      	addlt	r4, r4, r3
 80078f6:	f000 f8e3 	bl	8007ac0 <__malloc_lock>
 80078fa:	4a1e      	ldr	r2, [pc, #120]	; (8007974 <_free_r+0x94>)
 80078fc:	9801      	ldr	r0, [sp, #4]
 80078fe:	6813      	ldr	r3, [r2, #0]
 8007900:	b933      	cbnz	r3, 8007910 <_free_r+0x30>
 8007902:	6063      	str	r3, [r4, #4]
 8007904:	6014      	str	r4, [r2, #0]
 8007906:	b003      	add	sp, #12
 8007908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800790c:	f000 b8de 	b.w	8007acc <__malloc_unlock>
 8007910:	42a3      	cmp	r3, r4
 8007912:	d908      	bls.n	8007926 <_free_r+0x46>
 8007914:	6825      	ldr	r5, [r4, #0]
 8007916:	1961      	adds	r1, r4, r5
 8007918:	428b      	cmp	r3, r1
 800791a:	bf01      	itttt	eq
 800791c:	6819      	ldreq	r1, [r3, #0]
 800791e:	685b      	ldreq	r3, [r3, #4]
 8007920:	1949      	addeq	r1, r1, r5
 8007922:	6021      	streq	r1, [r4, #0]
 8007924:	e7ed      	b.n	8007902 <_free_r+0x22>
 8007926:	461a      	mov	r2, r3
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	b10b      	cbz	r3, 8007930 <_free_r+0x50>
 800792c:	42a3      	cmp	r3, r4
 800792e:	d9fa      	bls.n	8007926 <_free_r+0x46>
 8007930:	6811      	ldr	r1, [r2, #0]
 8007932:	1855      	adds	r5, r2, r1
 8007934:	42a5      	cmp	r5, r4
 8007936:	d10b      	bne.n	8007950 <_free_r+0x70>
 8007938:	6824      	ldr	r4, [r4, #0]
 800793a:	4421      	add	r1, r4
 800793c:	1854      	adds	r4, r2, r1
 800793e:	42a3      	cmp	r3, r4
 8007940:	6011      	str	r1, [r2, #0]
 8007942:	d1e0      	bne.n	8007906 <_free_r+0x26>
 8007944:	681c      	ldr	r4, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	6053      	str	r3, [r2, #4]
 800794a:	4421      	add	r1, r4
 800794c:	6011      	str	r1, [r2, #0]
 800794e:	e7da      	b.n	8007906 <_free_r+0x26>
 8007950:	d902      	bls.n	8007958 <_free_r+0x78>
 8007952:	230c      	movs	r3, #12
 8007954:	6003      	str	r3, [r0, #0]
 8007956:	e7d6      	b.n	8007906 <_free_r+0x26>
 8007958:	6825      	ldr	r5, [r4, #0]
 800795a:	1961      	adds	r1, r4, r5
 800795c:	428b      	cmp	r3, r1
 800795e:	bf04      	itt	eq
 8007960:	6819      	ldreq	r1, [r3, #0]
 8007962:	685b      	ldreq	r3, [r3, #4]
 8007964:	6063      	str	r3, [r4, #4]
 8007966:	bf04      	itt	eq
 8007968:	1949      	addeq	r1, r1, r5
 800796a:	6021      	streq	r1, [r4, #0]
 800796c:	6054      	str	r4, [r2, #4]
 800796e:	e7ca      	b.n	8007906 <_free_r+0x26>
 8007970:	b003      	add	sp, #12
 8007972:	bd30      	pop	{r4, r5, pc}
 8007974:	2000b6c0 	.word	0x2000b6c0

08007978 <sbrk_aligned>:
 8007978:	b570      	push	{r4, r5, r6, lr}
 800797a:	4e0e      	ldr	r6, [pc, #56]	; (80079b4 <sbrk_aligned+0x3c>)
 800797c:	460c      	mov	r4, r1
 800797e:	6831      	ldr	r1, [r6, #0]
 8007980:	4605      	mov	r5, r0
 8007982:	b911      	cbnz	r1, 800798a <sbrk_aligned+0x12>
 8007984:	f000 f88c 	bl	8007aa0 <_sbrk_r>
 8007988:	6030      	str	r0, [r6, #0]
 800798a:	4621      	mov	r1, r4
 800798c:	4628      	mov	r0, r5
 800798e:	f000 f887 	bl	8007aa0 <_sbrk_r>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	d00a      	beq.n	80079ac <sbrk_aligned+0x34>
 8007996:	1cc4      	adds	r4, r0, #3
 8007998:	f024 0403 	bic.w	r4, r4, #3
 800799c:	42a0      	cmp	r0, r4
 800799e:	d007      	beq.n	80079b0 <sbrk_aligned+0x38>
 80079a0:	1a21      	subs	r1, r4, r0
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f87c 	bl	8007aa0 <_sbrk_r>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d101      	bne.n	80079b0 <sbrk_aligned+0x38>
 80079ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80079b0:	4620      	mov	r0, r4
 80079b2:	bd70      	pop	{r4, r5, r6, pc}
 80079b4:	2000b6c4 	.word	0x2000b6c4

080079b8 <_malloc_r>:
 80079b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079bc:	1ccd      	adds	r5, r1, #3
 80079be:	f025 0503 	bic.w	r5, r5, #3
 80079c2:	3508      	adds	r5, #8
 80079c4:	2d0c      	cmp	r5, #12
 80079c6:	bf38      	it	cc
 80079c8:	250c      	movcc	r5, #12
 80079ca:	2d00      	cmp	r5, #0
 80079cc:	4607      	mov	r7, r0
 80079ce:	db01      	blt.n	80079d4 <_malloc_r+0x1c>
 80079d0:	42a9      	cmp	r1, r5
 80079d2:	d905      	bls.n	80079e0 <_malloc_r+0x28>
 80079d4:	230c      	movs	r3, #12
 80079d6:	603b      	str	r3, [r7, #0]
 80079d8:	2600      	movs	r6, #0
 80079da:	4630      	mov	r0, r6
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e0:	4e2e      	ldr	r6, [pc, #184]	; (8007a9c <_malloc_r+0xe4>)
 80079e2:	f000 f86d 	bl	8007ac0 <__malloc_lock>
 80079e6:	6833      	ldr	r3, [r6, #0]
 80079e8:	461c      	mov	r4, r3
 80079ea:	bb34      	cbnz	r4, 8007a3a <_malloc_r+0x82>
 80079ec:	4629      	mov	r1, r5
 80079ee:	4638      	mov	r0, r7
 80079f0:	f7ff ffc2 	bl	8007978 <sbrk_aligned>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	4604      	mov	r4, r0
 80079f8:	d14d      	bne.n	8007a96 <_malloc_r+0xde>
 80079fa:	6834      	ldr	r4, [r6, #0]
 80079fc:	4626      	mov	r6, r4
 80079fe:	2e00      	cmp	r6, #0
 8007a00:	d140      	bne.n	8007a84 <_malloc_r+0xcc>
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	4631      	mov	r1, r6
 8007a06:	4638      	mov	r0, r7
 8007a08:	eb04 0803 	add.w	r8, r4, r3
 8007a0c:	f000 f848 	bl	8007aa0 <_sbrk_r>
 8007a10:	4580      	cmp	r8, r0
 8007a12:	d13a      	bne.n	8007a8a <_malloc_r+0xd2>
 8007a14:	6821      	ldr	r1, [r4, #0]
 8007a16:	3503      	adds	r5, #3
 8007a18:	1a6d      	subs	r5, r5, r1
 8007a1a:	f025 0503 	bic.w	r5, r5, #3
 8007a1e:	3508      	adds	r5, #8
 8007a20:	2d0c      	cmp	r5, #12
 8007a22:	bf38      	it	cc
 8007a24:	250c      	movcc	r5, #12
 8007a26:	4629      	mov	r1, r5
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f7ff ffa5 	bl	8007978 <sbrk_aligned>
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d02b      	beq.n	8007a8a <_malloc_r+0xd2>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	442b      	add	r3, r5
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	e00e      	b.n	8007a58 <_malloc_r+0xa0>
 8007a3a:	6822      	ldr	r2, [r4, #0]
 8007a3c:	1b52      	subs	r2, r2, r5
 8007a3e:	d41e      	bmi.n	8007a7e <_malloc_r+0xc6>
 8007a40:	2a0b      	cmp	r2, #11
 8007a42:	d916      	bls.n	8007a72 <_malloc_r+0xba>
 8007a44:	1961      	adds	r1, r4, r5
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	6025      	str	r5, [r4, #0]
 8007a4a:	bf18      	it	ne
 8007a4c:	6059      	strne	r1, [r3, #4]
 8007a4e:	6863      	ldr	r3, [r4, #4]
 8007a50:	bf08      	it	eq
 8007a52:	6031      	streq	r1, [r6, #0]
 8007a54:	5162      	str	r2, [r4, r5]
 8007a56:	604b      	str	r3, [r1, #4]
 8007a58:	4638      	mov	r0, r7
 8007a5a:	f104 060b 	add.w	r6, r4, #11
 8007a5e:	f000 f835 	bl	8007acc <__malloc_unlock>
 8007a62:	f026 0607 	bic.w	r6, r6, #7
 8007a66:	1d23      	adds	r3, r4, #4
 8007a68:	1af2      	subs	r2, r6, r3
 8007a6a:	d0b6      	beq.n	80079da <_malloc_r+0x22>
 8007a6c:	1b9b      	subs	r3, r3, r6
 8007a6e:	50a3      	str	r3, [r4, r2]
 8007a70:	e7b3      	b.n	80079da <_malloc_r+0x22>
 8007a72:	6862      	ldr	r2, [r4, #4]
 8007a74:	42a3      	cmp	r3, r4
 8007a76:	bf0c      	ite	eq
 8007a78:	6032      	streq	r2, [r6, #0]
 8007a7a:	605a      	strne	r2, [r3, #4]
 8007a7c:	e7ec      	b.n	8007a58 <_malloc_r+0xa0>
 8007a7e:	4623      	mov	r3, r4
 8007a80:	6864      	ldr	r4, [r4, #4]
 8007a82:	e7b2      	b.n	80079ea <_malloc_r+0x32>
 8007a84:	4634      	mov	r4, r6
 8007a86:	6876      	ldr	r6, [r6, #4]
 8007a88:	e7b9      	b.n	80079fe <_malloc_r+0x46>
 8007a8a:	230c      	movs	r3, #12
 8007a8c:	603b      	str	r3, [r7, #0]
 8007a8e:	4638      	mov	r0, r7
 8007a90:	f000 f81c 	bl	8007acc <__malloc_unlock>
 8007a94:	e7a1      	b.n	80079da <_malloc_r+0x22>
 8007a96:	6025      	str	r5, [r4, #0]
 8007a98:	e7de      	b.n	8007a58 <_malloc_r+0xa0>
 8007a9a:	bf00      	nop
 8007a9c:	2000b6c0 	.word	0x2000b6c0

08007aa0 <_sbrk_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	; (8007abc <_sbrk_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7fb fd7a 	bl	80035a4 <_sbrk>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_sbrk_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_sbrk_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	2000b6c8 	.word	0x2000b6c8

08007ac0 <__malloc_lock>:
 8007ac0:	4801      	ldr	r0, [pc, #4]	; (8007ac8 <__malloc_lock+0x8>)
 8007ac2:	f000 b809 	b.w	8007ad8 <__retarget_lock_acquire_recursive>
 8007ac6:	bf00      	nop
 8007ac8:	2000b6cc 	.word	0x2000b6cc

08007acc <__malloc_unlock>:
 8007acc:	4801      	ldr	r0, [pc, #4]	; (8007ad4 <__malloc_unlock+0x8>)
 8007ace:	f000 b804 	b.w	8007ada <__retarget_lock_release_recursive>
 8007ad2:	bf00      	nop
 8007ad4:	2000b6cc 	.word	0x2000b6cc

08007ad8 <__retarget_lock_acquire_recursive>:
 8007ad8:	4770      	bx	lr

08007ada <__retarget_lock_release_recursive>:
 8007ada:	4770      	bx	lr
 8007adc:	0000      	movs	r0, r0
	...

08007ae0 <atan>:
 8007ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	ec55 4b10 	vmov	r4, r5, d0
 8007ae8:	4bc3      	ldr	r3, [pc, #780]	; (8007df8 <atan+0x318>)
 8007aea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007aee:	429e      	cmp	r6, r3
 8007af0:	46ab      	mov	fp, r5
 8007af2:	dd18      	ble.n	8007b26 <atan+0x46>
 8007af4:	4bc1      	ldr	r3, [pc, #772]	; (8007dfc <atan+0x31c>)
 8007af6:	429e      	cmp	r6, r3
 8007af8:	dc01      	bgt.n	8007afe <atan+0x1e>
 8007afa:	d109      	bne.n	8007b10 <atan+0x30>
 8007afc:	b144      	cbz	r4, 8007b10 <atan+0x30>
 8007afe:	4622      	mov	r2, r4
 8007b00:	462b      	mov	r3, r5
 8007b02:	4620      	mov	r0, r4
 8007b04:	4629      	mov	r1, r5
 8007b06:	f7f8 fb8d 	bl	8000224 <__adddf3>
 8007b0a:	4604      	mov	r4, r0
 8007b0c:	460d      	mov	r5, r1
 8007b0e:	e006      	b.n	8007b1e <atan+0x3e>
 8007b10:	f1bb 0f00 	cmp.w	fp, #0
 8007b14:	f300 8131 	bgt.w	8007d7a <atan+0x29a>
 8007b18:	a59b      	add	r5, pc, #620	; (adr r5, 8007d88 <atan+0x2a8>)
 8007b1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b1e:	ec45 4b10 	vmov	d0, r4, r5
 8007b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b26:	4bb6      	ldr	r3, [pc, #728]	; (8007e00 <atan+0x320>)
 8007b28:	429e      	cmp	r6, r3
 8007b2a:	dc14      	bgt.n	8007b56 <atan+0x76>
 8007b2c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007b30:	429e      	cmp	r6, r3
 8007b32:	dc0d      	bgt.n	8007b50 <atan+0x70>
 8007b34:	a396      	add	r3, pc, #600	; (adr r3, 8007d90 <atan+0x2b0>)
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	ee10 0a10 	vmov	r0, s0
 8007b3e:	4629      	mov	r1, r5
 8007b40:	f7f8 fb70 	bl	8000224 <__adddf3>
 8007b44:	4baf      	ldr	r3, [pc, #700]	; (8007e04 <atan+0x324>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	f7f8 ffb2 	bl	8000ab0 <__aeabi_dcmpgt>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d1e6      	bne.n	8007b1e <atan+0x3e>
 8007b50:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8007b54:	e02b      	b.n	8007bae <atan+0xce>
 8007b56:	f000 f9b7 	bl	8007ec8 <fabs>
 8007b5a:	4bab      	ldr	r3, [pc, #684]	; (8007e08 <atan+0x328>)
 8007b5c:	429e      	cmp	r6, r3
 8007b5e:	ec55 4b10 	vmov	r4, r5, d0
 8007b62:	f300 80bf 	bgt.w	8007ce4 <atan+0x204>
 8007b66:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007b6a:	429e      	cmp	r6, r3
 8007b6c:	f300 80a0 	bgt.w	8007cb0 <atan+0x1d0>
 8007b70:	ee10 2a10 	vmov	r2, s0
 8007b74:	ee10 0a10 	vmov	r0, s0
 8007b78:	462b      	mov	r3, r5
 8007b7a:	4629      	mov	r1, r5
 8007b7c:	f7f8 fb52 	bl	8000224 <__adddf3>
 8007b80:	4ba0      	ldr	r3, [pc, #640]	; (8007e04 <atan+0x324>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f7f8 fb4c 	bl	8000220 <__aeabi_dsub>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	460f      	mov	r7, r1
 8007b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b92:	4620      	mov	r0, r4
 8007b94:	4629      	mov	r1, r5
 8007b96:	f7f8 fb45 	bl	8000224 <__adddf3>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	f7f8 fe1f 	bl	80007e4 <__aeabi_ddiv>
 8007ba6:	f04f 0a00 	mov.w	sl, #0
 8007baa:	4604      	mov	r4, r0
 8007bac:	460d      	mov	r5, r1
 8007bae:	4622      	mov	r2, r4
 8007bb0:	462b      	mov	r3, r5
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	f7f8 fceb 	bl	8000590 <__aeabi_dmul>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4680      	mov	r8, r0
 8007bc0:	4689      	mov	r9, r1
 8007bc2:	f7f8 fce5 	bl	8000590 <__aeabi_dmul>
 8007bc6:	a374      	add	r3, pc, #464	; (adr r3, 8007d98 <atan+0x2b8>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	4606      	mov	r6, r0
 8007bce:	460f      	mov	r7, r1
 8007bd0:	f7f8 fcde 	bl	8000590 <__aeabi_dmul>
 8007bd4:	a372      	add	r3, pc, #456	; (adr r3, 8007da0 <atan+0x2c0>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f7f8 fb23 	bl	8000224 <__adddf3>
 8007bde:	4632      	mov	r2, r6
 8007be0:	463b      	mov	r3, r7
 8007be2:	f7f8 fcd5 	bl	8000590 <__aeabi_dmul>
 8007be6:	a370      	add	r3, pc, #448	; (adr r3, 8007da8 <atan+0x2c8>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 fb1a 	bl	8000224 <__adddf3>
 8007bf0:	4632      	mov	r2, r6
 8007bf2:	463b      	mov	r3, r7
 8007bf4:	f7f8 fccc 	bl	8000590 <__aeabi_dmul>
 8007bf8:	a36d      	add	r3, pc, #436	; (adr r3, 8007db0 <atan+0x2d0>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fb11 	bl	8000224 <__adddf3>
 8007c02:	4632      	mov	r2, r6
 8007c04:	463b      	mov	r3, r7
 8007c06:	f7f8 fcc3 	bl	8000590 <__aeabi_dmul>
 8007c0a:	a36b      	add	r3, pc, #428	; (adr r3, 8007db8 <atan+0x2d8>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f7f8 fb08 	bl	8000224 <__adddf3>
 8007c14:	4632      	mov	r2, r6
 8007c16:	463b      	mov	r3, r7
 8007c18:	f7f8 fcba 	bl	8000590 <__aeabi_dmul>
 8007c1c:	a368      	add	r3, pc, #416	; (adr r3, 8007dc0 <atan+0x2e0>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f7f8 faff 	bl	8000224 <__adddf3>
 8007c26:	4642      	mov	r2, r8
 8007c28:	464b      	mov	r3, r9
 8007c2a:	f7f8 fcb1 	bl	8000590 <__aeabi_dmul>
 8007c2e:	a366      	add	r3, pc, #408	; (adr r3, 8007dc8 <atan+0x2e8>)
 8007c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c34:	4680      	mov	r8, r0
 8007c36:	4689      	mov	r9, r1
 8007c38:	4630      	mov	r0, r6
 8007c3a:	4639      	mov	r1, r7
 8007c3c:	f7f8 fca8 	bl	8000590 <__aeabi_dmul>
 8007c40:	a363      	add	r3, pc, #396	; (adr r3, 8007dd0 <atan+0x2f0>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f7f8 faeb 	bl	8000220 <__aeabi_dsub>
 8007c4a:	4632      	mov	r2, r6
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	f7f8 fc9f 	bl	8000590 <__aeabi_dmul>
 8007c52:	a361      	add	r3, pc, #388	; (adr r3, 8007dd8 <atan+0x2f8>)
 8007c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c58:	f7f8 fae2 	bl	8000220 <__aeabi_dsub>
 8007c5c:	4632      	mov	r2, r6
 8007c5e:	463b      	mov	r3, r7
 8007c60:	f7f8 fc96 	bl	8000590 <__aeabi_dmul>
 8007c64:	a35e      	add	r3, pc, #376	; (adr r3, 8007de0 <atan+0x300>)
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	f7f8 fad9 	bl	8000220 <__aeabi_dsub>
 8007c6e:	4632      	mov	r2, r6
 8007c70:	463b      	mov	r3, r7
 8007c72:	f7f8 fc8d 	bl	8000590 <__aeabi_dmul>
 8007c76:	a35c      	add	r3, pc, #368	; (adr r3, 8007de8 <atan+0x308>)
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f7f8 fad0 	bl	8000220 <__aeabi_dsub>
 8007c80:	4632      	mov	r2, r6
 8007c82:	463b      	mov	r3, r7
 8007c84:	f7f8 fc84 	bl	8000590 <__aeabi_dmul>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	4640      	mov	r0, r8
 8007c8e:	4649      	mov	r1, r9
 8007c90:	f7f8 fac8 	bl	8000224 <__adddf3>
 8007c94:	4622      	mov	r2, r4
 8007c96:	462b      	mov	r3, r5
 8007c98:	f7f8 fc7a 	bl	8000590 <__aeabi_dmul>
 8007c9c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	d14b      	bne.n	8007d3e <atan+0x25e>
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	4629      	mov	r1, r5
 8007caa:	f7f8 fab9 	bl	8000220 <__aeabi_dsub>
 8007cae:	e72c      	b.n	8007b0a <atan+0x2a>
 8007cb0:	ee10 0a10 	vmov	r0, s0
 8007cb4:	4b53      	ldr	r3, [pc, #332]	; (8007e04 <atan+0x324>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	4629      	mov	r1, r5
 8007cba:	f7f8 fab1 	bl	8000220 <__aeabi_dsub>
 8007cbe:	4b51      	ldr	r3, [pc, #324]	; (8007e04 <atan+0x324>)
 8007cc0:	4606      	mov	r6, r0
 8007cc2:	460f      	mov	r7, r1
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	4629      	mov	r1, r5
 8007cca:	f7f8 faab 	bl	8000224 <__adddf3>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 fd85 	bl	80007e4 <__aeabi_ddiv>
 8007cda:	f04f 0a01 	mov.w	sl, #1
 8007cde:	4604      	mov	r4, r0
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	e764      	b.n	8007bae <atan+0xce>
 8007ce4:	4b49      	ldr	r3, [pc, #292]	; (8007e0c <atan+0x32c>)
 8007ce6:	429e      	cmp	r6, r3
 8007ce8:	da1d      	bge.n	8007d26 <atan+0x246>
 8007cea:	ee10 0a10 	vmov	r0, s0
 8007cee:	4b48      	ldr	r3, [pc, #288]	; (8007e10 <atan+0x330>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	f7f8 fa94 	bl	8000220 <__aeabi_dsub>
 8007cf8:	4b45      	ldr	r3, [pc, #276]	; (8007e10 <atan+0x330>)
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460f      	mov	r7, r1
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4620      	mov	r0, r4
 8007d02:	4629      	mov	r1, r5
 8007d04:	f7f8 fc44 	bl	8000590 <__aeabi_dmul>
 8007d08:	4b3e      	ldr	r3, [pc, #248]	; (8007e04 <atan+0x324>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f7f8 fa8a 	bl	8000224 <__adddf3>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4630      	mov	r0, r6
 8007d16:	4639      	mov	r1, r7
 8007d18:	f7f8 fd64 	bl	80007e4 <__aeabi_ddiv>
 8007d1c:	f04f 0a02 	mov.w	sl, #2
 8007d20:	4604      	mov	r4, r0
 8007d22:	460d      	mov	r5, r1
 8007d24:	e743      	b.n	8007bae <atan+0xce>
 8007d26:	462b      	mov	r3, r5
 8007d28:	ee10 2a10 	vmov	r2, s0
 8007d2c:	4939      	ldr	r1, [pc, #228]	; (8007e14 <atan+0x334>)
 8007d2e:	2000      	movs	r0, #0
 8007d30:	f7f8 fd58 	bl	80007e4 <__aeabi_ddiv>
 8007d34:	f04f 0a03 	mov.w	sl, #3
 8007d38:	4604      	mov	r4, r0
 8007d3a:	460d      	mov	r5, r1
 8007d3c:	e737      	b.n	8007bae <atan+0xce>
 8007d3e:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <atan+0x338>)
 8007d40:	4e36      	ldr	r6, [pc, #216]	; (8007e1c <atan+0x33c>)
 8007d42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007d46:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007d4a:	e9da 2300 	ldrd	r2, r3, [sl]
 8007d4e:	f7f8 fa67 	bl	8000220 <__aeabi_dsub>
 8007d52:	4622      	mov	r2, r4
 8007d54:	462b      	mov	r3, r5
 8007d56:	f7f8 fa63 	bl	8000220 <__aeabi_dsub>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007d62:	f7f8 fa5d 	bl	8000220 <__aeabi_dsub>
 8007d66:	f1bb 0f00 	cmp.w	fp, #0
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	460d      	mov	r5, r1
 8007d6e:	f6bf aed6 	bge.w	8007b1e <atan+0x3e>
 8007d72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d76:	461d      	mov	r5, r3
 8007d78:	e6d1      	b.n	8007b1e <atan+0x3e>
 8007d7a:	a51d      	add	r5, pc, #116	; (adr r5, 8007df0 <atan+0x310>)
 8007d7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007d80:	e6cd      	b.n	8007b1e <atan+0x3e>
 8007d82:	bf00      	nop
 8007d84:	f3af 8000 	nop.w
 8007d88:	54442d18 	.word	0x54442d18
 8007d8c:	bff921fb 	.word	0xbff921fb
 8007d90:	8800759c 	.word	0x8800759c
 8007d94:	7e37e43c 	.word	0x7e37e43c
 8007d98:	e322da11 	.word	0xe322da11
 8007d9c:	3f90ad3a 	.word	0x3f90ad3a
 8007da0:	24760deb 	.word	0x24760deb
 8007da4:	3fa97b4b 	.word	0x3fa97b4b
 8007da8:	a0d03d51 	.word	0xa0d03d51
 8007dac:	3fb10d66 	.word	0x3fb10d66
 8007db0:	c54c206e 	.word	0xc54c206e
 8007db4:	3fb745cd 	.word	0x3fb745cd
 8007db8:	920083ff 	.word	0x920083ff
 8007dbc:	3fc24924 	.word	0x3fc24924
 8007dc0:	5555550d 	.word	0x5555550d
 8007dc4:	3fd55555 	.word	0x3fd55555
 8007dc8:	2c6a6c2f 	.word	0x2c6a6c2f
 8007dcc:	bfa2b444 	.word	0xbfa2b444
 8007dd0:	52defd9a 	.word	0x52defd9a
 8007dd4:	3fadde2d 	.word	0x3fadde2d
 8007dd8:	af749a6d 	.word	0xaf749a6d
 8007ddc:	3fb3b0f2 	.word	0x3fb3b0f2
 8007de0:	fe231671 	.word	0xfe231671
 8007de4:	3fbc71c6 	.word	0x3fbc71c6
 8007de8:	9998ebc4 	.word	0x9998ebc4
 8007dec:	3fc99999 	.word	0x3fc99999
 8007df0:	54442d18 	.word	0x54442d18
 8007df4:	3ff921fb 	.word	0x3ff921fb
 8007df8:	440fffff 	.word	0x440fffff
 8007dfc:	7ff00000 	.word	0x7ff00000
 8007e00:	3fdbffff 	.word	0x3fdbffff
 8007e04:	3ff00000 	.word	0x3ff00000
 8007e08:	3ff2ffff 	.word	0x3ff2ffff
 8007e0c:	40038000 	.word	0x40038000
 8007e10:	3ff80000 	.word	0x3ff80000
 8007e14:	bff00000 	.word	0xbff00000
 8007e18:	08009d58 	.word	0x08009d58
 8007e1c:	08009d38 	.word	0x08009d38

08007e20 <cos>:
 8007e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e22:	ec53 2b10 	vmov	r2, r3, d0
 8007e26:	4826      	ldr	r0, [pc, #152]	; (8007ec0 <cos+0xa0>)
 8007e28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007e2c:	4281      	cmp	r1, r0
 8007e2e:	dc06      	bgt.n	8007e3e <cos+0x1e>
 8007e30:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007eb8 <cos+0x98>
 8007e34:	b005      	add	sp, #20
 8007e36:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e3a:	f001 b935 	b.w	80090a8 <__kernel_cos>
 8007e3e:	4821      	ldr	r0, [pc, #132]	; (8007ec4 <cos+0xa4>)
 8007e40:	4281      	cmp	r1, r0
 8007e42:	dd09      	ble.n	8007e58 <cos+0x38>
 8007e44:	ee10 0a10 	vmov	r0, s0
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f7f8 f9e9 	bl	8000220 <__aeabi_dsub>
 8007e4e:	ec41 0b10 	vmov	d0, r0, r1
 8007e52:	b005      	add	sp, #20
 8007e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e58:	4668      	mov	r0, sp
 8007e5a:	f000 fe65 	bl	8008b28 <__ieee754_rem_pio2>
 8007e5e:	f000 0003 	and.w	r0, r0, #3
 8007e62:	2801      	cmp	r0, #1
 8007e64:	d00b      	beq.n	8007e7e <cos+0x5e>
 8007e66:	2802      	cmp	r0, #2
 8007e68:	d016      	beq.n	8007e98 <cos+0x78>
 8007e6a:	b9e0      	cbnz	r0, 8007ea6 <cos+0x86>
 8007e6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e70:	ed9d 0b00 	vldr	d0, [sp]
 8007e74:	f001 f918 	bl	80090a8 <__kernel_cos>
 8007e78:	ec51 0b10 	vmov	r0, r1, d0
 8007e7c:	e7e7      	b.n	8007e4e <cos+0x2e>
 8007e7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e82:	ed9d 0b00 	vldr	d0, [sp]
 8007e86:	f001 fd27 	bl	80098d8 <__kernel_sin>
 8007e8a:	ec53 2b10 	vmov	r2, r3, d0
 8007e8e:	ee10 0a10 	vmov	r0, s0
 8007e92:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007e96:	e7da      	b.n	8007e4e <cos+0x2e>
 8007e98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007e9c:	ed9d 0b00 	vldr	d0, [sp]
 8007ea0:	f001 f902 	bl	80090a8 <__kernel_cos>
 8007ea4:	e7f1      	b.n	8007e8a <cos+0x6a>
 8007ea6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007eaa:	ed9d 0b00 	vldr	d0, [sp]
 8007eae:	2001      	movs	r0, #1
 8007eb0:	f001 fd12 	bl	80098d8 <__kernel_sin>
 8007eb4:	e7e0      	b.n	8007e78 <cos+0x58>
 8007eb6:	bf00      	nop
	...
 8007ec0:	3fe921fb 	.word	0x3fe921fb
 8007ec4:	7fefffff 	.word	0x7fefffff

08007ec8 <fabs>:
 8007ec8:	ec51 0b10 	vmov	r0, r1, d0
 8007ecc:	ee10 2a10 	vmov	r2, s0
 8007ed0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007ed4:	ec43 2b10 	vmov	d0, r2, r3
 8007ed8:	4770      	bx	lr
 8007eda:	0000      	movs	r0, r0
 8007edc:	0000      	movs	r0, r0
	...

08007ee0 <sin>:
 8007ee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ee2:	ec53 2b10 	vmov	r2, r3, d0
 8007ee6:	4828      	ldr	r0, [pc, #160]	; (8007f88 <sin+0xa8>)
 8007ee8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007eec:	4281      	cmp	r1, r0
 8007eee:	dc07      	bgt.n	8007f00 <sin+0x20>
 8007ef0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007f80 <sin+0xa0>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	b005      	add	sp, #20
 8007ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007efc:	f001 bcec 	b.w	80098d8 <__kernel_sin>
 8007f00:	4822      	ldr	r0, [pc, #136]	; (8007f8c <sin+0xac>)
 8007f02:	4281      	cmp	r1, r0
 8007f04:	dd09      	ble.n	8007f1a <sin+0x3a>
 8007f06:	ee10 0a10 	vmov	r0, s0
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	f7f8 f988 	bl	8000220 <__aeabi_dsub>
 8007f10:	ec41 0b10 	vmov	d0, r0, r1
 8007f14:	b005      	add	sp, #20
 8007f16:	f85d fb04 	ldr.w	pc, [sp], #4
 8007f1a:	4668      	mov	r0, sp
 8007f1c:	f000 fe04 	bl	8008b28 <__ieee754_rem_pio2>
 8007f20:	f000 0003 	and.w	r0, r0, #3
 8007f24:	2801      	cmp	r0, #1
 8007f26:	d00c      	beq.n	8007f42 <sin+0x62>
 8007f28:	2802      	cmp	r0, #2
 8007f2a:	d011      	beq.n	8007f50 <sin+0x70>
 8007f2c:	b9f0      	cbnz	r0, 8007f6c <sin+0x8c>
 8007f2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f32:	ed9d 0b00 	vldr	d0, [sp]
 8007f36:	2001      	movs	r0, #1
 8007f38:	f001 fcce 	bl	80098d8 <__kernel_sin>
 8007f3c:	ec51 0b10 	vmov	r0, r1, d0
 8007f40:	e7e6      	b.n	8007f10 <sin+0x30>
 8007f42:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f46:	ed9d 0b00 	vldr	d0, [sp]
 8007f4a:	f001 f8ad 	bl	80090a8 <__kernel_cos>
 8007f4e:	e7f5      	b.n	8007f3c <sin+0x5c>
 8007f50:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f54:	ed9d 0b00 	vldr	d0, [sp]
 8007f58:	2001      	movs	r0, #1
 8007f5a:	f001 fcbd 	bl	80098d8 <__kernel_sin>
 8007f5e:	ec53 2b10 	vmov	r2, r3, d0
 8007f62:	ee10 0a10 	vmov	r0, s0
 8007f66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f6a:	e7d1      	b.n	8007f10 <sin+0x30>
 8007f6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007f70:	ed9d 0b00 	vldr	d0, [sp]
 8007f74:	f001 f898 	bl	80090a8 <__kernel_cos>
 8007f78:	e7f1      	b.n	8007f5e <sin+0x7e>
 8007f7a:	bf00      	nop
 8007f7c:	f3af 8000 	nop.w
	...
 8007f88:	3fe921fb 	.word	0x3fe921fb
 8007f8c:	7fefffff 	.word	0x7fefffff

08007f90 <pow>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	ed2d 8b02 	vpush	{d8}
 8007f96:	eeb0 8a40 	vmov.f32	s16, s0
 8007f9a:	eef0 8a60 	vmov.f32	s17, s1
 8007f9e:	ec55 4b11 	vmov	r4, r5, d1
 8007fa2:	f000 f891 	bl	80080c8 <__ieee754_pow>
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	462b      	mov	r3, r5
 8007faa:	4620      	mov	r0, r4
 8007fac:	4629      	mov	r1, r5
 8007fae:	ec57 6b10 	vmov	r6, r7, d0
 8007fb2:	f7f8 fd87 	bl	8000ac4 <__aeabi_dcmpun>
 8007fb6:	2800      	cmp	r0, #0
 8007fb8:	d13b      	bne.n	8008032 <pow+0xa2>
 8007fba:	ec51 0b18 	vmov	r0, r1, d8
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f7f8 fd4d 	bl	8000a60 <__aeabi_dcmpeq>
 8007fc6:	b1b8      	cbz	r0, 8007ff8 <pow+0x68>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7f8 fd46 	bl	8000a60 <__aeabi_dcmpeq>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d146      	bne.n	8008066 <pow+0xd6>
 8007fd8:	ec45 4b10 	vmov	d0, r4, r5
 8007fdc:	f001 fd6a 	bl	8009ab4 <finite>
 8007fe0:	b338      	cbz	r0, 8008032 <pow+0xa2>
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	4629      	mov	r1, r5
 8007fea:	f7f8 fd43 	bl	8000a74 <__aeabi_dcmplt>
 8007fee:	b300      	cbz	r0, 8008032 <pow+0xa2>
 8007ff0:	f7ff fc1e 	bl	8007830 <__errno>
 8007ff4:	2322      	movs	r3, #34	; 0x22
 8007ff6:	e01b      	b.n	8008030 <pow+0xa0>
 8007ff8:	ec47 6b10 	vmov	d0, r6, r7
 8007ffc:	f001 fd5a 	bl	8009ab4 <finite>
 8008000:	b9e0      	cbnz	r0, 800803c <pow+0xac>
 8008002:	eeb0 0a48 	vmov.f32	s0, s16
 8008006:	eef0 0a68 	vmov.f32	s1, s17
 800800a:	f001 fd53 	bl	8009ab4 <finite>
 800800e:	b1a8      	cbz	r0, 800803c <pow+0xac>
 8008010:	ec45 4b10 	vmov	d0, r4, r5
 8008014:	f001 fd4e 	bl	8009ab4 <finite>
 8008018:	b180      	cbz	r0, 800803c <pow+0xac>
 800801a:	4632      	mov	r2, r6
 800801c:	463b      	mov	r3, r7
 800801e:	4630      	mov	r0, r6
 8008020:	4639      	mov	r1, r7
 8008022:	f7f8 fd4f 	bl	8000ac4 <__aeabi_dcmpun>
 8008026:	2800      	cmp	r0, #0
 8008028:	d0e2      	beq.n	8007ff0 <pow+0x60>
 800802a:	f7ff fc01 	bl	8007830 <__errno>
 800802e:	2321      	movs	r3, #33	; 0x21
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	ecbd 8b02 	vpop	{d8}
 8008036:	ec47 6b10 	vmov	d0, r6, r7
 800803a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800803c:	2200      	movs	r2, #0
 800803e:	2300      	movs	r3, #0
 8008040:	4630      	mov	r0, r6
 8008042:	4639      	mov	r1, r7
 8008044:	f7f8 fd0c 	bl	8000a60 <__aeabi_dcmpeq>
 8008048:	2800      	cmp	r0, #0
 800804a:	d0f2      	beq.n	8008032 <pow+0xa2>
 800804c:	eeb0 0a48 	vmov.f32	s0, s16
 8008050:	eef0 0a68 	vmov.f32	s1, s17
 8008054:	f001 fd2e 	bl	8009ab4 <finite>
 8008058:	2800      	cmp	r0, #0
 800805a:	d0ea      	beq.n	8008032 <pow+0xa2>
 800805c:	ec45 4b10 	vmov	d0, r4, r5
 8008060:	f001 fd28 	bl	8009ab4 <finite>
 8008064:	e7c3      	b.n	8007fee <pow+0x5e>
 8008066:	4f01      	ldr	r7, [pc, #4]	; (800806c <pow+0xdc>)
 8008068:	2600      	movs	r6, #0
 800806a:	e7e2      	b.n	8008032 <pow+0xa2>
 800806c:	3ff00000 	.word	0x3ff00000

08008070 <sqrt>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	ed2d 8b02 	vpush	{d8}
 8008076:	ec55 4b10 	vmov	r4, r5, d0
 800807a:	f000 ff61 	bl	8008f40 <__ieee754_sqrt>
 800807e:	4622      	mov	r2, r4
 8008080:	462b      	mov	r3, r5
 8008082:	4620      	mov	r0, r4
 8008084:	4629      	mov	r1, r5
 8008086:	eeb0 8a40 	vmov.f32	s16, s0
 800808a:	eef0 8a60 	vmov.f32	s17, s1
 800808e:	f7f8 fd19 	bl	8000ac4 <__aeabi_dcmpun>
 8008092:	b990      	cbnz	r0, 80080ba <sqrt+0x4a>
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 fcea 	bl	8000a74 <__aeabi_dcmplt>
 80080a0:	b158      	cbz	r0, 80080ba <sqrt+0x4a>
 80080a2:	f7ff fbc5 	bl	8007830 <__errno>
 80080a6:	2321      	movs	r3, #33	; 0x21
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	2200      	movs	r2, #0
 80080ac:	2300      	movs	r3, #0
 80080ae:	4610      	mov	r0, r2
 80080b0:	4619      	mov	r1, r3
 80080b2:	f7f8 fb97 	bl	80007e4 <__aeabi_ddiv>
 80080b6:	ec41 0b18 	vmov	d8, r0, r1
 80080ba:	eeb0 0a48 	vmov.f32	s0, s16
 80080be:	eef0 0a68 	vmov.f32	s1, s17
 80080c2:	ecbd 8b02 	vpop	{d8}
 80080c6:	bd38      	pop	{r3, r4, r5, pc}

080080c8 <__ieee754_pow>:
 80080c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080cc:	ed2d 8b06 	vpush	{d8-d10}
 80080d0:	b089      	sub	sp, #36	; 0x24
 80080d2:	ed8d 1b00 	vstr	d1, [sp]
 80080d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80080da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80080de:	ea58 0102 	orrs.w	r1, r8, r2
 80080e2:	ec57 6b10 	vmov	r6, r7, d0
 80080e6:	d115      	bne.n	8008114 <__ieee754_pow+0x4c>
 80080e8:	19b3      	adds	r3, r6, r6
 80080ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80080ee:	4152      	adcs	r2, r2
 80080f0:	4299      	cmp	r1, r3
 80080f2:	4b89      	ldr	r3, [pc, #548]	; (8008318 <__ieee754_pow+0x250>)
 80080f4:	4193      	sbcs	r3, r2
 80080f6:	f080 84d2 	bcs.w	8008a9e <__ieee754_pow+0x9d6>
 80080fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080fe:	4630      	mov	r0, r6
 8008100:	4639      	mov	r1, r7
 8008102:	f7f8 f88f 	bl	8000224 <__adddf3>
 8008106:	ec41 0b10 	vmov	d0, r0, r1
 800810a:	b009      	add	sp, #36	; 0x24
 800810c:	ecbd 8b06 	vpop	{d8-d10}
 8008110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008114:	4b81      	ldr	r3, [pc, #516]	; (800831c <__ieee754_pow+0x254>)
 8008116:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800811a:	429c      	cmp	r4, r3
 800811c:	ee10 aa10 	vmov	sl, s0
 8008120:	463d      	mov	r5, r7
 8008122:	dc06      	bgt.n	8008132 <__ieee754_pow+0x6a>
 8008124:	d101      	bne.n	800812a <__ieee754_pow+0x62>
 8008126:	2e00      	cmp	r6, #0
 8008128:	d1e7      	bne.n	80080fa <__ieee754_pow+0x32>
 800812a:	4598      	cmp	r8, r3
 800812c:	dc01      	bgt.n	8008132 <__ieee754_pow+0x6a>
 800812e:	d10f      	bne.n	8008150 <__ieee754_pow+0x88>
 8008130:	b172      	cbz	r2, 8008150 <__ieee754_pow+0x88>
 8008132:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008136:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800813a:	ea55 050a 	orrs.w	r5, r5, sl
 800813e:	d1dc      	bne.n	80080fa <__ieee754_pow+0x32>
 8008140:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008144:	18db      	adds	r3, r3, r3
 8008146:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800814a:	4152      	adcs	r2, r2
 800814c:	429d      	cmp	r5, r3
 800814e:	e7d0      	b.n	80080f2 <__ieee754_pow+0x2a>
 8008150:	2d00      	cmp	r5, #0
 8008152:	da3b      	bge.n	80081cc <__ieee754_pow+0x104>
 8008154:	4b72      	ldr	r3, [pc, #456]	; (8008320 <__ieee754_pow+0x258>)
 8008156:	4598      	cmp	r8, r3
 8008158:	dc51      	bgt.n	80081fe <__ieee754_pow+0x136>
 800815a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800815e:	4598      	cmp	r8, r3
 8008160:	f340 84ac 	ble.w	8008abc <__ieee754_pow+0x9f4>
 8008164:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008168:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800816c:	2b14      	cmp	r3, #20
 800816e:	dd0f      	ble.n	8008190 <__ieee754_pow+0xc8>
 8008170:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008174:	fa22 f103 	lsr.w	r1, r2, r3
 8008178:	fa01 f303 	lsl.w	r3, r1, r3
 800817c:	4293      	cmp	r3, r2
 800817e:	f040 849d 	bne.w	8008abc <__ieee754_pow+0x9f4>
 8008182:	f001 0101 	and.w	r1, r1, #1
 8008186:	f1c1 0302 	rsb	r3, r1, #2
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	b182      	cbz	r2, 80081b0 <__ieee754_pow+0xe8>
 800818e:	e05f      	b.n	8008250 <__ieee754_pow+0x188>
 8008190:	2a00      	cmp	r2, #0
 8008192:	d15b      	bne.n	800824c <__ieee754_pow+0x184>
 8008194:	f1c3 0314 	rsb	r3, r3, #20
 8008198:	fa48 f103 	asr.w	r1, r8, r3
 800819c:	fa01 f303 	lsl.w	r3, r1, r3
 80081a0:	4543      	cmp	r3, r8
 80081a2:	f040 8488 	bne.w	8008ab6 <__ieee754_pow+0x9ee>
 80081a6:	f001 0101 	and.w	r1, r1, #1
 80081aa:	f1c1 0302 	rsb	r3, r1, #2
 80081ae:	9304      	str	r3, [sp, #16]
 80081b0:	4b5c      	ldr	r3, [pc, #368]	; (8008324 <__ieee754_pow+0x25c>)
 80081b2:	4598      	cmp	r8, r3
 80081b4:	d132      	bne.n	800821c <__ieee754_pow+0x154>
 80081b6:	f1b9 0f00 	cmp.w	r9, #0
 80081ba:	f280 8478 	bge.w	8008aae <__ieee754_pow+0x9e6>
 80081be:	4959      	ldr	r1, [pc, #356]	; (8008324 <__ieee754_pow+0x25c>)
 80081c0:	4632      	mov	r2, r6
 80081c2:	463b      	mov	r3, r7
 80081c4:	2000      	movs	r0, #0
 80081c6:	f7f8 fb0d 	bl	80007e4 <__aeabi_ddiv>
 80081ca:	e79c      	b.n	8008106 <__ieee754_pow+0x3e>
 80081cc:	2300      	movs	r3, #0
 80081ce:	9304      	str	r3, [sp, #16]
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d13d      	bne.n	8008250 <__ieee754_pow+0x188>
 80081d4:	4b51      	ldr	r3, [pc, #324]	; (800831c <__ieee754_pow+0x254>)
 80081d6:	4598      	cmp	r8, r3
 80081d8:	d1ea      	bne.n	80081b0 <__ieee754_pow+0xe8>
 80081da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80081de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80081e2:	ea53 030a 	orrs.w	r3, r3, sl
 80081e6:	f000 845a 	beq.w	8008a9e <__ieee754_pow+0x9d6>
 80081ea:	4b4f      	ldr	r3, [pc, #316]	; (8008328 <__ieee754_pow+0x260>)
 80081ec:	429c      	cmp	r4, r3
 80081ee:	dd08      	ble.n	8008202 <__ieee754_pow+0x13a>
 80081f0:	f1b9 0f00 	cmp.w	r9, #0
 80081f4:	f2c0 8457 	blt.w	8008aa6 <__ieee754_pow+0x9de>
 80081f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081fc:	e783      	b.n	8008106 <__ieee754_pow+0x3e>
 80081fe:	2302      	movs	r3, #2
 8008200:	e7e5      	b.n	80081ce <__ieee754_pow+0x106>
 8008202:	f1b9 0f00 	cmp.w	r9, #0
 8008206:	f04f 0000 	mov.w	r0, #0
 800820a:	f04f 0100 	mov.w	r1, #0
 800820e:	f6bf af7a 	bge.w	8008106 <__ieee754_pow+0x3e>
 8008212:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008216:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800821a:	e774      	b.n	8008106 <__ieee754_pow+0x3e>
 800821c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008220:	d106      	bne.n	8008230 <__ieee754_pow+0x168>
 8008222:	4632      	mov	r2, r6
 8008224:	463b      	mov	r3, r7
 8008226:	4630      	mov	r0, r6
 8008228:	4639      	mov	r1, r7
 800822a:	f7f8 f9b1 	bl	8000590 <__aeabi_dmul>
 800822e:	e76a      	b.n	8008106 <__ieee754_pow+0x3e>
 8008230:	4b3e      	ldr	r3, [pc, #248]	; (800832c <__ieee754_pow+0x264>)
 8008232:	4599      	cmp	r9, r3
 8008234:	d10c      	bne.n	8008250 <__ieee754_pow+0x188>
 8008236:	2d00      	cmp	r5, #0
 8008238:	db0a      	blt.n	8008250 <__ieee754_pow+0x188>
 800823a:	ec47 6b10 	vmov	d0, r6, r7
 800823e:	b009      	add	sp, #36	; 0x24
 8008240:	ecbd 8b06 	vpop	{d8-d10}
 8008244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008248:	f000 be7a 	b.w	8008f40 <__ieee754_sqrt>
 800824c:	2300      	movs	r3, #0
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	ec47 6b10 	vmov	d0, r6, r7
 8008254:	f7ff fe38 	bl	8007ec8 <fabs>
 8008258:	ec51 0b10 	vmov	r0, r1, d0
 800825c:	f1ba 0f00 	cmp.w	sl, #0
 8008260:	d129      	bne.n	80082b6 <__ieee754_pow+0x1ee>
 8008262:	b124      	cbz	r4, 800826e <__ieee754_pow+0x1a6>
 8008264:	4b2f      	ldr	r3, [pc, #188]	; (8008324 <__ieee754_pow+0x25c>)
 8008266:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800826a:	429a      	cmp	r2, r3
 800826c:	d123      	bne.n	80082b6 <__ieee754_pow+0x1ee>
 800826e:	f1b9 0f00 	cmp.w	r9, #0
 8008272:	da05      	bge.n	8008280 <__ieee754_pow+0x1b8>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	2000      	movs	r0, #0
 800827a:	492a      	ldr	r1, [pc, #168]	; (8008324 <__ieee754_pow+0x25c>)
 800827c:	f7f8 fab2 	bl	80007e4 <__aeabi_ddiv>
 8008280:	2d00      	cmp	r5, #0
 8008282:	f6bf af40 	bge.w	8008106 <__ieee754_pow+0x3e>
 8008286:	9b04      	ldr	r3, [sp, #16]
 8008288:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800828c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008290:	4323      	orrs	r3, r4
 8008292:	d108      	bne.n	80082a6 <__ieee754_pow+0x1de>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4610      	mov	r0, r2
 800829a:	4619      	mov	r1, r3
 800829c:	f7f7 ffc0 	bl	8000220 <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	e78f      	b.n	80081c6 <__ieee754_pow+0xfe>
 80082a6:	9b04      	ldr	r3, [sp, #16]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	f47f af2c 	bne.w	8008106 <__ieee754_pow+0x3e>
 80082ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80082b2:	4619      	mov	r1, r3
 80082b4:	e727      	b.n	8008106 <__ieee754_pow+0x3e>
 80082b6:	0feb      	lsrs	r3, r5, #31
 80082b8:	3b01      	subs	r3, #1
 80082ba:	9306      	str	r3, [sp, #24]
 80082bc:	9a06      	ldr	r2, [sp, #24]
 80082be:	9b04      	ldr	r3, [sp, #16]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	d102      	bne.n	80082ca <__ieee754_pow+0x202>
 80082c4:	4632      	mov	r2, r6
 80082c6:	463b      	mov	r3, r7
 80082c8:	e7e6      	b.n	8008298 <__ieee754_pow+0x1d0>
 80082ca:	4b19      	ldr	r3, [pc, #100]	; (8008330 <__ieee754_pow+0x268>)
 80082cc:	4598      	cmp	r8, r3
 80082ce:	f340 80fb 	ble.w	80084c8 <__ieee754_pow+0x400>
 80082d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80082d6:	4598      	cmp	r8, r3
 80082d8:	4b13      	ldr	r3, [pc, #76]	; (8008328 <__ieee754_pow+0x260>)
 80082da:	dd0c      	ble.n	80082f6 <__ieee754_pow+0x22e>
 80082dc:	429c      	cmp	r4, r3
 80082de:	dc0f      	bgt.n	8008300 <__ieee754_pow+0x238>
 80082e0:	f1b9 0f00 	cmp.w	r9, #0
 80082e4:	da0f      	bge.n	8008306 <__ieee754_pow+0x23e>
 80082e6:	2000      	movs	r0, #0
 80082e8:	b009      	add	sp, #36	; 0x24
 80082ea:	ecbd 8b06 	vpop	{d8-d10}
 80082ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f2:	f001 bbd6 	b.w	8009aa2 <__math_oflow>
 80082f6:	429c      	cmp	r4, r3
 80082f8:	dbf2      	blt.n	80082e0 <__ieee754_pow+0x218>
 80082fa:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <__ieee754_pow+0x25c>)
 80082fc:	429c      	cmp	r4, r3
 80082fe:	dd19      	ble.n	8008334 <__ieee754_pow+0x26c>
 8008300:	f1b9 0f00 	cmp.w	r9, #0
 8008304:	dcef      	bgt.n	80082e6 <__ieee754_pow+0x21e>
 8008306:	2000      	movs	r0, #0
 8008308:	b009      	add	sp, #36	; 0x24
 800830a:	ecbd 8b06 	vpop	{d8-d10}
 800830e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008312:	f001 bbbd 	b.w	8009a90 <__math_uflow>
 8008316:	bf00      	nop
 8008318:	fff00000 	.word	0xfff00000
 800831c:	7ff00000 	.word	0x7ff00000
 8008320:	433fffff 	.word	0x433fffff
 8008324:	3ff00000 	.word	0x3ff00000
 8008328:	3fefffff 	.word	0x3fefffff
 800832c:	3fe00000 	.word	0x3fe00000
 8008330:	41e00000 	.word	0x41e00000
 8008334:	4b60      	ldr	r3, [pc, #384]	; (80084b8 <__ieee754_pow+0x3f0>)
 8008336:	2200      	movs	r2, #0
 8008338:	f7f7 ff72 	bl	8000220 <__aeabi_dsub>
 800833c:	a354      	add	r3, pc, #336	; (adr r3, 8008490 <__ieee754_pow+0x3c8>)
 800833e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008342:	4604      	mov	r4, r0
 8008344:	460d      	mov	r5, r1
 8008346:	f7f8 f923 	bl	8000590 <__aeabi_dmul>
 800834a:	a353      	add	r3, pc, #332	; (adr r3, 8008498 <__ieee754_pow+0x3d0>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	4606      	mov	r6, r0
 8008352:	460f      	mov	r7, r1
 8008354:	4620      	mov	r0, r4
 8008356:	4629      	mov	r1, r5
 8008358:	f7f8 f91a 	bl	8000590 <__aeabi_dmul>
 800835c:	4b57      	ldr	r3, [pc, #348]	; (80084bc <__ieee754_pow+0x3f4>)
 800835e:	4682      	mov	sl, r0
 8008360:	468b      	mov	fp, r1
 8008362:	2200      	movs	r2, #0
 8008364:	4620      	mov	r0, r4
 8008366:	4629      	mov	r1, r5
 8008368:	f7f8 f912 	bl	8000590 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	a14b      	add	r1, pc, #300	; (adr r1, 80084a0 <__ieee754_pow+0x3d8>)
 8008372:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008376:	f7f7 ff53 	bl	8000220 <__aeabi_dsub>
 800837a:	4622      	mov	r2, r4
 800837c:	462b      	mov	r3, r5
 800837e:	f7f8 f907 	bl	8000590 <__aeabi_dmul>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	2000      	movs	r0, #0
 8008388:	494d      	ldr	r1, [pc, #308]	; (80084c0 <__ieee754_pow+0x3f8>)
 800838a:	f7f7 ff49 	bl	8000220 <__aeabi_dsub>
 800838e:	4622      	mov	r2, r4
 8008390:	4680      	mov	r8, r0
 8008392:	4689      	mov	r9, r1
 8008394:	462b      	mov	r3, r5
 8008396:	4620      	mov	r0, r4
 8008398:	4629      	mov	r1, r5
 800839a:	f7f8 f8f9 	bl	8000590 <__aeabi_dmul>
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	4640      	mov	r0, r8
 80083a4:	4649      	mov	r1, r9
 80083a6:	f7f8 f8f3 	bl	8000590 <__aeabi_dmul>
 80083aa:	a33f      	add	r3, pc, #252	; (adr r3, 80084a8 <__ieee754_pow+0x3e0>)
 80083ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b0:	f7f8 f8ee 	bl	8000590 <__aeabi_dmul>
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4650      	mov	r0, sl
 80083ba:	4659      	mov	r1, fp
 80083bc:	f7f7 ff30 	bl	8000220 <__aeabi_dsub>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4680      	mov	r8, r0
 80083c6:	4689      	mov	r9, r1
 80083c8:	4630      	mov	r0, r6
 80083ca:	4639      	mov	r1, r7
 80083cc:	f7f7 ff2a 	bl	8000224 <__adddf3>
 80083d0:	2000      	movs	r0, #0
 80083d2:	4632      	mov	r2, r6
 80083d4:	463b      	mov	r3, r7
 80083d6:	4604      	mov	r4, r0
 80083d8:	460d      	mov	r5, r1
 80083da:	f7f7 ff21 	bl	8000220 <__aeabi_dsub>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	4640      	mov	r0, r8
 80083e4:	4649      	mov	r1, r9
 80083e6:	f7f7 ff1b 	bl	8000220 <__aeabi_dsub>
 80083ea:	9b04      	ldr	r3, [sp, #16]
 80083ec:	9a06      	ldr	r2, [sp, #24]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	4313      	orrs	r3, r2
 80083f2:	4682      	mov	sl, r0
 80083f4:	468b      	mov	fp, r1
 80083f6:	f040 81e7 	bne.w	80087c8 <__ieee754_pow+0x700>
 80083fa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80084b0 <__ieee754_pow+0x3e8>
 80083fe:	eeb0 8a47 	vmov.f32	s16, s14
 8008402:	eef0 8a67 	vmov.f32	s17, s15
 8008406:	e9dd 6700 	ldrd	r6, r7, [sp]
 800840a:	2600      	movs	r6, #0
 800840c:	4632      	mov	r2, r6
 800840e:	463b      	mov	r3, r7
 8008410:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008414:	f7f7 ff04 	bl	8000220 <__aeabi_dsub>
 8008418:	4622      	mov	r2, r4
 800841a:	462b      	mov	r3, r5
 800841c:	f7f8 f8b8 	bl	8000590 <__aeabi_dmul>
 8008420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008424:	4680      	mov	r8, r0
 8008426:	4689      	mov	r9, r1
 8008428:	4650      	mov	r0, sl
 800842a:	4659      	mov	r1, fp
 800842c:	f7f8 f8b0 	bl	8000590 <__aeabi_dmul>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	4640      	mov	r0, r8
 8008436:	4649      	mov	r1, r9
 8008438:	f7f7 fef4 	bl	8000224 <__adddf3>
 800843c:	4632      	mov	r2, r6
 800843e:	463b      	mov	r3, r7
 8008440:	4680      	mov	r8, r0
 8008442:	4689      	mov	r9, r1
 8008444:	4620      	mov	r0, r4
 8008446:	4629      	mov	r1, r5
 8008448:	f7f8 f8a2 	bl	8000590 <__aeabi_dmul>
 800844c:	460b      	mov	r3, r1
 800844e:	4604      	mov	r4, r0
 8008450:	460d      	mov	r5, r1
 8008452:	4602      	mov	r2, r0
 8008454:	4649      	mov	r1, r9
 8008456:	4640      	mov	r0, r8
 8008458:	f7f7 fee4 	bl	8000224 <__adddf3>
 800845c:	4b19      	ldr	r3, [pc, #100]	; (80084c4 <__ieee754_pow+0x3fc>)
 800845e:	4299      	cmp	r1, r3
 8008460:	ec45 4b19 	vmov	d9, r4, r5
 8008464:	4606      	mov	r6, r0
 8008466:	460f      	mov	r7, r1
 8008468:	468b      	mov	fp, r1
 800846a:	f340 82f1 	ble.w	8008a50 <__ieee754_pow+0x988>
 800846e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008472:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008476:	4303      	orrs	r3, r0
 8008478:	f000 81e4 	beq.w	8008844 <__ieee754_pow+0x77c>
 800847c:	ec51 0b18 	vmov	r0, r1, d8
 8008480:	2200      	movs	r2, #0
 8008482:	2300      	movs	r3, #0
 8008484:	f7f8 faf6 	bl	8000a74 <__aeabi_dcmplt>
 8008488:	3800      	subs	r0, #0
 800848a:	bf18      	it	ne
 800848c:	2001      	movne	r0, #1
 800848e:	e72b      	b.n	80082e8 <__ieee754_pow+0x220>
 8008490:	60000000 	.word	0x60000000
 8008494:	3ff71547 	.word	0x3ff71547
 8008498:	f85ddf44 	.word	0xf85ddf44
 800849c:	3e54ae0b 	.word	0x3e54ae0b
 80084a0:	55555555 	.word	0x55555555
 80084a4:	3fd55555 	.word	0x3fd55555
 80084a8:	652b82fe 	.word	0x652b82fe
 80084ac:	3ff71547 	.word	0x3ff71547
 80084b0:	00000000 	.word	0x00000000
 80084b4:	bff00000 	.word	0xbff00000
 80084b8:	3ff00000 	.word	0x3ff00000
 80084bc:	3fd00000 	.word	0x3fd00000
 80084c0:	3fe00000 	.word	0x3fe00000
 80084c4:	408fffff 	.word	0x408fffff
 80084c8:	4bd5      	ldr	r3, [pc, #852]	; (8008820 <__ieee754_pow+0x758>)
 80084ca:	402b      	ands	r3, r5
 80084cc:	2200      	movs	r2, #0
 80084ce:	b92b      	cbnz	r3, 80084dc <__ieee754_pow+0x414>
 80084d0:	4bd4      	ldr	r3, [pc, #848]	; (8008824 <__ieee754_pow+0x75c>)
 80084d2:	f7f8 f85d 	bl	8000590 <__aeabi_dmul>
 80084d6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80084da:	460c      	mov	r4, r1
 80084dc:	1523      	asrs	r3, r4, #20
 80084de:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80084e2:	4413      	add	r3, r2
 80084e4:	9305      	str	r3, [sp, #20]
 80084e6:	4bd0      	ldr	r3, [pc, #832]	; (8008828 <__ieee754_pow+0x760>)
 80084e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80084ec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80084f0:	429c      	cmp	r4, r3
 80084f2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80084f6:	dd08      	ble.n	800850a <__ieee754_pow+0x442>
 80084f8:	4bcc      	ldr	r3, [pc, #816]	; (800882c <__ieee754_pow+0x764>)
 80084fa:	429c      	cmp	r4, r3
 80084fc:	f340 8162 	ble.w	80087c4 <__ieee754_pow+0x6fc>
 8008500:	9b05      	ldr	r3, [sp, #20]
 8008502:	3301      	adds	r3, #1
 8008504:	9305      	str	r3, [sp, #20]
 8008506:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800850a:	2400      	movs	r4, #0
 800850c:	00e3      	lsls	r3, r4, #3
 800850e:	9307      	str	r3, [sp, #28]
 8008510:	4bc7      	ldr	r3, [pc, #796]	; (8008830 <__ieee754_pow+0x768>)
 8008512:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008516:	ed93 7b00 	vldr	d7, [r3]
 800851a:	4629      	mov	r1, r5
 800851c:	ec53 2b17 	vmov	r2, r3, d7
 8008520:	eeb0 9a47 	vmov.f32	s18, s14
 8008524:	eef0 9a67 	vmov.f32	s19, s15
 8008528:	4682      	mov	sl, r0
 800852a:	f7f7 fe79 	bl	8000220 <__aeabi_dsub>
 800852e:	4652      	mov	r2, sl
 8008530:	4606      	mov	r6, r0
 8008532:	460f      	mov	r7, r1
 8008534:	462b      	mov	r3, r5
 8008536:	ec51 0b19 	vmov	r0, r1, d9
 800853a:	f7f7 fe73 	bl	8000224 <__adddf3>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	2000      	movs	r0, #0
 8008544:	49bb      	ldr	r1, [pc, #748]	; (8008834 <__ieee754_pow+0x76c>)
 8008546:	f7f8 f94d 	bl	80007e4 <__aeabi_ddiv>
 800854a:	ec41 0b1a 	vmov	d10, r0, r1
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4630      	mov	r0, r6
 8008554:	4639      	mov	r1, r7
 8008556:	f7f8 f81b 	bl	8000590 <__aeabi_dmul>
 800855a:	2300      	movs	r3, #0
 800855c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008560:	9302      	str	r3, [sp, #8]
 8008562:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008566:	46ab      	mov	fp, r5
 8008568:	106d      	asrs	r5, r5, #1
 800856a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800856e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008572:	ec41 0b18 	vmov	d8, r0, r1
 8008576:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800857a:	2200      	movs	r2, #0
 800857c:	4640      	mov	r0, r8
 800857e:	4649      	mov	r1, r9
 8008580:	4614      	mov	r4, r2
 8008582:	461d      	mov	r5, r3
 8008584:	f7f8 f804 	bl	8000590 <__aeabi_dmul>
 8008588:	4602      	mov	r2, r0
 800858a:	460b      	mov	r3, r1
 800858c:	4630      	mov	r0, r6
 800858e:	4639      	mov	r1, r7
 8008590:	f7f7 fe46 	bl	8000220 <__aeabi_dsub>
 8008594:	ec53 2b19 	vmov	r2, r3, d9
 8008598:	4606      	mov	r6, r0
 800859a:	460f      	mov	r7, r1
 800859c:	4620      	mov	r0, r4
 800859e:	4629      	mov	r1, r5
 80085a0:	f7f7 fe3e 	bl	8000220 <__aeabi_dsub>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	4650      	mov	r0, sl
 80085aa:	4659      	mov	r1, fp
 80085ac:	f7f7 fe38 	bl	8000220 <__aeabi_dsub>
 80085b0:	4642      	mov	r2, r8
 80085b2:	464b      	mov	r3, r9
 80085b4:	f7f7 ffec 	bl	8000590 <__aeabi_dmul>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	4630      	mov	r0, r6
 80085be:	4639      	mov	r1, r7
 80085c0:	f7f7 fe2e 	bl	8000220 <__aeabi_dsub>
 80085c4:	ec53 2b1a 	vmov	r2, r3, d10
 80085c8:	f7f7 ffe2 	bl	8000590 <__aeabi_dmul>
 80085cc:	ec53 2b18 	vmov	r2, r3, d8
 80085d0:	ec41 0b19 	vmov	d9, r0, r1
 80085d4:	ec51 0b18 	vmov	r0, r1, d8
 80085d8:	f7f7 ffda 	bl	8000590 <__aeabi_dmul>
 80085dc:	a37c      	add	r3, pc, #496	; (adr r3, 80087d0 <__ieee754_pow+0x708>)
 80085de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e2:	4604      	mov	r4, r0
 80085e4:	460d      	mov	r5, r1
 80085e6:	f7f7 ffd3 	bl	8000590 <__aeabi_dmul>
 80085ea:	a37b      	add	r3, pc, #492	; (adr r3, 80087d8 <__ieee754_pow+0x710>)
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f7f7 fe18 	bl	8000224 <__adddf3>
 80085f4:	4622      	mov	r2, r4
 80085f6:	462b      	mov	r3, r5
 80085f8:	f7f7 ffca 	bl	8000590 <__aeabi_dmul>
 80085fc:	a378      	add	r3, pc, #480	; (adr r3, 80087e0 <__ieee754_pow+0x718>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	f7f7 fe0f 	bl	8000224 <__adddf3>
 8008606:	4622      	mov	r2, r4
 8008608:	462b      	mov	r3, r5
 800860a:	f7f7 ffc1 	bl	8000590 <__aeabi_dmul>
 800860e:	a376      	add	r3, pc, #472	; (adr r3, 80087e8 <__ieee754_pow+0x720>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f7f7 fe06 	bl	8000224 <__adddf3>
 8008618:	4622      	mov	r2, r4
 800861a:	462b      	mov	r3, r5
 800861c:	f7f7 ffb8 	bl	8000590 <__aeabi_dmul>
 8008620:	a373      	add	r3, pc, #460	; (adr r3, 80087f0 <__ieee754_pow+0x728>)
 8008622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008626:	f7f7 fdfd 	bl	8000224 <__adddf3>
 800862a:	4622      	mov	r2, r4
 800862c:	462b      	mov	r3, r5
 800862e:	f7f7 ffaf 	bl	8000590 <__aeabi_dmul>
 8008632:	a371      	add	r3, pc, #452	; (adr r3, 80087f8 <__ieee754_pow+0x730>)
 8008634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008638:	f7f7 fdf4 	bl	8000224 <__adddf3>
 800863c:	4622      	mov	r2, r4
 800863e:	4606      	mov	r6, r0
 8008640:	460f      	mov	r7, r1
 8008642:	462b      	mov	r3, r5
 8008644:	4620      	mov	r0, r4
 8008646:	4629      	mov	r1, r5
 8008648:	f7f7 ffa2 	bl	8000590 <__aeabi_dmul>
 800864c:	4602      	mov	r2, r0
 800864e:	460b      	mov	r3, r1
 8008650:	4630      	mov	r0, r6
 8008652:	4639      	mov	r1, r7
 8008654:	f7f7 ff9c 	bl	8000590 <__aeabi_dmul>
 8008658:	4642      	mov	r2, r8
 800865a:	4604      	mov	r4, r0
 800865c:	460d      	mov	r5, r1
 800865e:	464b      	mov	r3, r9
 8008660:	ec51 0b18 	vmov	r0, r1, d8
 8008664:	f7f7 fdde 	bl	8000224 <__adddf3>
 8008668:	ec53 2b19 	vmov	r2, r3, d9
 800866c:	f7f7 ff90 	bl	8000590 <__aeabi_dmul>
 8008670:	4622      	mov	r2, r4
 8008672:	462b      	mov	r3, r5
 8008674:	f7f7 fdd6 	bl	8000224 <__adddf3>
 8008678:	4642      	mov	r2, r8
 800867a:	4682      	mov	sl, r0
 800867c:	468b      	mov	fp, r1
 800867e:	464b      	mov	r3, r9
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7f7 ff84 	bl	8000590 <__aeabi_dmul>
 8008688:	4b6b      	ldr	r3, [pc, #428]	; (8008838 <__ieee754_pow+0x770>)
 800868a:	2200      	movs	r2, #0
 800868c:	4606      	mov	r6, r0
 800868e:	460f      	mov	r7, r1
 8008690:	f7f7 fdc8 	bl	8000224 <__adddf3>
 8008694:	4652      	mov	r2, sl
 8008696:	465b      	mov	r3, fp
 8008698:	f7f7 fdc4 	bl	8000224 <__adddf3>
 800869c:	2000      	movs	r0, #0
 800869e:	4604      	mov	r4, r0
 80086a0:	460d      	mov	r5, r1
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	4640      	mov	r0, r8
 80086a8:	4649      	mov	r1, r9
 80086aa:	f7f7 ff71 	bl	8000590 <__aeabi_dmul>
 80086ae:	4b62      	ldr	r3, [pc, #392]	; (8008838 <__ieee754_pow+0x770>)
 80086b0:	4680      	mov	r8, r0
 80086b2:	4689      	mov	r9, r1
 80086b4:	2200      	movs	r2, #0
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7f7 fdb1 	bl	8000220 <__aeabi_dsub>
 80086be:	4632      	mov	r2, r6
 80086c0:	463b      	mov	r3, r7
 80086c2:	f7f7 fdad 	bl	8000220 <__aeabi_dsub>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4650      	mov	r0, sl
 80086cc:	4659      	mov	r1, fp
 80086ce:	f7f7 fda7 	bl	8000220 <__aeabi_dsub>
 80086d2:	ec53 2b18 	vmov	r2, r3, d8
 80086d6:	f7f7 ff5b 	bl	8000590 <__aeabi_dmul>
 80086da:	4622      	mov	r2, r4
 80086dc:	4606      	mov	r6, r0
 80086de:	460f      	mov	r7, r1
 80086e0:	462b      	mov	r3, r5
 80086e2:	ec51 0b19 	vmov	r0, r1, d9
 80086e6:	f7f7 ff53 	bl	8000590 <__aeabi_dmul>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4630      	mov	r0, r6
 80086f0:	4639      	mov	r1, r7
 80086f2:	f7f7 fd97 	bl	8000224 <__adddf3>
 80086f6:	4606      	mov	r6, r0
 80086f8:	460f      	mov	r7, r1
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4640      	mov	r0, r8
 8008700:	4649      	mov	r1, r9
 8008702:	f7f7 fd8f 	bl	8000224 <__adddf3>
 8008706:	a33e      	add	r3, pc, #248	; (adr r3, 8008800 <__ieee754_pow+0x738>)
 8008708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870c:	2000      	movs	r0, #0
 800870e:	4604      	mov	r4, r0
 8008710:	460d      	mov	r5, r1
 8008712:	f7f7 ff3d 	bl	8000590 <__aeabi_dmul>
 8008716:	4642      	mov	r2, r8
 8008718:	ec41 0b18 	vmov	d8, r0, r1
 800871c:	464b      	mov	r3, r9
 800871e:	4620      	mov	r0, r4
 8008720:	4629      	mov	r1, r5
 8008722:	f7f7 fd7d 	bl	8000220 <__aeabi_dsub>
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	4630      	mov	r0, r6
 800872c:	4639      	mov	r1, r7
 800872e:	f7f7 fd77 	bl	8000220 <__aeabi_dsub>
 8008732:	a335      	add	r3, pc, #212	; (adr r3, 8008808 <__ieee754_pow+0x740>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 ff2a 	bl	8000590 <__aeabi_dmul>
 800873c:	a334      	add	r3, pc, #208	; (adr r3, 8008810 <__ieee754_pow+0x748>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	4606      	mov	r6, r0
 8008744:	460f      	mov	r7, r1
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	f7f7 ff21 	bl	8000590 <__aeabi_dmul>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4630      	mov	r0, r6
 8008754:	4639      	mov	r1, r7
 8008756:	f7f7 fd65 	bl	8000224 <__adddf3>
 800875a:	9a07      	ldr	r2, [sp, #28]
 800875c:	4b37      	ldr	r3, [pc, #220]	; (800883c <__ieee754_pow+0x774>)
 800875e:	4413      	add	r3, r2
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	f7f7 fd5e 	bl	8000224 <__adddf3>
 8008768:	4682      	mov	sl, r0
 800876a:	9805      	ldr	r0, [sp, #20]
 800876c:	468b      	mov	fp, r1
 800876e:	f7f7 fea5 	bl	80004bc <__aeabi_i2d>
 8008772:	9a07      	ldr	r2, [sp, #28]
 8008774:	4b32      	ldr	r3, [pc, #200]	; (8008840 <__ieee754_pow+0x778>)
 8008776:	4413      	add	r3, r2
 8008778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800877c:	4606      	mov	r6, r0
 800877e:	460f      	mov	r7, r1
 8008780:	4652      	mov	r2, sl
 8008782:	465b      	mov	r3, fp
 8008784:	ec51 0b18 	vmov	r0, r1, d8
 8008788:	f7f7 fd4c 	bl	8000224 <__adddf3>
 800878c:	4642      	mov	r2, r8
 800878e:	464b      	mov	r3, r9
 8008790:	f7f7 fd48 	bl	8000224 <__adddf3>
 8008794:	4632      	mov	r2, r6
 8008796:	463b      	mov	r3, r7
 8008798:	f7f7 fd44 	bl	8000224 <__adddf3>
 800879c:	2000      	movs	r0, #0
 800879e:	4632      	mov	r2, r6
 80087a0:	463b      	mov	r3, r7
 80087a2:	4604      	mov	r4, r0
 80087a4:	460d      	mov	r5, r1
 80087a6:	f7f7 fd3b 	bl	8000220 <__aeabi_dsub>
 80087aa:	4642      	mov	r2, r8
 80087ac:	464b      	mov	r3, r9
 80087ae:	f7f7 fd37 	bl	8000220 <__aeabi_dsub>
 80087b2:	ec53 2b18 	vmov	r2, r3, d8
 80087b6:	f7f7 fd33 	bl	8000220 <__aeabi_dsub>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4650      	mov	r0, sl
 80087c0:	4659      	mov	r1, fp
 80087c2:	e610      	b.n	80083e6 <__ieee754_pow+0x31e>
 80087c4:	2401      	movs	r4, #1
 80087c6:	e6a1      	b.n	800850c <__ieee754_pow+0x444>
 80087c8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008818 <__ieee754_pow+0x750>
 80087cc:	e617      	b.n	80083fe <__ieee754_pow+0x336>
 80087ce:	bf00      	nop
 80087d0:	4a454eef 	.word	0x4a454eef
 80087d4:	3fca7e28 	.word	0x3fca7e28
 80087d8:	93c9db65 	.word	0x93c9db65
 80087dc:	3fcd864a 	.word	0x3fcd864a
 80087e0:	a91d4101 	.word	0xa91d4101
 80087e4:	3fd17460 	.word	0x3fd17460
 80087e8:	518f264d 	.word	0x518f264d
 80087ec:	3fd55555 	.word	0x3fd55555
 80087f0:	db6fabff 	.word	0xdb6fabff
 80087f4:	3fdb6db6 	.word	0x3fdb6db6
 80087f8:	33333303 	.word	0x33333303
 80087fc:	3fe33333 	.word	0x3fe33333
 8008800:	e0000000 	.word	0xe0000000
 8008804:	3feec709 	.word	0x3feec709
 8008808:	dc3a03fd 	.word	0xdc3a03fd
 800880c:	3feec709 	.word	0x3feec709
 8008810:	145b01f5 	.word	0x145b01f5
 8008814:	be3e2fe0 	.word	0xbe3e2fe0
 8008818:	00000000 	.word	0x00000000
 800881c:	3ff00000 	.word	0x3ff00000
 8008820:	7ff00000 	.word	0x7ff00000
 8008824:	43400000 	.word	0x43400000
 8008828:	0003988e 	.word	0x0003988e
 800882c:	000bb679 	.word	0x000bb679
 8008830:	08009d78 	.word	0x08009d78
 8008834:	3ff00000 	.word	0x3ff00000
 8008838:	40080000 	.word	0x40080000
 800883c:	08009d98 	.word	0x08009d98
 8008840:	08009d88 	.word	0x08009d88
 8008844:	a3b5      	add	r3, pc, #724	; (adr r3, 8008b1c <__ieee754_pow+0xa54>)
 8008846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884a:	4640      	mov	r0, r8
 800884c:	4649      	mov	r1, r9
 800884e:	f7f7 fce9 	bl	8000224 <__adddf3>
 8008852:	4622      	mov	r2, r4
 8008854:	ec41 0b1a 	vmov	d10, r0, r1
 8008858:	462b      	mov	r3, r5
 800885a:	4630      	mov	r0, r6
 800885c:	4639      	mov	r1, r7
 800885e:	f7f7 fcdf 	bl	8000220 <__aeabi_dsub>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	ec51 0b1a 	vmov	r0, r1, d10
 800886a:	f7f8 f921 	bl	8000ab0 <__aeabi_dcmpgt>
 800886e:	2800      	cmp	r0, #0
 8008870:	f47f ae04 	bne.w	800847c <__ieee754_pow+0x3b4>
 8008874:	4aa4      	ldr	r2, [pc, #656]	; (8008b08 <__ieee754_pow+0xa40>)
 8008876:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800887a:	4293      	cmp	r3, r2
 800887c:	f340 8108 	ble.w	8008a90 <__ieee754_pow+0x9c8>
 8008880:	151b      	asrs	r3, r3, #20
 8008882:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008886:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800888a:	fa4a f303 	asr.w	r3, sl, r3
 800888e:	445b      	add	r3, fp
 8008890:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008894:	4e9d      	ldr	r6, [pc, #628]	; (8008b0c <__ieee754_pow+0xa44>)
 8008896:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800889a:	4116      	asrs	r6, r2
 800889c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80088a0:	2000      	movs	r0, #0
 80088a2:	ea23 0106 	bic.w	r1, r3, r6
 80088a6:	f1c2 0214 	rsb	r2, r2, #20
 80088aa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80088ae:	fa4a fa02 	asr.w	sl, sl, r2
 80088b2:	f1bb 0f00 	cmp.w	fp, #0
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	4620      	mov	r0, r4
 80088bc:	4629      	mov	r1, r5
 80088be:	bfb8      	it	lt
 80088c0:	f1ca 0a00 	rsblt	sl, sl, #0
 80088c4:	f7f7 fcac 	bl	8000220 <__aeabi_dsub>
 80088c8:	ec41 0b19 	vmov	d9, r0, r1
 80088cc:	4642      	mov	r2, r8
 80088ce:	464b      	mov	r3, r9
 80088d0:	ec51 0b19 	vmov	r0, r1, d9
 80088d4:	f7f7 fca6 	bl	8000224 <__adddf3>
 80088d8:	a37b      	add	r3, pc, #492	; (adr r3, 8008ac8 <__ieee754_pow+0xa00>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	2000      	movs	r0, #0
 80088e0:	4604      	mov	r4, r0
 80088e2:	460d      	mov	r5, r1
 80088e4:	f7f7 fe54 	bl	8000590 <__aeabi_dmul>
 80088e8:	ec53 2b19 	vmov	r2, r3, d9
 80088ec:	4606      	mov	r6, r0
 80088ee:	460f      	mov	r7, r1
 80088f0:	4620      	mov	r0, r4
 80088f2:	4629      	mov	r1, r5
 80088f4:	f7f7 fc94 	bl	8000220 <__aeabi_dsub>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	4640      	mov	r0, r8
 80088fe:	4649      	mov	r1, r9
 8008900:	f7f7 fc8e 	bl	8000220 <__aeabi_dsub>
 8008904:	a372      	add	r3, pc, #456	; (adr r3, 8008ad0 <__ieee754_pow+0xa08>)
 8008906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890a:	f7f7 fe41 	bl	8000590 <__aeabi_dmul>
 800890e:	a372      	add	r3, pc, #456	; (adr r3, 8008ad8 <__ieee754_pow+0xa10>)
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	4680      	mov	r8, r0
 8008916:	4689      	mov	r9, r1
 8008918:	4620      	mov	r0, r4
 800891a:	4629      	mov	r1, r5
 800891c:	f7f7 fe38 	bl	8000590 <__aeabi_dmul>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4640      	mov	r0, r8
 8008926:	4649      	mov	r1, r9
 8008928:	f7f7 fc7c 	bl	8000224 <__adddf3>
 800892c:	4604      	mov	r4, r0
 800892e:	460d      	mov	r5, r1
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4630      	mov	r0, r6
 8008936:	4639      	mov	r1, r7
 8008938:	f7f7 fc74 	bl	8000224 <__adddf3>
 800893c:	4632      	mov	r2, r6
 800893e:	463b      	mov	r3, r7
 8008940:	4680      	mov	r8, r0
 8008942:	4689      	mov	r9, r1
 8008944:	f7f7 fc6c 	bl	8000220 <__aeabi_dsub>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f7 fc66 	bl	8000220 <__aeabi_dsub>
 8008954:	4642      	mov	r2, r8
 8008956:	4606      	mov	r6, r0
 8008958:	460f      	mov	r7, r1
 800895a:	464b      	mov	r3, r9
 800895c:	4640      	mov	r0, r8
 800895e:	4649      	mov	r1, r9
 8008960:	f7f7 fe16 	bl	8000590 <__aeabi_dmul>
 8008964:	a35e      	add	r3, pc, #376	; (adr r3, 8008ae0 <__ieee754_pow+0xa18>)
 8008966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896a:	4604      	mov	r4, r0
 800896c:	460d      	mov	r5, r1
 800896e:	f7f7 fe0f 	bl	8000590 <__aeabi_dmul>
 8008972:	a35d      	add	r3, pc, #372	; (adr r3, 8008ae8 <__ieee754_pow+0xa20>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fc52 	bl	8000220 <__aeabi_dsub>
 800897c:	4622      	mov	r2, r4
 800897e:	462b      	mov	r3, r5
 8008980:	f7f7 fe06 	bl	8000590 <__aeabi_dmul>
 8008984:	a35a      	add	r3, pc, #360	; (adr r3, 8008af0 <__ieee754_pow+0xa28>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 fc4b 	bl	8000224 <__adddf3>
 800898e:	4622      	mov	r2, r4
 8008990:	462b      	mov	r3, r5
 8008992:	f7f7 fdfd 	bl	8000590 <__aeabi_dmul>
 8008996:	a358      	add	r3, pc, #352	; (adr r3, 8008af8 <__ieee754_pow+0xa30>)
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f7f7 fc40 	bl	8000220 <__aeabi_dsub>
 80089a0:	4622      	mov	r2, r4
 80089a2:	462b      	mov	r3, r5
 80089a4:	f7f7 fdf4 	bl	8000590 <__aeabi_dmul>
 80089a8:	a355      	add	r3, pc, #340	; (adr r3, 8008b00 <__ieee754_pow+0xa38>)
 80089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ae:	f7f7 fc39 	bl	8000224 <__adddf3>
 80089b2:	4622      	mov	r2, r4
 80089b4:	462b      	mov	r3, r5
 80089b6:	f7f7 fdeb 	bl	8000590 <__aeabi_dmul>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	4640      	mov	r0, r8
 80089c0:	4649      	mov	r1, r9
 80089c2:	f7f7 fc2d 	bl	8000220 <__aeabi_dsub>
 80089c6:	4604      	mov	r4, r0
 80089c8:	460d      	mov	r5, r1
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4640      	mov	r0, r8
 80089d0:	4649      	mov	r1, r9
 80089d2:	f7f7 fddd 	bl	8000590 <__aeabi_dmul>
 80089d6:	2200      	movs	r2, #0
 80089d8:	ec41 0b19 	vmov	d9, r0, r1
 80089dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80089e0:	4620      	mov	r0, r4
 80089e2:	4629      	mov	r1, r5
 80089e4:	f7f7 fc1c 	bl	8000220 <__aeabi_dsub>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	ec51 0b19 	vmov	r0, r1, d9
 80089f0:	f7f7 fef8 	bl	80007e4 <__aeabi_ddiv>
 80089f4:	4632      	mov	r2, r6
 80089f6:	4604      	mov	r4, r0
 80089f8:	460d      	mov	r5, r1
 80089fa:	463b      	mov	r3, r7
 80089fc:	4640      	mov	r0, r8
 80089fe:	4649      	mov	r1, r9
 8008a00:	f7f7 fdc6 	bl	8000590 <__aeabi_dmul>
 8008a04:	4632      	mov	r2, r6
 8008a06:	463b      	mov	r3, r7
 8008a08:	f7f7 fc0c 	bl	8000224 <__adddf3>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	460b      	mov	r3, r1
 8008a10:	4620      	mov	r0, r4
 8008a12:	4629      	mov	r1, r5
 8008a14:	f7f7 fc04 	bl	8000220 <__aeabi_dsub>
 8008a18:	4642      	mov	r2, r8
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	f7f7 fc00 	bl	8000220 <__aeabi_dsub>
 8008a20:	460b      	mov	r3, r1
 8008a22:	4602      	mov	r2, r0
 8008a24:	493a      	ldr	r1, [pc, #232]	; (8008b10 <__ieee754_pow+0xa48>)
 8008a26:	2000      	movs	r0, #0
 8008a28:	f7f7 fbfa 	bl	8000220 <__aeabi_dsub>
 8008a2c:	ec41 0b10 	vmov	d0, r0, r1
 8008a30:	ee10 3a90 	vmov	r3, s1
 8008a34:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a3c:	da2b      	bge.n	8008a96 <__ieee754_pow+0x9ce>
 8008a3e:	4650      	mov	r0, sl
 8008a40:	f001 f8c6 	bl	8009bd0 <scalbn>
 8008a44:	ec51 0b10 	vmov	r0, r1, d0
 8008a48:	ec53 2b18 	vmov	r2, r3, d8
 8008a4c:	f7ff bbed 	b.w	800822a <__ieee754_pow+0x162>
 8008a50:	4b30      	ldr	r3, [pc, #192]	; (8008b14 <__ieee754_pow+0xa4c>)
 8008a52:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008a56:	429e      	cmp	r6, r3
 8008a58:	f77f af0c 	ble.w	8008874 <__ieee754_pow+0x7ac>
 8008a5c:	4b2e      	ldr	r3, [pc, #184]	; (8008b18 <__ieee754_pow+0xa50>)
 8008a5e:	440b      	add	r3, r1
 8008a60:	4303      	orrs	r3, r0
 8008a62:	d009      	beq.n	8008a78 <__ieee754_pow+0x9b0>
 8008a64:	ec51 0b18 	vmov	r0, r1, d8
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f7f8 f802 	bl	8000a74 <__aeabi_dcmplt>
 8008a70:	3800      	subs	r0, #0
 8008a72:	bf18      	it	ne
 8008a74:	2001      	movne	r0, #1
 8008a76:	e447      	b.n	8008308 <__ieee754_pow+0x240>
 8008a78:	4622      	mov	r2, r4
 8008a7a:	462b      	mov	r3, r5
 8008a7c:	f7f7 fbd0 	bl	8000220 <__aeabi_dsub>
 8008a80:	4642      	mov	r2, r8
 8008a82:	464b      	mov	r3, r9
 8008a84:	f7f8 f80a 	bl	8000a9c <__aeabi_dcmpge>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	f43f aef3 	beq.w	8008874 <__ieee754_pow+0x7ac>
 8008a8e:	e7e9      	b.n	8008a64 <__ieee754_pow+0x99c>
 8008a90:	f04f 0a00 	mov.w	sl, #0
 8008a94:	e71a      	b.n	80088cc <__ieee754_pow+0x804>
 8008a96:	ec51 0b10 	vmov	r0, r1, d0
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	e7d4      	b.n	8008a48 <__ieee754_pow+0x980>
 8008a9e:	491c      	ldr	r1, [pc, #112]	; (8008b10 <__ieee754_pow+0xa48>)
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	f7ff bb30 	b.w	8008106 <__ieee754_pow+0x3e>
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f7ff bb2c 	b.w	8008106 <__ieee754_pow+0x3e>
 8008aae:	4630      	mov	r0, r6
 8008ab0:	4639      	mov	r1, r7
 8008ab2:	f7ff bb28 	b.w	8008106 <__ieee754_pow+0x3e>
 8008ab6:	9204      	str	r2, [sp, #16]
 8008ab8:	f7ff bb7a 	b.w	80081b0 <__ieee754_pow+0xe8>
 8008abc:	2300      	movs	r3, #0
 8008abe:	f7ff bb64 	b.w	800818a <__ieee754_pow+0xc2>
 8008ac2:	bf00      	nop
 8008ac4:	f3af 8000 	nop.w
 8008ac8:	00000000 	.word	0x00000000
 8008acc:	3fe62e43 	.word	0x3fe62e43
 8008ad0:	fefa39ef 	.word	0xfefa39ef
 8008ad4:	3fe62e42 	.word	0x3fe62e42
 8008ad8:	0ca86c39 	.word	0x0ca86c39
 8008adc:	be205c61 	.word	0xbe205c61
 8008ae0:	72bea4d0 	.word	0x72bea4d0
 8008ae4:	3e663769 	.word	0x3e663769
 8008ae8:	c5d26bf1 	.word	0xc5d26bf1
 8008aec:	3ebbbd41 	.word	0x3ebbbd41
 8008af0:	af25de2c 	.word	0xaf25de2c
 8008af4:	3f11566a 	.word	0x3f11566a
 8008af8:	16bebd93 	.word	0x16bebd93
 8008afc:	3f66c16c 	.word	0x3f66c16c
 8008b00:	5555553e 	.word	0x5555553e
 8008b04:	3fc55555 	.word	0x3fc55555
 8008b08:	3fe00000 	.word	0x3fe00000
 8008b0c:	000fffff 	.word	0x000fffff
 8008b10:	3ff00000 	.word	0x3ff00000
 8008b14:	4090cbff 	.word	0x4090cbff
 8008b18:	3f6f3400 	.word	0x3f6f3400
 8008b1c:	652b82fe 	.word	0x652b82fe
 8008b20:	3c971547 	.word	0x3c971547
 8008b24:	00000000 	.word	0x00000000

08008b28 <__ieee754_rem_pio2>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	ed2d 8b02 	vpush	{d8}
 8008b30:	ec55 4b10 	vmov	r4, r5, d0
 8008b34:	4bca      	ldr	r3, [pc, #808]	; (8008e60 <__ieee754_rem_pio2+0x338>)
 8008b36:	b08b      	sub	sp, #44	; 0x2c
 8008b38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8008b3c:	4598      	cmp	r8, r3
 8008b3e:	4682      	mov	sl, r0
 8008b40:	9502      	str	r5, [sp, #8]
 8008b42:	dc08      	bgt.n	8008b56 <__ieee754_rem_pio2+0x2e>
 8008b44:	2200      	movs	r2, #0
 8008b46:	2300      	movs	r3, #0
 8008b48:	ed80 0b00 	vstr	d0, [r0]
 8008b4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008b50:	f04f 0b00 	mov.w	fp, #0
 8008b54:	e028      	b.n	8008ba8 <__ieee754_rem_pio2+0x80>
 8008b56:	4bc3      	ldr	r3, [pc, #780]	; (8008e64 <__ieee754_rem_pio2+0x33c>)
 8008b58:	4598      	cmp	r8, r3
 8008b5a:	dc78      	bgt.n	8008c4e <__ieee754_rem_pio2+0x126>
 8008b5c:	9b02      	ldr	r3, [sp, #8]
 8008b5e:	4ec2      	ldr	r6, [pc, #776]	; (8008e68 <__ieee754_rem_pio2+0x340>)
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	ee10 0a10 	vmov	r0, s0
 8008b66:	a3b0      	add	r3, pc, #704	; (adr r3, 8008e28 <__ieee754_rem_pio2+0x300>)
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	dd39      	ble.n	8008be4 <__ieee754_rem_pio2+0xbc>
 8008b70:	f7f7 fb56 	bl	8000220 <__aeabi_dsub>
 8008b74:	45b0      	cmp	r8, r6
 8008b76:	4604      	mov	r4, r0
 8008b78:	460d      	mov	r5, r1
 8008b7a:	d01b      	beq.n	8008bb4 <__ieee754_rem_pio2+0x8c>
 8008b7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8008e30 <__ieee754_rem_pio2+0x308>)
 8008b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b82:	f7f7 fb4d 	bl	8000220 <__aeabi_dsub>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	e9ca 2300 	strd	r2, r3, [sl]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	4629      	mov	r1, r5
 8008b92:	f7f7 fb45 	bl	8000220 <__aeabi_dsub>
 8008b96:	a3a6      	add	r3, pc, #664	; (adr r3, 8008e30 <__ieee754_rem_pio2+0x308>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	f7f7 fb40 	bl	8000220 <__aeabi_dsub>
 8008ba0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008ba4:	f04f 0b01 	mov.w	fp, #1
 8008ba8:	4658      	mov	r0, fp
 8008baa:	b00b      	add	sp, #44	; 0x2c
 8008bac:	ecbd 8b02 	vpop	{d8}
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	a3a0      	add	r3, pc, #640	; (adr r3, 8008e38 <__ieee754_rem_pio2+0x310>)
 8008bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bba:	f7f7 fb31 	bl	8000220 <__aeabi_dsub>
 8008bbe:	a3a0      	add	r3, pc, #640	; (adr r3, 8008e40 <__ieee754_rem_pio2+0x318>)
 8008bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	f7f7 fb2a 	bl	8000220 <__aeabi_dsub>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	e9ca 2300 	strd	r2, r3, [sl]
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	4629      	mov	r1, r5
 8008bd8:	f7f7 fb22 	bl	8000220 <__aeabi_dsub>
 8008bdc:	a398      	add	r3, pc, #608	; (adr r3, 8008e40 <__ieee754_rem_pio2+0x318>)
 8008bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be2:	e7db      	b.n	8008b9c <__ieee754_rem_pio2+0x74>
 8008be4:	f7f7 fb1e 	bl	8000224 <__adddf3>
 8008be8:	45b0      	cmp	r8, r6
 8008bea:	4604      	mov	r4, r0
 8008bec:	460d      	mov	r5, r1
 8008bee:	d016      	beq.n	8008c1e <__ieee754_rem_pio2+0xf6>
 8008bf0:	a38f      	add	r3, pc, #572	; (adr r3, 8008e30 <__ieee754_rem_pio2+0x308>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fb15 	bl	8000224 <__adddf3>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	e9ca 2300 	strd	r2, r3, [sl]
 8008c02:	4620      	mov	r0, r4
 8008c04:	4629      	mov	r1, r5
 8008c06:	f7f7 fb0b 	bl	8000220 <__aeabi_dsub>
 8008c0a:	a389      	add	r3, pc, #548	; (adr r3, 8008e30 <__ieee754_rem_pio2+0x308>)
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f7f7 fb08 	bl	8000224 <__adddf3>
 8008c14:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8008c18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008c1c:	e7c4      	b.n	8008ba8 <__ieee754_rem_pio2+0x80>
 8008c1e:	a386      	add	r3, pc, #536	; (adr r3, 8008e38 <__ieee754_rem_pio2+0x310>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	f7f7 fafe 	bl	8000224 <__adddf3>
 8008c28:	a385      	add	r3, pc, #532	; (adr r3, 8008e40 <__ieee754_rem_pio2+0x318>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	4604      	mov	r4, r0
 8008c30:	460d      	mov	r5, r1
 8008c32:	f7f7 faf7 	bl	8000224 <__adddf3>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	e9ca 2300 	strd	r2, r3, [sl]
 8008c3e:	4620      	mov	r0, r4
 8008c40:	4629      	mov	r1, r5
 8008c42:	f7f7 faed 	bl	8000220 <__aeabi_dsub>
 8008c46:	a37e      	add	r3, pc, #504	; (adr r3, 8008e40 <__ieee754_rem_pio2+0x318>)
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	e7e0      	b.n	8008c10 <__ieee754_rem_pio2+0xe8>
 8008c4e:	4b87      	ldr	r3, [pc, #540]	; (8008e6c <__ieee754_rem_pio2+0x344>)
 8008c50:	4598      	cmp	r8, r3
 8008c52:	f300 80d9 	bgt.w	8008e08 <__ieee754_rem_pio2+0x2e0>
 8008c56:	f7ff f937 	bl	8007ec8 <fabs>
 8008c5a:	ec55 4b10 	vmov	r4, r5, d0
 8008c5e:	ee10 0a10 	vmov	r0, s0
 8008c62:	a379      	add	r3, pc, #484	; (adr r3, 8008e48 <__ieee754_rem_pio2+0x320>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7f7 fc91 	bl	8000590 <__aeabi_dmul>
 8008c6e:	4b80      	ldr	r3, [pc, #512]	; (8008e70 <__ieee754_rem_pio2+0x348>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	f7f7 fad7 	bl	8000224 <__adddf3>
 8008c76:	f7f7 ff3b 	bl	8000af0 <__aeabi_d2iz>
 8008c7a:	4683      	mov	fp, r0
 8008c7c:	f7f7 fc1e 	bl	80004bc <__aeabi_i2d>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	ec43 2b18 	vmov	d8, r2, r3
 8008c88:	a367      	add	r3, pc, #412	; (adr r3, 8008e28 <__ieee754_rem_pio2+0x300>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 fc7f 	bl	8000590 <__aeabi_dmul>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	4620      	mov	r0, r4
 8008c98:	4629      	mov	r1, r5
 8008c9a:	f7f7 fac1 	bl	8000220 <__aeabi_dsub>
 8008c9e:	a364      	add	r3, pc, #400	; (adr r3, 8008e30 <__ieee754_rem_pio2+0x308>)
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	4606      	mov	r6, r0
 8008ca6:	460f      	mov	r7, r1
 8008ca8:	ec51 0b18 	vmov	r0, r1, d8
 8008cac:	f7f7 fc70 	bl	8000590 <__aeabi_dmul>
 8008cb0:	f1bb 0f1f 	cmp.w	fp, #31
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	460d      	mov	r5, r1
 8008cb8:	dc0d      	bgt.n	8008cd6 <__ieee754_rem_pio2+0x1ae>
 8008cba:	4b6e      	ldr	r3, [pc, #440]	; (8008e74 <__ieee754_rem_pio2+0x34c>)
 8008cbc:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8008cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc4:	4543      	cmp	r3, r8
 8008cc6:	d006      	beq.n	8008cd6 <__ieee754_rem_pio2+0x1ae>
 8008cc8:	4622      	mov	r2, r4
 8008cca:	462b      	mov	r3, r5
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7f7 faa6 	bl	8000220 <__aeabi_dsub>
 8008cd4:	e00f      	b.n	8008cf6 <__ieee754_rem_pio2+0x1ce>
 8008cd6:	462b      	mov	r3, r5
 8008cd8:	4622      	mov	r2, r4
 8008cda:	4630      	mov	r0, r6
 8008cdc:	4639      	mov	r1, r7
 8008cde:	f7f7 fa9f 	bl	8000220 <__aeabi_dsub>
 8008ce2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008ce6:	9303      	str	r3, [sp, #12]
 8008ce8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008cec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8008cf0:	f1b8 0f10 	cmp.w	r8, #16
 8008cf4:	dc02      	bgt.n	8008cfc <__ieee754_rem_pio2+0x1d4>
 8008cf6:	e9ca 0100 	strd	r0, r1, [sl]
 8008cfa:	e039      	b.n	8008d70 <__ieee754_rem_pio2+0x248>
 8008cfc:	a34e      	add	r3, pc, #312	; (adr r3, 8008e38 <__ieee754_rem_pio2+0x310>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	ec51 0b18 	vmov	r0, r1, d8
 8008d06:	f7f7 fc43 	bl	8000590 <__aeabi_dmul>
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	460d      	mov	r5, r1
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4630      	mov	r0, r6
 8008d14:	4639      	mov	r1, r7
 8008d16:	f7f7 fa83 	bl	8000220 <__aeabi_dsub>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4680      	mov	r8, r0
 8008d20:	4689      	mov	r9, r1
 8008d22:	4630      	mov	r0, r6
 8008d24:	4639      	mov	r1, r7
 8008d26:	f7f7 fa7b 	bl	8000220 <__aeabi_dsub>
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	f7f7 fa77 	bl	8000220 <__aeabi_dsub>
 8008d32:	a343      	add	r3, pc, #268	; (adr r3, 8008e40 <__ieee754_rem_pio2+0x318>)
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	ec51 0b18 	vmov	r0, r1, d8
 8008d40:	f7f7 fc26 	bl	8000590 <__aeabi_dmul>
 8008d44:	4622      	mov	r2, r4
 8008d46:	462b      	mov	r3, r5
 8008d48:	f7f7 fa6a 	bl	8000220 <__aeabi_dsub>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4604      	mov	r4, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	4640      	mov	r0, r8
 8008d56:	4649      	mov	r1, r9
 8008d58:	f7f7 fa62 	bl	8000220 <__aeabi_dsub>
 8008d5c:	9a03      	ldr	r2, [sp, #12]
 8008d5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008d62:	1ad3      	subs	r3, r2, r3
 8008d64:	2b31      	cmp	r3, #49	; 0x31
 8008d66:	dc24      	bgt.n	8008db2 <__ieee754_rem_pio2+0x28a>
 8008d68:	e9ca 0100 	strd	r0, r1, [sl]
 8008d6c:	4646      	mov	r6, r8
 8008d6e:	464f      	mov	r7, r9
 8008d70:	e9da 8900 	ldrd	r8, r9, [sl]
 8008d74:	4630      	mov	r0, r6
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	4639      	mov	r1, r7
 8008d7c:	f7f7 fa50 	bl	8000220 <__aeabi_dsub>
 8008d80:	462b      	mov	r3, r5
 8008d82:	4622      	mov	r2, r4
 8008d84:	f7f7 fa4c 	bl	8000220 <__aeabi_dsub>
 8008d88:	9b02      	ldr	r3, [sp, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008d90:	f6bf af0a 	bge.w	8008ba8 <__ieee754_rem_pio2+0x80>
 8008d94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d98:	f8ca 3004 	str.w	r3, [sl, #4]
 8008d9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008da0:	f8ca 8000 	str.w	r8, [sl]
 8008da4:	f8ca 0008 	str.w	r0, [sl, #8]
 8008da8:	f8ca 300c 	str.w	r3, [sl, #12]
 8008dac:	f1cb 0b00 	rsb	fp, fp, #0
 8008db0:	e6fa      	b.n	8008ba8 <__ieee754_rem_pio2+0x80>
 8008db2:	a327      	add	r3, pc, #156	; (adr r3, 8008e50 <__ieee754_rem_pio2+0x328>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	ec51 0b18 	vmov	r0, r1, d8
 8008dbc:	f7f7 fbe8 	bl	8000590 <__aeabi_dmul>
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	460d      	mov	r5, r1
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	4640      	mov	r0, r8
 8008dca:	4649      	mov	r1, r9
 8008dcc:	f7f7 fa28 	bl	8000220 <__aeabi_dsub>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	460f      	mov	r7, r1
 8008dd8:	4640      	mov	r0, r8
 8008dda:	4649      	mov	r1, r9
 8008ddc:	f7f7 fa20 	bl	8000220 <__aeabi_dsub>
 8008de0:	4622      	mov	r2, r4
 8008de2:	462b      	mov	r3, r5
 8008de4:	f7f7 fa1c 	bl	8000220 <__aeabi_dsub>
 8008de8:	a31b      	add	r3, pc, #108	; (adr r3, 8008e58 <__ieee754_rem_pio2+0x330>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	4604      	mov	r4, r0
 8008df0:	460d      	mov	r5, r1
 8008df2:	ec51 0b18 	vmov	r0, r1, d8
 8008df6:	f7f7 fbcb 	bl	8000590 <__aeabi_dmul>
 8008dfa:	4622      	mov	r2, r4
 8008dfc:	462b      	mov	r3, r5
 8008dfe:	f7f7 fa0f 	bl	8000220 <__aeabi_dsub>
 8008e02:	4604      	mov	r4, r0
 8008e04:	460d      	mov	r5, r1
 8008e06:	e75f      	b.n	8008cc8 <__ieee754_rem_pio2+0x1a0>
 8008e08:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <__ieee754_rem_pio2+0x350>)
 8008e0a:	4598      	cmp	r8, r3
 8008e0c:	dd36      	ble.n	8008e7c <__ieee754_rem_pio2+0x354>
 8008e0e:	ee10 2a10 	vmov	r2, s0
 8008e12:	462b      	mov	r3, r5
 8008e14:	4620      	mov	r0, r4
 8008e16:	4629      	mov	r1, r5
 8008e18:	f7f7 fa02 	bl	8000220 <__aeabi_dsub>
 8008e1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008e20:	e9ca 0100 	strd	r0, r1, [sl]
 8008e24:	e694      	b.n	8008b50 <__ieee754_rem_pio2+0x28>
 8008e26:	bf00      	nop
 8008e28:	54400000 	.word	0x54400000
 8008e2c:	3ff921fb 	.word	0x3ff921fb
 8008e30:	1a626331 	.word	0x1a626331
 8008e34:	3dd0b461 	.word	0x3dd0b461
 8008e38:	1a600000 	.word	0x1a600000
 8008e3c:	3dd0b461 	.word	0x3dd0b461
 8008e40:	2e037073 	.word	0x2e037073
 8008e44:	3ba3198a 	.word	0x3ba3198a
 8008e48:	6dc9c883 	.word	0x6dc9c883
 8008e4c:	3fe45f30 	.word	0x3fe45f30
 8008e50:	2e000000 	.word	0x2e000000
 8008e54:	3ba3198a 	.word	0x3ba3198a
 8008e58:	252049c1 	.word	0x252049c1
 8008e5c:	397b839a 	.word	0x397b839a
 8008e60:	3fe921fb 	.word	0x3fe921fb
 8008e64:	4002d97b 	.word	0x4002d97b
 8008e68:	3ff921fb 	.word	0x3ff921fb
 8008e6c:	413921fb 	.word	0x413921fb
 8008e70:	3fe00000 	.word	0x3fe00000
 8008e74:	08009da8 	.word	0x08009da8
 8008e78:	7fefffff 	.word	0x7fefffff
 8008e7c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8008e80:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8008e84:	ee10 0a10 	vmov	r0, s0
 8008e88:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8008e8c:	ee10 6a10 	vmov	r6, s0
 8008e90:	460f      	mov	r7, r1
 8008e92:	f7f7 fe2d 	bl	8000af0 <__aeabi_d2iz>
 8008e96:	f7f7 fb11 	bl	80004bc <__aeabi_i2d>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	4639      	mov	r1, r7
 8008ea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ea6:	f7f7 f9bb 	bl	8000220 <__aeabi_dsub>
 8008eaa:	4b23      	ldr	r3, [pc, #140]	; (8008f38 <__ieee754_rem_pio2+0x410>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	f7f7 fb6f 	bl	8000590 <__aeabi_dmul>
 8008eb2:	460f      	mov	r7, r1
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	f7f7 fe1b 	bl	8000af0 <__aeabi_d2iz>
 8008eba:	f7f7 faff 	bl	80004bc <__aeabi_i2d>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008eca:	f7f7 f9a9 	bl	8000220 <__aeabi_dsub>
 8008ece:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <__ieee754_rem_pio2+0x410>)
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f7f7 fb5d 	bl	8000590 <__aeabi_dmul>
 8008ed6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008eda:	ad04      	add	r5, sp, #16
 8008edc:	f04f 0803 	mov.w	r8, #3
 8008ee0:	46a9      	mov	r9, r5
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	2700      	movs	r7, #0
 8008ee6:	4632      	mov	r2, r6
 8008ee8:	463b      	mov	r3, r7
 8008eea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8008eee:	46c3      	mov	fp, r8
 8008ef0:	3d08      	subs	r5, #8
 8008ef2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008ef6:	f7f7 fdb3 	bl	8000a60 <__aeabi_dcmpeq>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d1f3      	bne.n	8008ee6 <__ieee754_rem_pio2+0x3be>
 8008efe:	4b0f      	ldr	r3, [pc, #60]	; (8008f3c <__ieee754_rem_pio2+0x414>)
 8008f00:	9301      	str	r3, [sp, #4]
 8008f02:	2302      	movs	r3, #2
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	4622      	mov	r2, r4
 8008f08:	465b      	mov	r3, fp
 8008f0a:	4651      	mov	r1, sl
 8008f0c:	4648      	mov	r0, r9
 8008f0e:	f000 f993 	bl	8009238 <__kernel_rem_pio2>
 8008f12:	9b02      	ldr	r3, [sp, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	4683      	mov	fp, r0
 8008f18:	f6bf ae46 	bge.w	8008ba8 <__ieee754_rem_pio2+0x80>
 8008f1c:	e9da 2100 	ldrd	r2, r1, [sl]
 8008f20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f24:	e9ca 2300 	strd	r2, r3, [sl]
 8008f28:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8008f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f30:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8008f34:	e73a      	b.n	8008dac <__ieee754_rem_pio2+0x284>
 8008f36:	bf00      	nop
 8008f38:	41700000 	.word	0x41700000
 8008f3c:	08009e28 	.word	0x08009e28

08008f40 <__ieee754_sqrt>:
 8008f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f44:	ec55 4b10 	vmov	r4, r5, d0
 8008f48:	4e55      	ldr	r6, [pc, #340]	; (80090a0 <__ieee754_sqrt+0x160>)
 8008f4a:	43ae      	bics	r6, r5
 8008f4c:	ee10 0a10 	vmov	r0, s0
 8008f50:	ee10 3a10 	vmov	r3, s0
 8008f54:	462a      	mov	r2, r5
 8008f56:	4629      	mov	r1, r5
 8008f58:	d110      	bne.n	8008f7c <__ieee754_sqrt+0x3c>
 8008f5a:	ee10 2a10 	vmov	r2, s0
 8008f5e:	462b      	mov	r3, r5
 8008f60:	f7f7 fb16 	bl	8000590 <__aeabi_dmul>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	4620      	mov	r0, r4
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	f7f7 f95a 	bl	8000224 <__adddf3>
 8008f70:	4604      	mov	r4, r0
 8008f72:	460d      	mov	r5, r1
 8008f74:	ec45 4b10 	vmov	d0, r4, r5
 8008f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	dc10      	bgt.n	8008fa2 <__ieee754_sqrt+0x62>
 8008f80:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008f84:	4330      	orrs	r0, r6
 8008f86:	d0f5      	beq.n	8008f74 <__ieee754_sqrt+0x34>
 8008f88:	b15d      	cbz	r5, 8008fa2 <__ieee754_sqrt+0x62>
 8008f8a:	ee10 2a10 	vmov	r2, s0
 8008f8e:	462b      	mov	r3, r5
 8008f90:	ee10 0a10 	vmov	r0, s0
 8008f94:	f7f7 f944 	bl	8000220 <__aeabi_dsub>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	f7f7 fc22 	bl	80007e4 <__aeabi_ddiv>
 8008fa0:	e7e6      	b.n	8008f70 <__ieee754_sqrt+0x30>
 8008fa2:	1512      	asrs	r2, r2, #20
 8008fa4:	d074      	beq.n	8009090 <__ieee754_sqrt+0x150>
 8008fa6:	07d4      	lsls	r4, r2, #31
 8008fa8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008fac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008fb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008fb4:	bf5e      	ittt	pl
 8008fb6:	0fda      	lsrpl	r2, r3, #31
 8008fb8:	005b      	lslpl	r3, r3, #1
 8008fba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008fbe:	2400      	movs	r4, #0
 8008fc0:	0fda      	lsrs	r2, r3, #31
 8008fc2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008fc6:	107f      	asrs	r7, r7, #1
 8008fc8:	005b      	lsls	r3, r3, #1
 8008fca:	2516      	movs	r5, #22
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008fd2:	1886      	adds	r6, r0, r2
 8008fd4:	428e      	cmp	r6, r1
 8008fd6:	bfde      	ittt	le
 8008fd8:	1b89      	suble	r1, r1, r6
 8008fda:	18b0      	addle	r0, r6, r2
 8008fdc:	18a4      	addle	r4, r4, r2
 8008fde:	0049      	lsls	r1, r1, #1
 8008fe0:	3d01      	subs	r5, #1
 8008fe2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008fe6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008fea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008fee:	d1f0      	bne.n	8008fd2 <__ieee754_sqrt+0x92>
 8008ff0:	462a      	mov	r2, r5
 8008ff2:	f04f 0e20 	mov.w	lr, #32
 8008ff6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008ffa:	4281      	cmp	r1, r0
 8008ffc:	eb06 0c05 	add.w	ip, r6, r5
 8009000:	dc02      	bgt.n	8009008 <__ieee754_sqrt+0xc8>
 8009002:	d113      	bne.n	800902c <__ieee754_sqrt+0xec>
 8009004:	459c      	cmp	ip, r3
 8009006:	d811      	bhi.n	800902c <__ieee754_sqrt+0xec>
 8009008:	f1bc 0f00 	cmp.w	ip, #0
 800900c:	eb0c 0506 	add.w	r5, ip, r6
 8009010:	da43      	bge.n	800909a <__ieee754_sqrt+0x15a>
 8009012:	2d00      	cmp	r5, #0
 8009014:	db41      	blt.n	800909a <__ieee754_sqrt+0x15a>
 8009016:	f100 0801 	add.w	r8, r0, #1
 800901a:	1a09      	subs	r1, r1, r0
 800901c:	459c      	cmp	ip, r3
 800901e:	bf88      	it	hi
 8009020:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009024:	eba3 030c 	sub.w	r3, r3, ip
 8009028:	4432      	add	r2, r6
 800902a:	4640      	mov	r0, r8
 800902c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009030:	f1be 0e01 	subs.w	lr, lr, #1
 8009034:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009038:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800903c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009040:	d1db      	bne.n	8008ffa <__ieee754_sqrt+0xba>
 8009042:	430b      	orrs	r3, r1
 8009044:	d006      	beq.n	8009054 <__ieee754_sqrt+0x114>
 8009046:	1c50      	adds	r0, r2, #1
 8009048:	bf13      	iteet	ne
 800904a:	3201      	addne	r2, #1
 800904c:	3401      	addeq	r4, #1
 800904e:	4672      	moveq	r2, lr
 8009050:	f022 0201 	bicne.w	r2, r2, #1
 8009054:	1063      	asrs	r3, r4, #1
 8009056:	0852      	lsrs	r2, r2, #1
 8009058:	07e1      	lsls	r1, r4, #31
 800905a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800905e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009062:	bf48      	it	mi
 8009064:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009068:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800906c:	4614      	mov	r4, r2
 800906e:	e781      	b.n	8008f74 <__ieee754_sqrt+0x34>
 8009070:	0ad9      	lsrs	r1, r3, #11
 8009072:	3815      	subs	r0, #21
 8009074:	055b      	lsls	r3, r3, #21
 8009076:	2900      	cmp	r1, #0
 8009078:	d0fa      	beq.n	8009070 <__ieee754_sqrt+0x130>
 800907a:	02cd      	lsls	r5, r1, #11
 800907c:	d50a      	bpl.n	8009094 <__ieee754_sqrt+0x154>
 800907e:	f1c2 0420 	rsb	r4, r2, #32
 8009082:	fa23 f404 	lsr.w	r4, r3, r4
 8009086:	1e55      	subs	r5, r2, #1
 8009088:	4093      	lsls	r3, r2
 800908a:	4321      	orrs	r1, r4
 800908c:	1b42      	subs	r2, r0, r5
 800908e:	e78a      	b.n	8008fa6 <__ieee754_sqrt+0x66>
 8009090:	4610      	mov	r0, r2
 8009092:	e7f0      	b.n	8009076 <__ieee754_sqrt+0x136>
 8009094:	0049      	lsls	r1, r1, #1
 8009096:	3201      	adds	r2, #1
 8009098:	e7ef      	b.n	800907a <__ieee754_sqrt+0x13a>
 800909a:	4680      	mov	r8, r0
 800909c:	e7bd      	b.n	800901a <__ieee754_sqrt+0xda>
 800909e:	bf00      	nop
 80090a0:	7ff00000 	.word	0x7ff00000
 80090a4:	00000000 	.word	0x00000000

080090a8 <__kernel_cos>:
 80090a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	ec57 6b10 	vmov	r6, r7, d0
 80090b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80090b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80090b8:	ed8d 1b00 	vstr	d1, [sp]
 80090bc:	da07      	bge.n	80090ce <__kernel_cos+0x26>
 80090be:	ee10 0a10 	vmov	r0, s0
 80090c2:	4639      	mov	r1, r7
 80090c4:	f7f7 fd14 	bl	8000af0 <__aeabi_d2iz>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	f000 8088 	beq.w	80091de <__kernel_cos+0x136>
 80090ce:	4632      	mov	r2, r6
 80090d0:	463b      	mov	r3, r7
 80090d2:	4630      	mov	r0, r6
 80090d4:	4639      	mov	r1, r7
 80090d6:	f7f7 fa5b 	bl	8000590 <__aeabi_dmul>
 80090da:	4b51      	ldr	r3, [pc, #324]	; (8009220 <__kernel_cos+0x178>)
 80090dc:	2200      	movs	r2, #0
 80090de:	4604      	mov	r4, r0
 80090e0:	460d      	mov	r5, r1
 80090e2:	f7f7 fa55 	bl	8000590 <__aeabi_dmul>
 80090e6:	a340      	add	r3, pc, #256	; (adr r3, 80091e8 <__kernel_cos+0x140>)
 80090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ec:	4682      	mov	sl, r0
 80090ee:	468b      	mov	fp, r1
 80090f0:	4620      	mov	r0, r4
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7f7 fa4c 	bl	8000590 <__aeabi_dmul>
 80090f8:	a33d      	add	r3, pc, #244	; (adr r3, 80091f0 <__kernel_cos+0x148>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f7f7 f891 	bl	8000224 <__adddf3>
 8009102:	4622      	mov	r2, r4
 8009104:	462b      	mov	r3, r5
 8009106:	f7f7 fa43 	bl	8000590 <__aeabi_dmul>
 800910a:	a33b      	add	r3, pc, #236	; (adr r3, 80091f8 <__kernel_cos+0x150>)
 800910c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009110:	f7f7 f886 	bl	8000220 <__aeabi_dsub>
 8009114:	4622      	mov	r2, r4
 8009116:	462b      	mov	r3, r5
 8009118:	f7f7 fa3a 	bl	8000590 <__aeabi_dmul>
 800911c:	a338      	add	r3, pc, #224	; (adr r3, 8009200 <__kernel_cos+0x158>)
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f7f7 f87f 	bl	8000224 <__adddf3>
 8009126:	4622      	mov	r2, r4
 8009128:	462b      	mov	r3, r5
 800912a:	f7f7 fa31 	bl	8000590 <__aeabi_dmul>
 800912e:	a336      	add	r3, pc, #216	; (adr r3, 8009208 <__kernel_cos+0x160>)
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f7f7 f874 	bl	8000220 <__aeabi_dsub>
 8009138:	4622      	mov	r2, r4
 800913a:	462b      	mov	r3, r5
 800913c:	f7f7 fa28 	bl	8000590 <__aeabi_dmul>
 8009140:	a333      	add	r3, pc, #204	; (adr r3, 8009210 <__kernel_cos+0x168>)
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	f7f7 f86d 	bl	8000224 <__adddf3>
 800914a:	4622      	mov	r2, r4
 800914c:	462b      	mov	r3, r5
 800914e:	f7f7 fa1f 	bl	8000590 <__aeabi_dmul>
 8009152:	4622      	mov	r2, r4
 8009154:	462b      	mov	r3, r5
 8009156:	f7f7 fa1b 	bl	8000590 <__aeabi_dmul>
 800915a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800915e:	4604      	mov	r4, r0
 8009160:	460d      	mov	r5, r1
 8009162:	4630      	mov	r0, r6
 8009164:	4639      	mov	r1, r7
 8009166:	f7f7 fa13 	bl	8000590 <__aeabi_dmul>
 800916a:	460b      	mov	r3, r1
 800916c:	4602      	mov	r2, r0
 800916e:	4629      	mov	r1, r5
 8009170:	4620      	mov	r0, r4
 8009172:	f7f7 f855 	bl	8000220 <__aeabi_dsub>
 8009176:	4b2b      	ldr	r3, [pc, #172]	; (8009224 <__kernel_cos+0x17c>)
 8009178:	4598      	cmp	r8, r3
 800917a:	4606      	mov	r6, r0
 800917c:	460f      	mov	r7, r1
 800917e:	dc10      	bgt.n	80091a2 <__kernel_cos+0xfa>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4650      	mov	r0, sl
 8009186:	4659      	mov	r1, fp
 8009188:	f7f7 f84a 	bl	8000220 <__aeabi_dsub>
 800918c:	460b      	mov	r3, r1
 800918e:	4926      	ldr	r1, [pc, #152]	; (8009228 <__kernel_cos+0x180>)
 8009190:	4602      	mov	r2, r0
 8009192:	2000      	movs	r0, #0
 8009194:	f7f7 f844 	bl	8000220 <__aeabi_dsub>
 8009198:	ec41 0b10 	vmov	d0, r0, r1
 800919c:	b003      	add	sp, #12
 800919e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a2:	4b22      	ldr	r3, [pc, #136]	; (800922c <__kernel_cos+0x184>)
 80091a4:	4920      	ldr	r1, [pc, #128]	; (8009228 <__kernel_cos+0x180>)
 80091a6:	4598      	cmp	r8, r3
 80091a8:	bfcc      	ite	gt
 80091aa:	4d21      	ldrgt	r5, [pc, #132]	; (8009230 <__kernel_cos+0x188>)
 80091ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80091b0:	2400      	movs	r4, #0
 80091b2:	4622      	mov	r2, r4
 80091b4:	462b      	mov	r3, r5
 80091b6:	2000      	movs	r0, #0
 80091b8:	f7f7 f832 	bl	8000220 <__aeabi_dsub>
 80091bc:	4622      	mov	r2, r4
 80091be:	4680      	mov	r8, r0
 80091c0:	4689      	mov	r9, r1
 80091c2:	462b      	mov	r3, r5
 80091c4:	4650      	mov	r0, sl
 80091c6:	4659      	mov	r1, fp
 80091c8:	f7f7 f82a 	bl	8000220 <__aeabi_dsub>
 80091cc:	4632      	mov	r2, r6
 80091ce:	463b      	mov	r3, r7
 80091d0:	f7f7 f826 	bl	8000220 <__aeabi_dsub>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4640      	mov	r0, r8
 80091da:	4649      	mov	r1, r9
 80091dc:	e7da      	b.n	8009194 <__kernel_cos+0xec>
 80091de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8009218 <__kernel_cos+0x170>
 80091e2:	e7db      	b.n	800919c <__kernel_cos+0xf4>
 80091e4:	f3af 8000 	nop.w
 80091e8:	be8838d4 	.word	0xbe8838d4
 80091ec:	bda8fae9 	.word	0xbda8fae9
 80091f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80091f4:	3e21ee9e 	.word	0x3e21ee9e
 80091f8:	809c52ad 	.word	0x809c52ad
 80091fc:	3e927e4f 	.word	0x3e927e4f
 8009200:	19cb1590 	.word	0x19cb1590
 8009204:	3efa01a0 	.word	0x3efa01a0
 8009208:	16c15177 	.word	0x16c15177
 800920c:	3f56c16c 	.word	0x3f56c16c
 8009210:	5555554c 	.word	0x5555554c
 8009214:	3fa55555 	.word	0x3fa55555
 8009218:	00000000 	.word	0x00000000
 800921c:	3ff00000 	.word	0x3ff00000
 8009220:	3fe00000 	.word	0x3fe00000
 8009224:	3fd33332 	.word	0x3fd33332
 8009228:	3ff00000 	.word	0x3ff00000
 800922c:	3fe90000 	.word	0x3fe90000
 8009230:	3fd20000 	.word	0x3fd20000
 8009234:	00000000 	.word	0x00000000

08009238 <__kernel_rem_pio2>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	ed2d 8b02 	vpush	{d8}
 8009240:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009244:	f112 0f14 	cmn.w	r2, #20
 8009248:	9308      	str	r3, [sp, #32]
 800924a:	9101      	str	r1, [sp, #4]
 800924c:	4bc4      	ldr	r3, [pc, #784]	; (8009560 <__kernel_rem_pio2+0x328>)
 800924e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009250:	900b      	str	r0, [sp, #44]	; 0x2c
 8009252:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009256:	9302      	str	r3, [sp, #8]
 8009258:	9b08      	ldr	r3, [sp, #32]
 800925a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800925e:	bfa8      	it	ge
 8009260:	1ed4      	subge	r4, r2, #3
 8009262:	9306      	str	r3, [sp, #24]
 8009264:	bfb2      	itee	lt
 8009266:	2400      	movlt	r4, #0
 8009268:	2318      	movge	r3, #24
 800926a:	fb94 f4f3 	sdivge	r4, r4, r3
 800926e:	f06f 0317 	mvn.w	r3, #23
 8009272:	fb04 3303 	mla	r3, r4, r3, r3
 8009276:	eb03 0a02 	add.w	sl, r3, r2
 800927a:	9b02      	ldr	r3, [sp, #8]
 800927c:	9a06      	ldr	r2, [sp, #24]
 800927e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009550 <__kernel_rem_pio2+0x318>
 8009282:	eb03 0802 	add.w	r8, r3, r2
 8009286:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009288:	1aa7      	subs	r7, r4, r2
 800928a:	ae22      	add	r6, sp, #136	; 0x88
 800928c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009290:	2500      	movs	r5, #0
 8009292:	4545      	cmp	r5, r8
 8009294:	dd13      	ble.n	80092be <__kernel_rem_pio2+0x86>
 8009296:	9b08      	ldr	r3, [sp, #32]
 8009298:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009550 <__kernel_rem_pio2+0x318>
 800929c:	aa22      	add	r2, sp, #136	; 0x88
 800929e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80092a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	9b02      	ldr	r3, [sp, #8]
 80092ac:	4598      	cmp	r8, r3
 80092ae:	dc2f      	bgt.n	8009310 <__kernel_rem_pio2+0xd8>
 80092b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80092b4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80092b8:	462f      	mov	r7, r5
 80092ba:	2600      	movs	r6, #0
 80092bc:	e01b      	b.n	80092f6 <__kernel_rem_pio2+0xbe>
 80092be:	42ef      	cmn	r7, r5
 80092c0:	d407      	bmi.n	80092d2 <__kernel_rem_pio2+0x9a>
 80092c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80092c6:	f7f7 f8f9 	bl	80004bc <__aeabi_i2d>
 80092ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80092ce:	3501      	adds	r5, #1
 80092d0:	e7df      	b.n	8009292 <__kernel_rem_pio2+0x5a>
 80092d2:	ec51 0b18 	vmov	r0, r1, d8
 80092d6:	e7f8      	b.n	80092ca <__kernel_rem_pio2+0x92>
 80092d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80092e0:	f7f7 f956 	bl	8000590 <__aeabi_dmul>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092ec:	f7f6 ff9a 	bl	8000224 <__adddf3>
 80092f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092f4:	3601      	adds	r6, #1
 80092f6:	9b06      	ldr	r3, [sp, #24]
 80092f8:	429e      	cmp	r6, r3
 80092fa:	f1a7 0708 	sub.w	r7, r7, #8
 80092fe:	ddeb      	ble.n	80092d8 <__kernel_rem_pio2+0xa0>
 8009300:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009304:	f108 0801 	add.w	r8, r8, #1
 8009308:	ecab 7b02 	vstmia	fp!, {d7}
 800930c:	3508      	adds	r5, #8
 800930e:	e7cc      	b.n	80092aa <__kernel_rem_pio2+0x72>
 8009310:	9b02      	ldr	r3, [sp, #8]
 8009312:	aa0e      	add	r2, sp, #56	; 0x38
 8009314:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009318:	930d      	str	r3, [sp, #52]	; 0x34
 800931a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800931c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009320:	9c02      	ldr	r4, [sp, #8]
 8009322:	930c      	str	r3, [sp, #48]	; 0x30
 8009324:	00e3      	lsls	r3, r4, #3
 8009326:	930a      	str	r3, [sp, #40]	; 0x28
 8009328:	ab9a      	add	r3, sp, #616	; 0x268
 800932a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800932e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009332:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009336:	ab72      	add	r3, sp, #456	; 0x1c8
 8009338:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800933c:	46c3      	mov	fp, r8
 800933e:	46a1      	mov	r9, r4
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	f1a5 0508 	sub.w	r5, r5, #8
 8009348:	dc77      	bgt.n	800943a <__kernel_rem_pio2+0x202>
 800934a:	ec47 6b10 	vmov	d0, r6, r7
 800934e:	4650      	mov	r0, sl
 8009350:	f000 fc3e 	bl	8009bd0 <scalbn>
 8009354:	ec57 6b10 	vmov	r6, r7, d0
 8009358:	2200      	movs	r2, #0
 800935a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800935e:	ee10 0a10 	vmov	r0, s0
 8009362:	4639      	mov	r1, r7
 8009364:	f7f7 f914 	bl	8000590 <__aeabi_dmul>
 8009368:	ec41 0b10 	vmov	d0, r0, r1
 800936c:	f000 fbb0 	bl	8009ad0 <floor>
 8009370:	4b7c      	ldr	r3, [pc, #496]	; (8009564 <__kernel_rem_pio2+0x32c>)
 8009372:	ec51 0b10 	vmov	r0, r1, d0
 8009376:	2200      	movs	r2, #0
 8009378:	f7f7 f90a 	bl	8000590 <__aeabi_dmul>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4630      	mov	r0, r6
 8009382:	4639      	mov	r1, r7
 8009384:	f7f6 ff4c 	bl	8000220 <__aeabi_dsub>
 8009388:	460f      	mov	r7, r1
 800938a:	4606      	mov	r6, r0
 800938c:	f7f7 fbb0 	bl	8000af0 <__aeabi_d2iz>
 8009390:	9004      	str	r0, [sp, #16]
 8009392:	f7f7 f893 	bl	80004bc <__aeabi_i2d>
 8009396:	4602      	mov	r2, r0
 8009398:	460b      	mov	r3, r1
 800939a:	4630      	mov	r0, r6
 800939c:	4639      	mov	r1, r7
 800939e:	f7f6 ff3f 	bl	8000220 <__aeabi_dsub>
 80093a2:	f1ba 0f00 	cmp.w	sl, #0
 80093a6:	4606      	mov	r6, r0
 80093a8:	460f      	mov	r7, r1
 80093aa:	dd6d      	ble.n	8009488 <__kernel_rem_pio2+0x250>
 80093ac:	1e62      	subs	r2, r4, #1
 80093ae:	ab0e      	add	r3, sp, #56	; 0x38
 80093b0:	9d04      	ldr	r5, [sp, #16]
 80093b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80093b6:	f1ca 0118 	rsb	r1, sl, #24
 80093ba:	fa40 f301 	asr.w	r3, r0, r1
 80093be:	441d      	add	r5, r3
 80093c0:	408b      	lsls	r3, r1
 80093c2:	1ac0      	subs	r0, r0, r3
 80093c4:	ab0e      	add	r3, sp, #56	; 0x38
 80093c6:	9504      	str	r5, [sp, #16]
 80093c8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80093cc:	f1ca 0317 	rsb	r3, sl, #23
 80093d0:	fa40 fb03 	asr.w	fp, r0, r3
 80093d4:	f1bb 0f00 	cmp.w	fp, #0
 80093d8:	dd65      	ble.n	80094a6 <__kernel_rem_pio2+0x26e>
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	2200      	movs	r2, #0
 80093de:	3301      	adds	r3, #1
 80093e0:	9304      	str	r3, [sp, #16]
 80093e2:	4615      	mov	r5, r2
 80093e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80093e8:	4294      	cmp	r4, r2
 80093ea:	f300 809c 	bgt.w	8009526 <__kernel_rem_pio2+0x2ee>
 80093ee:	f1ba 0f00 	cmp.w	sl, #0
 80093f2:	dd07      	ble.n	8009404 <__kernel_rem_pio2+0x1cc>
 80093f4:	f1ba 0f01 	cmp.w	sl, #1
 80093f8:	f000 80c0 	beq.w	800957c <__kernel_rem_pio2+0x344>
 80093fc:	f1ba 0f02 	cmp.w	sl, #2
 8009400:	f000 80c6 	beq.w	8009590 <__kernel_rem_pio2+0x358>
 8009404:	f1bb 0f02 	cmp.w	fp, #2
 8009408:	d14d      	bne.n	80094a6 <__kernel_rem_pio2+0x26e>
 800940a:	4632      	mov	r2, r6
 800940c:	463b      	mov	r3, r7
 800940e:	4956      	ldr	r1, [pc, #344]	; (8009568 <__kernel_rem_pio2+0x330>)
 8009410:	2000      	movs	r0, #0
 8009412:	f7f6 ff05 	bl	8000220 <__aeabi_dsub>
 8009416:	4606      	mov	r6, r0
 8009418:	460f      	mov	r7, r1
 800941a:	2d00      	cmp	r5, #0
 800941c:	d043      	beq.n	80094a6 <__kernel_rem_pio2+0x26e>
 800941e:	4650      	mov	r0, sl
 8009420:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009558 <__kernel_rem_pio2+0x320>
 8009424:	f000 fbd4 	bl	8009bd0 <scalbn>
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	ec53 2b10 	vmov	r2, r3, d0
 8009430:	f7f6 fef6 	bl	8000220 <__aeabi_dsub>
 8009434:	4606      	mov	r6, r0
 8009436:	460f      	mov	r7, r1
 8009438:	e035      	b.n	80094a6 <__kernel_rem_pio2+0x26e>
 800943a:	4b4c      	ldr	r3, [pc, #304]	; (800956c <__kernel_rem_pio2+0x334>)
 800943c:	2200      	movs	r2, #0
 800943e:	4630      	mov	r0, r6
 8009440:	4639      	mov	r1, r7
 8009442:	f7f7 f8a5 	bl	8000590 <__aeabi_dmul>
 8009446:	f7f7 fb53 	bl	8000af0 <__aeabi_d2iz>
 800944a:	f7f7 f837 	bl	80004bc <__aeabi_i2d>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	ec43 2b18 	vmov	d8, r2, r3
 8009456:	4b46      	ldr	r3, [pc, #280]	; (8009570 <__kernel_rem_pio2+0x338>)
 8009458:	2200      	movs	r2, #0
 800945a:	f7f7 f899 	bl	8000590 <__aeabi_dmul>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4630      	mov	r0, r6
 8009464:	4639      	mov	r1, r7
 8009466:	f7f6 fedb 	bl	8000220 <__aeabi_dsub>
 800946a:	f7f7 fb41 	bl	8000af0 <__aeabi_d2iz>
 800946e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009472:	f84b 0b04 	str.w	r0, [fp], #4
 8009476:	ec51 0b18 	vmov	r0, r1, d8
 800947a:	f7f6 fed3 	bl	8000224 <__adddf3>
 800947e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8009482:	4606      	mov	r6, r0
 8009484:	460f      	mov	r7, r1
 8009486:	e75b      	b.n	8009340 <__kernel_rem_pio2+0x108>
 8009488:	d106      	bne.n	8009498 <__kernel_rem_pio2+0x260>
 800948a:	1e63      	subs	r3, r4, #1
 800948c:	aa0e      	add	r2, sp, #56	; 0x38
 800948e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009492:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009496:	e79d      	b.n	80093d4 <__kernel_rem_pio2+0x19c>
 8009498:	4b36      	ldr	r3, [pc, #216]	; (8009574 <__kernel_rem_pio2+0x33c>)
 800949a:	2200      	movs	r2, #0
 800949c:	f7f7 fafe 	bl	8000a9c <__aeabi_dcmpge>
 80094a0:	2800      	cmp	r0, #0
 80094a2:	d13d      	bne.n	8009520 <__kernel_rem_pio2+0x2e8>
 80094a4:	4683      	mov	fp, r0
 80094a6:	2200      	movs	r2, #0
 80094a8:	2300      	movs	r3, #0
 80094aa:	4630      	mov	r0, r6
 80094ac:	4639      	mov	r1, r7
 80094ae:	f7f7 fad7 	bl	8000a60 <__aeabi_dcmpeq>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	f000 80c0 	beq.w	8009638 <__kernel_rem_pio2+0x400>
 80094b8:	1e65      	subs	r5, r4, #1
 80094ba:	462b      	mov	r3, r5
 80094bc:	2200      	movs	r2, #0
 80094be:	9902      	ldr	r1, [sp, #8]
 80094c0:	428b      	cmp	r3, r1
 80094c2:	da6c      	bge.n	800959e <__kernel_rem_pio2+0x366>
 80094c4:	2a00      	cmp	r2, #0
 80094c6:	f000 8089 	beq.w	80095dc <__kernel_rem_pio2+0x3a4>
 80094ca:	ab0e      	add	r3, sp, #56	; 0x38
 80094cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80094d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	f000 80ad 	beq.w	8009634 <__kernel_rem_pio2+0x3fc>
 80094da:	4650      	mov	r0, sl
 80094dc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009558 <__kernel_rem_pio2+0x320>
 80094e0:	f000 fb76 	bl	8009bd0 <scalbn>
 80094e4:	ab9a      	add	r3, sp, #616	; 0x268
 80094e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80094ea:	ec57 6b10 	vmov	r6, r7, d0
 80094ee:	00ec      	lsls	r4, r5, #3
 80094f0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80094f4:	46aa      	mov	sl, r5
 80094f6:	f1ba 0f00 	cmp.w	sl, #0
 80094fa:	f280 80d6 	bge.w	80096aa <__kernel_rem_pio2+0x472>
 80094fe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009550 <__kernel_rem_pio2+0x318>
 8009502:	462e      	mov	r6, r5
 8009504:	2e00      	cmp	r6, #0
 8009506:	f2c0 8104 	blt.w	8009712 <__kernel_rem_pio2+0x4da>
 800950a:	ab72      	add	r3, sp, #456	; 0x1c8
 800950c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8009510:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009578 <__kernel_rem_pio2+0x340>
 8009514:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8009518:	f04f 0800 	mov.w	r8, #0
 800951c:	1baf      	subs	r7, r5, r6
 800951e:	e0ea      	b.n	80096f6 <__kernel_rem_pio2+0x4be>
 8009520:	f04f 0b02 	mov.w	fp, #2
 8009524:	e759      	b.n	80093da <__kernel_rem_pio2+0x1a2>
 8009526:	f8d8 3000 	ldr.w	r3, [r8]
 800952a:	b955      	cbnz	r5, 8009542 <__kernel_rem_pio2+0x30a>
 800952c:	b123      	cbz	r3, 8009538 <__kernel_rem_pio2+0x300>
 800952e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009532:	f8c8 3000 	str.w	r3, [r8]
 8009536:	2301      	movs	r3, #1
 8009538:	3201      	adds	r2, #1
 800953a:	f108 0804 	add.w	r8, r8, #4
 800953e:	461d      	mov	r5, r3
 8009540:	e752      	b.n	80093e8 <__kernel_rem_pio2+0x1b0>
 8009542:	1acb      	subs	r3, r1, r3
 8009544:	f8c8 3000 	str.w	r3, [r8]
 8009548:	462b      	mov	r3, r5
 800954a:	e7f5      	b.n	8009538 <__kernel_rem_pio2+0x300>
 800954c:	f3af 8000 	nop.w
	...
 800955c:	3ff00000 	.word	0x3ff00000
 8009560:	08009f70 	.word	0x08009f70
 8009564:	40200000 	.word	0x40200000
 8009568:	3ff00000 	.word	0x3ff00000
 800956c:	3e700000 	.word	0x3e700000
 8009570:	41700000 	.word	0x41700000
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	08009f30 	.word	0x08009f30
 800957c:	1e62      	subs	r2, r4, #1
 800957e:	ab0e      	add	r3, sp, #56	; 0x38
 8009580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009584:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009588:	a90e      	add	r1, sp, #56	; 0x38
 800958a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800958e:	e739      	b.n	8009404 <__kernel_rem_pio2+0x1cc>
 8009590:	1e62      	subs	r2, r4, #1
 8009592:	ab0e      	add	r3, sp, #56	; 0x38
 8009594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009598:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800959c:	e7f4      	b.n	8009588 <__kernel_rem_pio2+0x350>
 800959e:	a90e      	add	r1, sp, #56	; 0x38
 80095a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	430a      	orrs	r2, r1
 80095a8:	e789      	b.n	80094be <__kernel_rem_pio2+0x286>
 80095aa:	3301      	adds	r3, #1
 80095ac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80095b0:	2900      	cmp	r1, #0
 80095b2:	d0fa      	beq.n	80095aa <__kernel_rem_pio2+0x372>
 80095b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095b6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80095ba:	446a      	add	r2, sp
 80095bc:	3a98      	subs	r2, #152	; 0x98
 80095be:	920a      	str	r2, [sp, #40]	; 0x28
 80095c0:	9a08      	ldr	r2, [sp, #32]
 80095c2:	18e3      	adds	r3, r4, r3
 80095c4:	18a5      	adds	r5, r4, r2
 80095c6:	aa22      	add	r2, sp, #136	; 0x88
 80095c8:	f104 0801 	add.w	r8, r4, #1
 80095cc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80095d0:	9304      	str	r3, [sp, #16]
 80095d2:	9b04      	ldr	r3, [sp, #16]
 80095d4:	4543      	cmp	r3, r8
 80095d6:	da04      	bge.n	80095e2 <__kernel_rem_pio2+0x3aa>
 80095d8:	461c      	mov	r4, r3
 80095da:	e6a3      	b.n	8009324 <__kernel_rem_pio2+0xec>
 80095dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095de:	2301      	movs	r3, #1
 80095e0:	e7e4      	b.n	80095ac <__kernel_rem_pio2+0x374>
 80095e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80095e8:	f7f6 ff68 	bl	80004bc <__aeabi_i2d>
 80095ec:	e8e5 0102 	strd	r0, r1, [r5], #8
 80095f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f2:	46ab      	mov	fp, r5
 80095f4:	461c      	mov	r4, r3
 80095f6:	f04f 0900 	mov.w	r9, #0
 80095fa:	2600      	movs	r6, #0
 80095fc:	2700      	movs	r7, #0
 80095fe:	9b06      	ldr	r3, [sp, #24]
 8009600:	4599      	cmp	r9, r3
 8009602:	dd06      	ble.n	8009612 <__kernel_rem_pio2+0x3da>
 8009604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009606:	e8e3 6702 	strd	r6, r7, [r3], #8
 800960a:	f108 0801 	add.w	r8, r8, #1
 800960e:	930a      	str	r3, [sp, #40]	; 0x28
 8009610:	e7df      	b.n	80095d2 <__kernel_rem_pio2+0x39a>
 8009612:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009616:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800961a:	f7f6 ffb9 	bl	8000590 <__aeabi_dmul>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4630      	mov	r0, r6
 8009624:	4639      	mov	r1, r7
 8009626:	f7f6 fdfd 	bl	8000224 <__adddf3>
 800962a:	f109 0901 	add.w	r9, r9, #1
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	e7e4      	b.n	80095fe <__kernel_rem_pio2+0x3c6>
 8009634:	3d01      	subs	r5, #1
 8009636:	e748      	b.n	80094ca <__kernel_rem_pio2+0x292>
 8009638:	ec47 6b10 	vmov	d0, r6, r7
 800963c:	f1ca 0000 	rsb	r0, sl, #0
 8009640:	f000 fac6 	bl	8009bd0 <scalbn>
 8009644:	ec57 6b10 	vmov	r6, r7, d0
 8009648:	4ba0      	ldr	r3, [pc, #640]	; (80098cc <__kernel_rem_pio2+0x694>)
 800964a:	ee10 0a10 	vmov	r0, s0
 800964e:	2200      	movs	r2, #0
 8009650:	4639      	mov	r1, r7
 8009652:	f7f7 fa23 	bl	8000a9c <__aeabi_dcmpge>
 8009656:	b1f8      	cbz	r0, 8009698 <__kernel_rem_pio2+0x460>
 8009658:	4b9d      	ldr	r3, [pc, #628]	; (80098d0 <__kernel_rem_pio2+0x698>)
 800965a:	2200      	movs	r2, #0
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	f7f6 ff96 	bl	8000590 <__aeabi_dmul>
 8009664:	f7f7 fa44 	bl	8000af0 <__aeabi_d2iz>
 8009668:	4680      	mov	r8, r0
 800966a:	f7f6 ff27 	bl	80004bc <__aeabi_i2d>
 800966e:	4b97      	ldr	r3, [pc, #604]	; (80098cc <__kernel_rem_pio2+0x694>)
 8009670:	2200      	movs	r2, #0
 8009672:	f7f6 ff8d 	bl	8000590 <__aeabi_dmul>
 8009676:	460b      	mov	r3, r1
 8009678:	4602      	mov	r2, r0
 800967a:	4639      	mov	r1, r7
 800967c:	4630      	mov	r0, r6
 800967e:	f7f6 fdcf 	bl	8000220 <__aeabi_dsub>
 8009682:	f7f7 fa35 	bl	8000af0 <__aeabi_d2iz>
 8009686:	1c65      	adds	r5, r4, #1
 8009688:	ab0e      	add	r3, sp, #56	; 0x38
 800968a:	f10a 0a18 	add.w	sl, sl, #24
 800968e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009692:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009696:	e720      	b.n	80094da <__kernel_rem_pio2+0x2a2>
 8009698:	4630      	mov	r0, r6
 800969a:	4639      	mov	r1, r7
 800969c:	f7f7 fa28 	bl	8000af0 <__aeabi_d2iz>
 80096a0:	ab0e      	add	r3, sp, #56	; 0x38
 80096a2:	4625      	mov	r5, r4
 80096a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80096a8:	e717      	b.n	80094da <__kernel_rem_pio2+0x2a2>
 80096aa:	ab0e      	add	r3, sp, #56	; 0x38
 80096ac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80096b0:	f7f6 ff04 	bl	80004bc <__aeabi_i2d>
 80096b4:	4632      	mov	r2, r6
 80096b6:	463b      	mov	r3, r7
 80096b8:	f7f6 ff6a 	bl	8000590 <__aeabi_dmul>
 80096bc:	4b84      	ldr	r3, [pc, #528]	; (80098d0 <__kernel_rem_pio2+0x698>)
 80096be:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80096c2:	2200      	movs	r2, #0
 80096c4:	4630      	mov	r0, r6
 80096c6:	4639      	mov	r1, r7
 80096c8:	f7f6 ff62 	bl	8000590 <__aeabi_dmul>
 80096cc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80096d0:	4606      	mov	r6, r0
 80096d2:	460f      	mov	r7, r1
 80096d4:	e70f      	b.n	80094f6 <__kernel_rem_pio2+0x2be>
 80096d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80096da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80096de:	f7f6 ff57 	bl	8000590 <__aeabi_dmul>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096ea:	f7f6 fd9b 	bl	8000224 <__adddf3>
 80096ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80096f2:	f108 0801 	add.w	r8, r8, #1
 80096f6:	9b02      	ldr	r3, [sp, #8]
 80096f8:	4598      	cmp	r8, r3
 80096fa:	dc01      	bgt.n	8009700 <__kernel_rem_pio2+0x4c8>
 80096fc:	45b8      	cmp	r8, r7
 80096fe:	ddea      	ble.n	80096d6 <__kernel_rem_pio2+0x49e>
 8009700:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009704:	ab4a      	add	r3, sp, #296	; 0x128
 8009706:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800970a:	ed87 7b00 	vstr	d7, [r7]
 800970e:	3e01      	subs	r6, #1
 8009710:	e6f8      	b.n	8009504 <__kernel_rem_pio2+0x2cc>
 8009712:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009714:	2b02      	cmp	r3, #2
 8009716:	dc0b      	bgt.n	8009730 <__kernel_rem_pio2+0x4f8>
 8009718:	2b00      	cmp	r3, #0
 800971a:	dc35      	bgt.n	8009788 <__kernel_rem_pio2+0x550>
 800971c:	d059      	beq.n	80097d2 <__kernel_rem_pio2+0x59a>
 800971e:	9b04      	ldr	r3, [sp, #16]
 8009720:	f003 0007 	and.w	r0, r3, #7
 8009724:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009728:	ecbd 8b02 	vpop	{d8}
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009732:	2b03      	cmp	r3, #3
 8009734:	d1f3      	bne.n	800971e <__kernel_rem_pio2+0x4e6>
 8009736:	ab4a      	add	r3, sp, #296	; 0x128
 8009738:	4423      	add	r3, r4
 800973a:	9306      	str	r3, [sp, #24]
 800973c:	461c      	mov	r4, r3
 800973e:	469a      	mov	sl, r3
 8009740:	9502      	str	r5, [sp, #8]
 8009742:	9b02      	ldr	r3, [sp, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	f1aa 0a08 	sub.w	sl, sl, #8
 800974a:	dc6b      	bgt.n	8009824 <__kernel_rem_pio2+0x5ec>
 800974c:	46aa      	mov	sl, r5
 800974e:	f1ba 0f01 	cmp.w	sl, #1
 8009752:	f1a4 0408 	sub.w	r4, r4, #8
 8009756:	f300 8085 	bgt.w	8009864 <__kernel_rem_pio2+0x62c>
 800975a:	9c06      	ldr	r4, [sp, #24]
 800975c:	2000      	movs	r0, #0
 800975e:	3408      	adds	r4, #8
 8009760:	2100      	movs	r1, #0
 8009762:	2d01      	cmp	r5, #1
 8009764:	f300 809d 	bgt.w	80098a2 <__kernel_rem_pio2+0x66a>
 8009768:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800976c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009770:	f1bb 0f00 	cmp.w	fp, #0
 8009774:	f040 809b 	bne.w	80098ae <__kernel_rem_pio2+0x676>
 8009778:	9b01      	ldr	r3, [sp, #4]
 800977a:	e9c3 5600 	strd	r5, r6, [r3]
 800977e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009782:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009786:	e7ca      	b.n	800971e <__kernel_rem_pio2+0x4e6>
 8009788:	3408      	adds	r4, #8
 800978a:	ab4a      	add	r3, sp, #296	; 0x128
 800978c:	441c      	add	r4, r3
 800978e:	462e      	mov	r6, r5
 8009790:	2000      	movs	r0, #0
 8009792:	2100      	movs	r1, #0
 8009794:	2e00      	cmp	r6, #0
 8009796:	da36      	bge.n	8009806 <__kernel_rem_pio2+0x5ce>
 8009798:	f1bb 0f00 	cmp.w	fp, #0
 800979c:	d039      	beq.n	8009812 <__kernel_rem_pio2+0x5da>
 800979e:	4602      	mov	r2, r0
 80097a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097a4:	9c01      	ldr	r4, [sp, #4]
 80097a6:	e9c4 2300 	strd	r2, r3, [r4]
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80097b2:	f7f6 fd35 	bl	8000220 <__aeabi_dsub>
 80097b6:	ae4c      	add	r6, sp, #304	; 0x130
 80097b8:	2401      	movs	r4, #1
 80097ba:	42a5      	cmp	r5, r4
 80097bc:	da2c      	bge.n	8009818 <__kernel_rem_pio2+0x5e0>
 80097be:	f1bb 0f00 	cmp.w	fp, #0
 80097c2:	d002      	beq.n	80097ca <__kernel_rem_pio2+0x592>
 80097c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097c8:	4619      	mov	r1, r3
 80097ca:	9b01      	ldr	r3, [sp, #4]
 80097cc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80097d0:	e7a5      	b.n	800971e <__kernel_rem_pio2+0x4e6>
 80097d2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80097d6:	eb0d 0403 	add.w	r4, sp, r3
 80097da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80097de:	2000      	movs	r0, #0
 80097e0:	2100      	movs	r1, #0
 80097e2:	2d00      	cmp	r5, #0
 80097e4:	da09      	bge.n	80097fa <__kernel_rem_pio2+0x5c2>
 80097e6:	f1bb 0f00 	cmp.w	fp, #0
 80097ea:	d002      	beq.n	80097f2 <__kernel_rem_pio2+0x5ba>
 80097ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097f0:	4619      	mov	r1, r3
 80097f2:	9b01      	ldr	r3, [sp, #4]
 80097f4:	e9c3 0100 	strd	r0, r1, [r3]
 80097f8:	e791      	b.n	800971e <__kernel_rem_pio2+0x4e6>
 80097fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80097fe:	f7f6 fd11 	bl	8000224 <__adddf3>
 8009802:	3d01      	subs	r5, #1
 8009804:	e7ed      	b.n	80097e2 <__kernel_rem_pio2+0x5aa>
 8009806:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800980a:	f7f6 fd0b 	bl	8000224 <__adddf3>
 800980e:	3e01      	subs	r6, #1
 8009810:	e7c0      	b.n	8009794 <__kernel_rem_pio2+0x55c>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	e7c5      	b.n	80097a4 <__kernel_rem_pio2+0x56c>
 8009818:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800981c:	f7f6 fd02 	bl	8000224 <__adddf3>
 8009820:	3401      	adds	r4, #1
 8009822:	e7ca      	b.n	80097ba <__kernel_rem_pio2+0x582>
 8009824:	e9da 8900 	ldrd	r8, r9, [sl]
 8009828:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800982c:	9b02      	ldr	r3, [sp, #8]
 800982e:	3b01      	subs	r3, #1
 8009830:	9302      	str	r3, [sp, #8]
 8009832:	4632      	mov	r2, r6
 8009834:	463b      	mov	r3, r7
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f6 fcf3 	bl	8000224 <__adddf3>
 800983e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4640      	mov	r0, r8
 8009848:	4649      	mov	r1, r9
 800984a:	f7f6 fce9 	bl	8000220 <__aeabi_dsub>
 800984e:	4632      	mov	r2, r6
 8009850:	463b      	mov	r3, r7
 8009852:	f7f6 fce7 	bl	8000224 <__adddf3>
 8009856:	ed9d 7b08 	vldr	d7, [sp, #32]
 800985a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800985e:	ed8a 7b00 	vstr	d7, [sl]
 8009862:	e76e      	b.n	8009742 <__kernel_rem_pio2+0x50a>
 8009864:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009868:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800986c:	4640      	mov	r0, r8
 800986e:	4632      	mov	r2, r6
 8009870:	463b      	mov	r3, r7
 8009872:	4649      	mov	r1, r9
 8009874:	f7f6 fcd6 	bl	8000224 <__adddf3>
 8009878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	4640      	mov	r0, r8
 8009882:	4649      	mov	r1, r9
 8009884:	f7f6 fccc 	bl	8000220 <__aeabi_dsub>
 8009888:	4632      	mov	r2, r6
 800988a:	463b      	mov	r3, r7
 800988c:	f7f6 fcca 	bl	8000224 <__adddf3>
 8009890:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009894:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009898:	ed84 7b00 	vstr	d7, [r4]
 800989c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80098a0:	e755      	b.n	800974e <__kernel_rem_pio2+0x516>
 80098a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80098a6:	f7f6 fcbd 	bl	8000224 <__adddf3>
 80098aa:	3d01      	subs	r5, #1
 80098ac:	e759      	b.n	8009762 <__kernel_rem_pio2+0x52a>
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	9a01      	ldr	r2, [sp, #4]
 80098b2:	601d      	str	r5, [r3, #0]
 80098b4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80098b8:	605c      	str	r4, [r3, #4]
 80098ba:	609f      	str	r7, [r3, #8]
 80098bc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80098c0:	60d3      	str	r3, [r2, #12]
 80098c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098c6:	6110      	str	r0, [r2, #16]
 80098c8:	6153      	str	r3, [r2, #20]
 80098ca:	e728      	b.n	800971e <__kernel_rem_pio2+0x4e6>
 80098cc:	41700000 	.word	0x41700000
 80098d0:	3e700000 	.word	0x3e700000
 80098d4:	00000000 	.word	0x00000000

080098d8 <__kernel_sin>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	ed2d 8b04 	vpush	{d8-d9}
 80098e0:	eeb0 8a41 	vmov.f32	s16, s2
 80098e4:	eef0 8a61 	vmov.f32	s17, s3
 80098e8:	ec55 4b10 	vmov	r4, r5, d0
 80098ec:	b083      	sub	sp, #12
 80098ee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80098f2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80098f6:	9001      	str	r0, [sp, #4]
 80098f8:	da06      	bge.n	8009908 <__kernel_sin+0x30>
 80098fa:	ee10 0a10 	vmov	r0, s0
 80098fe:	4629      	mov	r1, r5
 8009900:	f7f7 f8f6 	bl	8000af0 <__aeabi_d2iz>
 8009904:	2800      	cmp	r0, #0
 8009906:	d051      	beq.n	80099ac <__kernel_sin+0xd4>
 8009908:	4622      	mov	r2, r4
 800990a:	462b      	mov	r3, r5
 800990c:	4620      	mov	r0, r4
 800990e:	4629      	mov	r1, r5
 8009910:	f7f6 fe3e 	bl	8000590 <__aeabi_dmul>
 8009914:	4682      	mov	sl, r0
 8009916:	468b      	mov	fp, r1
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4620      	mov	r0, r4
 800991e:	4629      	mov	r1, r5
 8009920:	f7f6 fe36 	bl	8000590 <__aeabi_dmul>
 8009924:	a341      	add	r3, pc, #260	; (adr r3, 8009a2c <__kernel_sin+0x154>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	4680      	mov	r8, r0
 800992c:	4689      	mov	r9, r1
 800992e:	4650      	mov	r0, sl
 8009930:	4659      	mov	r1, fp
 8009932:	f7f6 fe2d 	bl	8000590 <__aeabi_dmul>
 8009936:	a33f      	add	r3, pc, #252	; (adr r3, 8009a34 <__kernel_sin+0x15c>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	f7f6 fc70 	bl	8000220 <__aeabi_dsub>
 8009940:	4652      	mov	r2, sl
 8009942:	465b      	mov	r3, fp
 8009944:	f7f6 fe24 	bl	8000590 <__aeabi_dmul>
 8009948:	a33c      	add	r3, pc, #240	; (adr r3, 8009a3c <__kernel_sin+0x164>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	f7f6 fc69 	bl	8000224 <__adddf3>
 8009952:	4652      	mov	r2, sl
 8009954:	465b      	mov	r3, fp
 8009956:	f7f6 fe1b 	bl	8000590 <__aeabi_dmul>
 800995a:	a33a      	add	r3, pc, #232	; (adr r3, 8009a44 <__kernel_sin+0x16c>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f7f6 fc5e 	bl	8000220 <__aeabi_dsub>
 8009964:	4652      	mov	r2, sl
 8009966:	465b      	mov	r3, fp
 8009968:	f7f6 fe12 	bl	8000590 <__aeabi_dmul>
 800996c:	a337      	add	r3, pc, #220	; (adr r3, 8009a4c <__kernel_sin+0x174>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f7f6 fc57 	bl	8000224 <__adddf3>
 8009976:	9b01      	ldr	r3, [sp, #4]
 8009978:	4606      	mov	r6, r0
 800997a:	460f      	mov	r7, r1
 800997c:	b9eb      	cbnz	r3, 80099ba <__kernel_sin+0xe2>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4650      	mov	r0, sl
 8009984:	4659      	mov	r1, fp
 8009986:	f7f6 fe03 	bl	8000590 <__aeabi_dmul>
 800998a:	a325      	add	r3, pc, #148	; (adr r3, 8009a20 <__kernel_sin+0x148>)
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	f7f6 fc46 	bl	8000220 <__aeabi_dsub>
 8009994:	4642      	mov	r2, r8
 8009996:	464b      	mov	r3, r9
 8009998:	f7f6 fdfa 	bl	8000590 <__aeabi_dmul>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4620      	mov	r0, r4
 80099a2:	4629      	mov	r1, r5
 80099a4:	f7f6 fc3e 	bl	8000224 <__adddf3>
 80099a8:	4604      	mov	r4, r0
 80099aa:	460d      	mov	r5, r1
 80099ac:	ec45 4b10 	vmov	d0, r4, r5
 80099b0:	b003      	add	sp, #12
 80099b2:	ecbd 8b04 	vpop	{d8-d9}
 80099b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ba:	4b1b      	ldr	r3, [pc, #108]	; (8009a28 <__kernel_sin+0x150>)
 80099bc:	ec51 0b18 	vmov	r0, r1, d8
 80099c0:	2200      	movs	r2, #0
 80099c2:	f7f6 fde5 	bl	8000590 <__aeabi_dmul>
 80099c6:	4632      	mov	r2, r6
 80099c8:	ec41 0b19 	vmov	d9, r0, r1
 80099cc:	463b      	mov	r3, r7
 80099ce:	4640      	mov	r0, r8
 80099d0:	4649      	mov	r1, r9
 80099d2:	f7f6 fddd 	bl	8000590 <__aeabi_dmul>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	ec51 0b19 	vmov	r0, r1, d9
 80099de:	f7f6 fc1f 	bl	8000220 <__aeabi_dsub>
 80099e2:	4652      	mov	r2, sl
 80099e4:	465b      	mov	r3, fp
 80099e6:	f7f6 fdd3 	bl	8000590 <__aeabi_dmul>
 80099ea:	ec53 2b18 	vmov	r2, r3, d8
 80099ee:	f7f6 fc17 	bl	8000220 <__aeabi_dsub>
 80099f2:	a30b      	add	r3, pc, #44	; (adr r3, 8009a20 <__kernel_sin+0x148>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	4606      	mov	r6, r0
 80099fa:	460f      	mov	r7, r1
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fdc6 	bl	8000590 <__aeabi_dmul>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4630      	mov	r0, r6
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	f7f6 fc0a 	bl	8000224 <__adddf3>
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	4620      	mov	r0, r4
 8009a16:	4629      	mov	r1, r5
 8009a18:	f7f6 fc02 	bl	8000220 <__aeabi_dsub>
 8009a1c:	e7c4      	b.n	80099a8 <__kernel_sin+0xd0>
 8009a1e:	bf00      	nop
 8009a20:	55555549 	.word	0x55555549
 8009a24:	3fc55555 	.word	0x3fc55555
 8009a28:	3fe00000 	.word	0x3fe00000
 8009a2c:	5acfd57c 	.word	0x5acfd57c
 8009a30:	3de5d93a 	.word	0x3de5d93a
 8009a34:	8a2b9ceb 	.word	0x8a2b9ceb
 8009a38:	3e5ae5e6 	.word	0x3e5ae5e6
 8009a3c:	57b1fe7d 	.word	0x57b1fe7d
 8009a40:	3ec71de3 	.word	0x3ec71de3
 8009a44:	19c161d5 	.word	0x19c161d5
 8009a48:	3f2a01a0 	.word	0x3f2a01a0
 8009a4c:	1110f8a6 	.word	0x1110f8a6
 8009a50:	3f811111 	.word	0x3f811111

08009a54 <with_errno>:
 8009a54:	b570      	push	{r4, r5, r6, lr}
 8009a56:	4604      	mov	r4, r0
 8009a58:	460d      	mov	r5, r1
 8009a5a:	4616      	mov	r6, r2
 8009a5c:	f7fd fee8 	bl	8007830 <__errno>
 8009a60:	4629      	mov	r1, r5
 8009a62:	6006      	str	r6, [r0, #0]
 8009a64:	4620      	mov	r0, r4
 8009a66:	bd70      	pop	{r4, r5, r6, pc}

08009a68 <xflow>:
 8009a68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a6a:	4614      	mov	r4, r2
 8009a6c:	461d      	mov	r5, r3
 8009a6e:	b108      	cbz	r0, 8009a74 <xflow+0xc>
 8009a70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a74:	e9cd 2300 	strd	r2, r3, [sp]
 8009a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f7f6 fd86 	bl	8000590 <__aeabi_dmul>
 8009a84:	2222      	movs	r2, #34	; 0x22
 8009a86:	b003      	add	sp, #12
 8009a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a8c:	f7ff bfe2 	b.w	8009a54 <with_errno>

08009a90 <__math_uflow>:
 8009a90:	b508      	push	{r3, lr}
 8009a92:	2200      	movs	r2, #0
 8009a94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a98:	f7ff ffe6 	bl	8009a68 <xflow>
 8009a9c:	ec41 0b10 	vmov	d0, r0, r1
 8009aa0:	bd08      	pop	{r3, pc}

08009aa2 <__math_oflow>:
 8009aa2:	b508      	push	{r3, lr}
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009aaa:	f7ff ffdd 	bl	8009a68 <xflow>
 8009aae:	ec41 0b10 	vmov	d0, r0, r1
 8009ab2:	bd08      	pop	{r3, pc}

08009ab4 <finite>:
 8009ab4:	b082      	sub	sp, #8
 8009ab6:	ed8d 0b00 	vstr	d0, [sp]
 8009aba:	9801      	ldr	r0, [sp, #4]
 8009abc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009ac0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009ac4:	0fc0      	lsrs	r0, r0, #31
 8009ac6:	b002      	add	sp, #8
 8009ac8:	4770      	bx	lr
 8009aca:	0000      	movs	r0, r0
 8009acc:	0000      	movs	r0, r0
	...

08009ad0 <floor>:
 8009ad0:	ec51 0b10 	vmov	r0, r1, d0
 8009ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009adc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009ae0:	2e13      	cmp	r6, #19
 8009ae2:	ee10 5a10 	vmov	r5, s0
 8009ae6:	ee10 8a10 	vmov	r8, s0
 8009aea:	460c      	mov	r4, r1
 8009aec:	dc32      	bgt.n	8009b54 <floor+0x84>
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	da14      	bge.n	8009b1c <floor+0x4c>
 8009af2:	a333      	add	r3, pc, #204	; (adr r3, 8009bc0 <floor+0xf0>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f7f6 fb94 	bl	8000224 <__adddf3>
 8009afc:	2200      	movs	r2, #0
 8009afe:	2300      	movs	r3, #0
 8009b00:	f7f6 ffd6 	bl	8000ab0 <__aeabi_dcmpgt>
 8009b04:	b138      	cbz	r0, 8009b16 <floor+0x46>
 8009b06:	2c00      	cmp	r4, #0
 8009b08:	da57      	bge.n	8009bba <floor+0xea>
 8009b0a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009b0e:	431d      	orrs	r5, r3
 8009b10:	d001      	beq.n	8009b16 <floor+0x46>
 8009b12:	4c2d      	ldr	r4, [pc, #180]	; (8009bc8 <floor+0xf8>)
 8009b14:	2500      	movs	r5, #0
 8009b16:	4621      	mov	r1, r4
 8009b18:	4628      	mov	r0, r5
 8009b1a:	e025      	b.n	8009b68 <floor+0x98>
 8009b1c:	4f2b      	ldr	r7, [pc, #172]	; (8009bcc <floor+0xfc>)
 8009b1e:	4137      	asrs	r7, r6
 8009b20:	ea01 0307 	and.w	r3, r1, r7
 8009b24:	4303      	orrs	r3, r0
 8009b26:	d01f      	beq.n	8009b68 <floor+0x98>
 8009b28:	a325      	add	r3, pc, #148	; (adr r3, 8009bc0 <floor+0xf0>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7f6 fb79 	bl	8000224 <__adddf3>
 8009b32:	2200      	movs	r2, #0
 8009b34:	2300      	movs	r3, #0
 8009b36:	f7f6 ffbb 	bl	8000ab0 <__aeabi_dcmpgt>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d0eb      	beq.n	8009b16 <floor+0x46>
 8009b3e:	2c00      	cmp	r4, #0
 8009b40:	bfbe      	ittt	lt
 8009b42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009b46:	fa43 f606 	asrlt.w	r6, r3, r6
 8009b4a:	19a4      	addlt	r4, r4, r6
 8009b4c:	ea24 0407 	bic.w	r4, r4, r7
 8009b50:	2500      	movs	r5, #0
 8009b52:	e7e0      	b.n	8009b16 <floor+0x46>
 8009b54:	2e33      	cmp	r6, #51	; 0x33
 8009b56:	dd0b      	ble.n	8009b70 <floor+0xa0>
 8009b58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009b5c:	d104      	bne.n	8009b68 <floor+0x98>
 8009b5e:	ee10 2a10 	vmov	r2, s0
 8009b62:	460b      	mov	r3, r1
 8009b64:	f7f6 fb5e 	bl	8000224 <__adddf3>
 8009b68:	ec41 0b10 	vmov	d0, r0, r1
 8009b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b70:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b78:	fa23 f707 	lsr.w	r7, r3, r7
 8009b7c:	4207      	tst	r7, r0
 8009b7e:	d0f3      	beq.n	8009b68 <floor+0x98>
 8009b80:	a30f      	add	r3, pc, #60	; (adr r3, 8009bc0 <floor+0xf0>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 fb4d 	bl	8000224 <__adddf3>
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	f7f6 ff8f 	bl	8000ab0 <__aeabi_dcmpgt>
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d0bf      	beq.n	8009b16 <floor+0x46>
 8009b96:	2c00      	cmp	r4, #0
 8009b98:	da02      	bge.n	8009ba0 <floor+0xd0>
 8009b9a:	2e14      	cmp	r6, #20
 8009b9c:	d103      	bne.n	8009ba6 <floor+0xd6>
 8009b9e:	3401      	adds	r4, #1
 8009ba0:	ea25 0507 	bic.w	r5, r5, r7
 8009ba4:	e7b7      	b.n	8009b16 <floor+0x46>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009bac:	fa03 f606 	lsl.w	r6, r3, r6
 8009bb0:	4435      	add	r5, r6
 8009bb2:	4545      	cmp	r5, r8
 8009bb4:	bf38      	it	cc
 8009bb6:	18e4      	addcc	r4, r4, r3
 8009bb8:	e7f2      	b.n	8009ba0 <floor+0xd0>
 8009bba:	2500      	movs	r5, #0
 8009bbc:	462c      	mov	r4, r5
 8009bbe:	e7aa      	b.n	8009b16 <floor+0x46>
 8009bc0:	8800759c 	.word	0x8800759c
 8009bc4:	7e37e43c 	.word	0x7e37e43c
 8009bc8:	bff00000 	.word	0xbff00000
 8009bcc:	000fffff 	.word	0x000fffff

08009bd0 <scalbn>:
 8009bd0:	b570      	push	{r4, r5, r6, lr}
 8009bd2:	ec55 4b10 	vmov	r4, r5, d0
 8009bd6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009bda:	4606      	mov	r6, r0
 8009bdc:	462b      	mov	r3, r5
 8009bde:	b99a      	cbnz	r2, 8009c08 <scalbn+0x38>
 8009be0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009be4:	4323      	orrs	r3, r4
 8009be6:	d036      	beq.n	8009c56 <scalbn+0x86>
 8009be8:	4b39      	ldr	r3, [pc, #228]	; (8009cd0 <scalbn+0x100>)
 8009bea:	4629      	mov	r1, r5
 8009bec:	ee10 0a10 	vmov	r0, s0
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f7f6 fccd 	bl	8000590 <__aeabi_dmul>
 8009bf6:	4b37      	ldr	r3, [pc, #220]	; (8009cd4 <scalbn+0x104>)
 8009bf8:	429e      	cmp	r6, r3
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	da10      	bge.n	8009c22 <scalbn+0x52>
 8009c00:	a32b      	add	r3, pc, #172	; (adr r3, 8009cb0 <scalbn+0xe0>)
 8009c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c06:	e03a      	b.n	8009c7e <scalbn+0xae>
 8009c08:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009c0c:	428a      	cmp	r2, r1
 8009c0e:	d10c      	bne.n	8009c2a <scalbn+0x5a>
 8009c10:	ee10 2a10 	vmov	r2, s0
 8009c14:	4620      	mov	r0, r4
 8009c16:	4629      	mov	r1, r5
 8009c18:	f7f6 fb04 	bl	8000224 <__adddf3>
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	460d      	mov	r5, r1
 8009c20:	e019      	b.n	8009c56 <scalbn+0x86>
 8009c22:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009c26:	460b      	mov	r3, r1
 8009c28:	3a36      	subs	r2, #54	; 0x36
 8009c2a:	4432      	add	r2, r6
 8009c2c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009c30:	428a      	cmp	r2, r1
 8009c32:	dd08      	ble.n	8009c46 <scalbn+0x76>
 8009c34:	2d00      	cmp	r5, #0
 8009c36:	a120      	add	r1, pc, #128	; (adr r1, 8009cb8 <scalbn+0xe8>)
 8009c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c3c:	da1c      	bge.n	8009c78 <scalbn+0xa8>
 8009c3e:	a120      	add	r1, pc, #128	; (adr r1, 8009cc0 <scalbn+0xf0>)
 8009c40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c44:	e018      	b.n	8009c78 <scalbn+0xa8>
 8009c46:	2a00      	cmp	r2, #0
 8009c48:	dd08      	ble.n	8009c5c <scalbn+0x8c>
 8009c4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c56:	ec45 4b10 	vmov	d0, r4, r5
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009c60:	da19      	bge.n	8009c96 <scalbn+0xc6>
 8009c62:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c66:	429e      	cmp	r6, r3
 8009c68:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009c6c:	dd0a      	ble.n	8009c84 <scalbn+0xb4>
 8009c6e:	a112      	add	r1, pc, #72	; (adr r1, 8009cb8 <scalbn+0xe8>)
 8009c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1e2      	bne.n	8009c3e <scalbn+0x6e>
 8009c78:	a30f      	add	r3, pc, #60	; (adr r3, 8009cb8 <scalbn+0xe8>)
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	f7f6 fc87 	bl	8000590 <__aeabi_dmul>
 8009c82:	e7cb      	b.n	8009c1c <scalbn+0x4c>
 8009c84:	a10a      	add	r1, pc, #40	; (adr r1, 8009cb0 <scalbn+0xe0>)
 8009c86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0b8      	beq.n	8009c00 <scalbn+0x30>
 8009c8e:	a10e      	add	r1, pc, #56	; (adr r1, 8009cc8 <scalbn+0xf8>)
 8009c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c94:	e7b4      	b.n	8009c00 <scalbn+0x30>
 8009c96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c9a:	3236      	adds	r2, #54	; 0x36
 8009c9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ca0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <scalbn+0x108>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	e7e8      	b.n	8009c7e <scalbn+0xae>
 8009cac:	f3af 8000 	nop.w
 8009cb0:	c2f8f359 	.word	0xc2f8f359
 8009cb4:	01a56e1f 	.word	0x01a56e1f
 8009cb8:	8800759c 	.word	0x8800759c
 8009cbc:	7e37e43c 	.word	0x7e37e43c
 8009cc0:	8800759c 	.word	0x8800759c
 8009cc4:	fe37e43c 	.word	0xfe37e43c
 8009cc8:	c2f8f359 	.word	0xc2f8f359
 8009ccc:	81a56e1f 	.word	0x81a56e1f
 8009cd0:	43500000 	.word	0x43500000
 8009cd4:	ffff3cb0 	.word	0xffff3cb0
 8009cd8:	3c900000 	.word	0x3c900000

08009cdc <_init>:
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cde:	bf00      	nop
 8009ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce2:	bc08      	pop	{r3}
 8009ce4:	469e      	mov	lr, r3
 8009ce6:	4770      	bx	lr

08009ce8 <_fini>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	bf00      	nop
 8009cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cee:	bc08      	pop	{r3}
 8009cf0:	469e      	mov	lr, r3
 8009cf2:	4770      	bx	lr
